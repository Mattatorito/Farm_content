"""
üéØ –ò–ù–¢–ï–ì–†–ê–¢–û–† –í–ò–†–£–°–ù–û–ì–û –ö–û–ù–¢–ï–ù–¢–ê
===============================

–ú–æ–¥—É–ª—å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –≤–∏—Ä—É—Å–Ω—ã—Ö –≤–∏–¥–µ–æ –≤ —Å—Ç–∏–ª–µ –ø—Ä–∏–º–µ—Ä–æ–≤
—Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç-—Ñ–∞–±—Ä–∏–∫–∏.
"""

import asyncio
import logging
from typing import Dict, List, Optional
from datetime import datetime
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent.parent.parent))

from src.farm_content.core.viral_video_generator import ViralVideoGenerator
from multi_account_system import ContentItem


class ViralContentIntegrator:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É"""
    
    def __init__(self):
        self.logger = logging.getLogger("ViralContentIntegrator")
        self.viral_generator = ViralVideoGenerator()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥ —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        self.account_templates = {
            "ai_video": {
                "preferred_templates": ["motivation_viral", "facts_viral"],
                "quality_level": "ultra",
                "daily_limit": 5
            },
            "trend_short": {
                "preferred_templates": ["facts_viral", "lifestyle_viral"], 
                "quality_level": "high",
                "daily_limit": 8
            },
            "movie_clip": {
                "preferred_templates": ["money_viral", "lifestyle_viral"],
                "quality_level": "ultra", 
                "daily_limit": 4
            }
        }
    
    async def create_content_for_account(
        self, 
        account_type: str, 
        account_id: str,
        custom_requirements: Dict = None
    ) -> Optional[ContentItem]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        
        try:
            self.logger.info(f"üé¨ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id} ({account_type})")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–∏–ø–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
            account_settings = self.account_templates.get(account_type, self.account_templates["ai_video"])
            
            # –í—ã–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω
            template_name = self.select_optimal_template(account_type, custom_requirements)
            
            # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ
            video_result = await self.viral_generator.create_viral_video(
                template_name=template_name,
                custom_script=custom_requirements.get("script") if custom_requirements else None,
                target_platform=custom_requirements.get("platform", "youtube") if custom_requirements else "youtube",
                quality_level=account_settings["quality_level"]
            )
            
            if not video_result["success"]:
                self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ: {video_result.get('error')}")
                return None
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ ContentItem
            content_item = self.convert_to_content_item(video_result, account_id, account_type)
            
            self.logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è {account_id}: {content_item.content_id}")
            return content_item
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
            return None
    
    def select_optimal_template(self, account_type: str, custom_requirements: Dict = None) -> str:
        """–í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        if custom_requirements and "template" in custom_requirements:
            return custom_requirements["template"]
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è —Ç–∏–ø–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
        account_settings = self.account_templates.get(account_type, self.account_templates["ai_video"])
        preferred_templates = account_settings["preferred_templates"]
        
        # –£–º–Ω—ã–π –≤—ã–±–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ –∏ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        import random
        from datetime import datetime
        
        now = datetime.now()
        hour = now.hour
        weekday = now.weekday()
        
        # –£—Ç—Ä–æ–º (6-12) - –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        if 6 <= hour <= 12 and "motivation_viral" in preferred_templates:
            return "motivation_viral"
        
        # –î–Ω–µ–º (12-18) - —Ñ–∞–∫—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏  
        elif 12 <= hour <= 18 and "facts_viral" in preferred_templates:
            return "facts_viral"
        
        # –í–µ—á–µ—Ä–æ–º (18-23) - –¥–µ–Ω—å–≥–∏ –∏ –±–∏–∑–Ω–µ—Å
        elif 18 <= hour <= 23 and "money_viral" in preferred_templates:
            return "money_viral"
        
        # –í –æ—Å—Ç–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è - —Å–ª—É—á–∞–π–Ω—ã–π –∏–∑ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã—Ö
        else:
            return random.choice(preferred_templates)
    
    def convert_to_content_item(
        self, 
        video_result: Dict, 
        account_id: str, 
        account_type: str
    ) -> ContentItem:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ ContentItem"""
        
        metadata = video_result["metadata"]
        
        return ContentItem(
            content_id=video_result["video_id"],
            account_id=account_id,
            content_type=account_type,
            file_path=video_result["file_path"],
            title=metadata["title"],
            description=metadata["description"], 
            tags=metadata["tags"],
            duration=video_result["duration"],
            quality_score=video_result["quality_score"],
            created_at=datetime.fromisoformat(video_result["created_at"]),
            metadata={
                "template_used": video_result["template_used"],
                "resolution": video_result["resolution"],
                "category": metadata["category"],
                "target_emotions": metadata["target_emotions"],
                "viral_score": metadata["viral_score"]
            }
        )
    
    async def batch_create_content(
        self, 
        accounts_config: List[Dict],
        total_videos: int = 10
    ) -> List[ContentItem]:
        """–ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        
        created_content = []
        
        self.logger.info(f"üè≠ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ {total_videos} –≤–∏–¥–µ–æ")
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∏–¥–µ–æ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º
        for i in range(total_videos):
            account_config = accounts_config[i % len(accounts_config)]
            
            content_item = await self.create_content_for_account(
                account_type=account_config["content_type"],
                account_id=account_config["account_id"],
                custom_requirements=account_config.get("requirements")
            )
            
            if content_item:
                created_content.append(content_item)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–∑–¥–∞–Ω–∏–µ–º
            await asyncio.sleep(1)
        
        self.logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(created_content)} –∏–∑ {total_videos} –≤–∏–¥–µ–æ")
        return created_content
    
    async def create_trending_content(self, trend_topic: str, account_configs: List[Dict]) -> List[ContentItem]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–æ–≤–æ–π —Ç–µ–º—ã"""
        
        trending_content = []
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–∞
        trending_scripts = self.generate_trending_scripts(trend_topic)
        
        for i, account_config in enumerate(account_configs):
            script = trending_scripts[i % len(trending_scripts)]
            
            custom_requirements = {
                "script": script,
                "template": "facts_viral",  # –¢—Ä–µ–Ω–¥–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ª—É—á—à–µ –∏–¥–µ—Ç –∫–∞–∫ —Ñ–∞–∫—Ç—ã
                "platform": account_config.get("platform", "youtube")
            }
            
            content_item = await self.create_content_for_account(
                account_type=account_config["content_type"],
                account_id=account_config["account_id"], 
                custom_requirements=custom_requirements
            )
            
            if content_item:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–¥–µ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                content_item.metadata["trend_topic"] = trend_topic
                content_item.metadata["is_trending"] = True
                trending_content.append(content_item)
        
        return trending_content
    
    def generate_trending_scripts(self, trend_topic: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–æ–≤–æ–π —Ç–µ–º—ã"""
        
        # –®–∞–±–ª–æ–Ω—ã –¥–ª—è —Ç—Ä–µ–Ω–¥–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        templates = [
            f"–®–û–ö–ò–†–£–Æ–©–ê–Ø –ø—Ä–∞–≤–¥–∞ –æ {trend_topic}! 99% –ª—é–¥–µ–π —ç—Ç–æ–≥–æ –Ω–µ –∑–Ω–∞—é—Ç...",
            f"–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —Å {trend_topic} –≤ 2025 –≥–æ–¥—É? –ù–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã!",
            f"–í–ù–ò–ú–ê–ù–ò–ï! {trend_topic} –∏–∑–º–µ–Ω–∏—Ç —Ç–≤–æ—é –∂–∏–∑–Ω—å –∑–∞ 30 —Å–µ–∫—É–Ω–¥!",
            f"–°–µ–∫—Ä–µ—Ç {trend_topic}, –∫–æ—Ç–æ—Ä—ã–π —Å–∫—Ä—ã–≤–∞—é—Ç —ç–∫—Å–ø–µ—Ä—Ç—ã...",
            f"–ö–∞–∫ {trend_topic} —Å–¥–µ–ª–∞–µ—Ç —Ç–µ–±—è –º–∏–ª–ª–∏–æ–Ω–µ—Ä–æ–º? –†–µ–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è!",
            f"–°–¢–û–ü! –ï—Å–ª–∏ —Ç—ã –Ω–µ –∑–Ω–∞–µ—à—å –ø—Ä–æ {trend_topic} - —Ç—ã —Ç–µ—Ä—è–µ—à—å –¥–µ–Ω—å–≥–∏!"
        ]
        
        return templates
    
    def get_performance_analytics(self, content_items: List[ContentItem]) -> Dict:
        """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        
        if not content_items:
            return {"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"}
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —à–∞–±–ª–æ–Ω–∞–º
        template_usage = {}
        total_quality = 0
        category_distribution = {}
        
        for item in content_items:
            template = item.metadata.get("template_used", "unknown")
            category = item.metadata.get("category", "unknown")
            
            template_usage[template] = template_usage.get(template, 0) + 1
            category_distribution[category] = category_distribution.get(category, 0) + 1
            total_quality += item.quality_score
        
        avg_quality = total_quality / len(content_items)
        
        return {
            "total_videos": len(content_items),
            "average_quality_score": round(avg_quality, 3),
            "template_distribution": template_usage,
            "category_distribution": category_distribution,
            "quality_grades": {
                "excellent": len([item for item in content_items if item.quality_score >= 0.8]),
                "good": len([item for item in content_items if 0.6 <= item.quality_score < 0.8]),
                "average": len([item for item in content_items if item.quality_score < 0.6])
            },
            "recommendations": self.generate_recommendations(content_items)
        }
    
    def generate_recommendations(self, content_items: List[ContentItem]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"""
        
        recommendations = []
        
        avg_quality = sum(item.quality_score for item in content_items) / len(content_items)
        
        if avg_quality < 0.7:
            recommendations.append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ –≤–∏—Ä—É—Å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        if avg_quality >= 0.9:
            recommendations.append("–û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
        
        # –ê–Ω–∞–ª–∏–∑ —à–∞–±–ª–æ–Ω–æ–≤
        template_scores = {}
        for item in content_items:
            template = item.metadata.get("template_used", "unknown")
            if template not in template_scores:
                template_scores[template] = []
            template_scores[template].append(item.quality_score)
        
        # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π —à–∞–±–ª–æ–Ω
        if template_scores:
            best_template = max(template_scores.keys(), 
                              key=lambda t: sum(template_scores[t]) / len(template_scores[t]))
            recommendations.append(f"–®–∞–±–ª–æ–Ω '{best_template}' –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        
        return recommendations


# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
async def demo_viral_integration():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤–∏—Ä—É—Å–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
    
    print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –í–ò–†–£–°–ù–û–ì–û –ö–û–ù–¢–ï–ù–¢–ê")
    print("=" * 55)
    
    integrator = ViralContentIntegrator()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    test_accounts = [
        {
            "account_id": "ai_master_channel",
            "content_type": "ai_video",
            "platform": "youtube"
        },
        {
            "account_id": "trend_hunter_1", 
            "content_type": "trend_short",
            "platform": "tiktok"
        },
        {
            "account_id": "money_master",
            "content_type": "movie_clip", 
            "platform": "instagram"
        }
    ]
    
    print("üé¨ –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    created_content = []
    
    for account in test_accounts:
        print(f"\nüì± –ê–∫–∫–∞—É–Ω—Ç: {account['account_id']} ({account['content_type']})")
        
        content_item = await integrator.create_content_for_account(
            account_type=account["content_type"],
            account_id=account["account_id"]
        )
        
        if content_item:
            created_content.append(content_item)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ: {content_item.title[:50]}...")
            print(f"üìä –ö–∞—á–µ—Å—Ç–≤–æ: {content_item.quality_score:.1%}")
            print(f"üéØ –®–∞–±–ª–æ–Ω: {content_item.metadata.get('template_used')}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    
    # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if created_content:
        print(f"\nüìä –ê–ù–ê–õ–ò–¢–ò–ö–ê –°–û–ó–î–ê–ù–ù–û–ì–û –ö–û–ù–¢–ï–ù–¢–ê:")
        analytics = integrator.get_performance_analytics(created_content)
        
        print(f"üìà –í—Å–µ–≥–æ –≤–∏–¥–µ–æ: {analytics['total_videos']}")
        print(f"üèÜ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {analytics['average_quality_score']:.1%}")
        print(f"‚≠ê –û—Ç–ª–∏—á–Ω—ã—Ö –≤–∏–¥–µ–æ: {analytics['quality_grades']['excellent']}")
        
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for rec in analytics['recommendations']:
            print(f"   ‚Ä¢ {rec}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    print(f"\nüî• –°–û–ó–î–ê–ù–ò–ï –¢–†–ï–ù–î–û–í–û–ì–û –ö–û–ù–¢–ï–ù–¢–ê...")
    
    trending_content = await integrator.create_trending_content(
        trend_topic="–ò–ò –∏ –±—É–¥—É—â–µ–µ",
        account_configs=test_accounts[:2]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 2 –∞–∫–∫–∞—É–Ω—Ç–∞
    )
    
    print(f"üî• –°–æ–∑–¥–∞–Ω–æ {len(trending_content)} —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –≤–∏–¥–µ–æ")
    
    print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


if __name__ == "__main__":
    asyncio.run(demo_viral_integration())