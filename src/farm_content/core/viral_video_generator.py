"""
üé¨ –ì–ï–ù–ï–†–ê–¢–û–† –í–ò–î–ï–û –í –°–¢–ò–õ–ï –ü–†–ò–ú–ï–†–û–í
===================================

–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ä—É—Å–Ω—ã—Ö –≤–∏–¥–µ–æ —Ç–æ—á–Ω–æ –≤ —Ç–æ–º —Å—Ç–∏–ª–µ,
–∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –ø–æ–∫–∞–∑–∞–Ω –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ü–µ–ª–µ–≤—ã—Ö –≤–∏–¥–µ–æ:
- –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ —á–µ—Ç–∫–æ—Å—Ç—å
- –Ø—Ä–∫–∏–µ, –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞
- –î–∏–Ω–∞–º–∏—á–Ω—ã–π –º–æ–Ω—Ç–∞–∂ —Å –±—ã—Å—Ç—Ä—ã–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏
- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏ –¥—Ä–∞–º–∞—Ç–∏—á–Ω–æ—Å—Ç—å
- –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ —Å music/sound effects
- Trending —Ç–µ–º–∞—Ç–∏–∫–∞ –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–¥ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Å–æ—Ü—Å–µ—Ç–µ–π
"""

import asyncio
import json
import logging
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, field
import numpy as np
from moviepy.editor import *
import random
import os


@dataclass
class VideoStyle:
    """–°—Ç–∏–ª—å –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–º–µ—Ä–æ–≤"""
    name: str
    duration_range: Tuple[int, int] = (15, 60)  # seconds
    resolution: Tuple[int, int] = (1080, 1920)  # 9:16 –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ
    fps: int = 30
    color_grading: str = "vibrant"  # vibrant, cinematic, dramatic
    transition_speed: str = "fast"  # slow, medium, fast, very_fast
    music_genre: str = "trending"   # trending, dramatic, upbeat, chill
    text_overlay: bool = True
    effects_intensity: float = 0.8  # 0.0-1.0
    viral_elements: List[str] = field(default_factory=list)


@dataclass
class ContentTemplate:
    """–®–∞–±–ª–æ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    template_id: str
    category: str  # motivation, facts, lifestyle, entertainment, etc.
    hook_style: str  # question, statement, shock, curiosity
    structure: List[str]  # ["hook", "buildup", "climax", "resolution"]
    visual_style: VideoStyle
    target_emotions: List[str]  # excitement, curiosity, surprise, etc.
    trending_tags: List[str]
    sample_scripts: List[str] = field(default_factory=list)


class ViralVideoGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–∏—Ä—É—Å–Ω—ã—Ö –≤–∏–¥–µ–æ –≤ —Å—Ç–∏–ª–µ –ø—Ä–∏–º–µ—Ä–æ–≤"""
    
    def __init__(self, assets_path: str = "viral_assets/"):
        self.logger = logging.getLogger("ViralVideoGenerator")
        self.assets_path = Path(assets_path)
        self.templates = self.load_video_templates()
        self.ensure_assets_exist()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö
        self.quality_settings = {
            "bitrate": "8000k",      # –í—ã—Å–æ–∫–∏–π –±–∏—Ç—Ä–µ–π—Ç –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
            "codec": "libx264",      # H.264 –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            "preset": "slow",        # –ú–µ–¥–ª–µ–Ω–Ω—ã–π –ø—Ä–µ—Å–µ—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            "crf": 18,              # –ù–∏–∑–∫–∏–π CRF –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            "audio_bitrate": "320k"  # –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ
        }
    
    def ensure_assets_exist(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∞—Å—Å–µ—Ç–æ–≤"""
        
        directories = [
            "viral_assets/templates",
            "viral_assets/audio/trending",
            "viral_assets/audio/dramatic", 
            "viral_assets/audio/upbeat",
            "viral_assets/effects/transitions",
            "viral_assets/effects/overlays",
            "viral_assets/fonts",
            "viral_assets/backgrounds/gradients",
            "viral_assets/backgrounds/textures",
            "generated_viral_content"
        ]
        
        for directory in directories:
            Path(directory).mkdir(parents=True, exist_ok=True)
    
    def load_video_templates(self) -> Dict[str, ContentTemplate]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–º–µ—Ä–æ–≤"""
        
        templates = {}
        
        # –®–∞–±–ª–æ–Ω 1: –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö)
        templates["motivation_viral"] = ContentTemplate(
            template_id="motivation_viral",
            category="motivation",
            hook_style="statement",
            structure=["powerful_hook", "emotional_buildup", "climax_moment", "call_to_action"],
            visual_style=VideoStyle(
                name="motivation_style",
                duration_range=(20, 45),
                color_grading="dramatic",
                transition_speed="medium",
                music_genre="dramatic",
                viral_elements=["zoom_effects", "text_reveals", "color_bursts"]
            ),
            target_emotions=["inspiration", "determination", "energy"],
            trending_tags=["motivation", "success", "mindset", "grind", "viral"],
            sample_scripts=[
                "–°–∞–º—ã–µ —É—Å–ø–µ—à–Ω—ã–µ –ª—é–¥–∏ –¥–µ–ª–∞—é—Ç –≠–¢–û –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ...",
                "–°–¢–û–ü! –ï—Å–ª–∏ —Ç—ã –Ω–µ –¥–µ–ª–∞–µ—à—å —ç—Ç–æ - —Ç—ã —Ç–µ—Ä—è–µ—à—å –º–∏–ª–ª–∏–æ–Ω—ã...",
                "–°–µ–∫—Ä–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–∫—Ä—ã–≤–∞—é—Ç –±–æ–≥–∞—Ç—ã–µ –ª—é–¥–∏..."
            ]
        )
        
        # –®–∞–±–ª–æ–Ω 2: –§–∞–∫—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏
        templates["facts_viral"] = ContentTemplate(
            template_id="facts_viral", 
            category="facts",
            hook_style="shock",
            structure=["shocking_hook", "explanation", "proof", "mind_blow"],
            visual_style=VideoStyle(
                name="facts_style",
                duration_range=(15, 30),
                color_grading="vibrant",
                transition_speed="fast",
                music_genre="upbeat",
                viral_elements=["quick_cuts", "number_counters", "reveal_effects"]
            ),
            target_emotions=["surprise", "curiosity", "amazement"],
            trending_tags=["—Ñ–∞–∫—Ç—ã", "–ª–∞–π—Ñ—Ö–∞–∫", "–∑–Ω–∞–Ω–∏—è", "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "–≤–∏—Ä–∞–ª"],
            sample_scripts=[
                "99% –ª—é–¥–µ–π –ù–ï –ó–ù–ê–Æ–¢ —ç—Ç–æ–≥–æ —Ñ–∞–∫—Ç–∞...",
                "–≠—Ç–æ—Ç —Ç—Ä—é–∫ –∏–∑–º–µ–Ω–∏—Ç —Ç–≤–æ—é –∂–∏–∑–Ω—å –∑–∞ 30 —Å–µ–∫—É–Ω–¥!",
                "–í–ù–ò–ú–ê–ù–ò–ï! –¢–≤–æ–π –º–æ–∑–≥ —Å–µ–π—á–∞—Å –≤–∑–æ—Ä–≤–µ—Ç—Å—è..."
            ]
        )
        
        # –®–∞–±–ª–æ–Ω 3: Lifestyle –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
        templates["lifestyle_viral"] = ContentTemplate(
            template_id="lifestyle_viral",
            category="lifestyle", 
            hook_style="curiosity",
            structure=["intriguing_hook", "story_development", "unexpected_twist", "satisfying_end"],
            visual_style=VideoStyle(
                name="lifestyle_style",
                duration_range=(25, 50),
                color_grading="cinematic",
                transition_speed="medium",
                music_genre="trending",
                viral_elements=["smooth_transitions", "aesthetic_filters", "trending_sounds"]
            ),
            target_emotions=["entertainment", "relatability", "satisfaction"],
            trending_tags=["–ª–∞–π—Ñ—Å—Ç–∞–π–ª", "—Ç—Ä–µ–Ω–¥—ã", "–∂–∏–∑–Ω—å", "–∫–æ–Ω—Ç–µ–Ω—Ç", "–≤–∞–π–±"],
            sample_scripts=[
                "–î–µ–Ω—å –∏–∑ –∂–∏–∑–Ω–∏ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç...",
                "–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç, –µ—Å–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≠–¢–û...",
                "–†–µ–∞–∫—Ü–∏—è –ª—é–¥–µ–π –Ω–∞ –≠–¢–û–¢ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç..."
            ]
        )
        
        # –®–∞–±–ª–æ–Ω 4: –ë–∏–∑–Ω–µ—Å –∏ –¥–µ–Ω—å–≥–∏ (–æ—á–µ–Ω—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–π)
        templates["money_viral"] = ContentTemplate(
            template_id="money_viral",
            category="business",
            hook_style="question",
            structure=["money_hook", "problem_highlight", "solution_reveal", "success_proof"],
            visual_style=VideoStyle(
                name="money_style", 
                duration_range=(30, 60),
                color_grading="dramatic",
                transition_speed="fast",
                music_genre="dramatic",
                viral_elements=["money_graphics", "success_imagery", "transformation_effects"]
            ),
            target_emotions=["ambition", "desire", "urgency", "hope"],
            trending_tags=["–¥–µ–Ω—å–≥–∏", "–±–∏–∑–Ω–µ—Å", "–∑–∞—Ä–∞–±–æ—Ç–æ–∫", "—É—Å–ø–µ—Ö", "–º–∏–ª–ª–∏–æ–Ω–µ—Ä"],
            sample_scripts=[
                "–ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–π –º–∏–ª–ª–∏–æ–Ω –∑–∞ 90 –¥–Ω–µ–π?",
                "–≠–¢–û–¢ –º–µ—Ç–æ–¥ –ø—Ä–∏–Ω–µ—Å –º–Ω–µ 500–ö –∑–∞ –º–µ—Å—è—Ü...",
                "–ü–æ—á–µ–º—É –±–µ–¥–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–¥–Ω—ã–º–∏? –ì–ª–∞–≤–Ω—ã–π —Å–µ–∫—Ä–µ—Ç..."
            ]
        )
        
        return templates
    
    async def create_viral_video(
        self,
        template_name: str = "motivation_viral",
        custom_script: str = None,
        target_platform: str = "all",
        quality_level: str = "ultra"
    ) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—É—Å–Ω–æ–≥–æ –≤–∏–¥–µ–æ –ø–æ —à–∞–±–ª–æ–Ω—É"""
        
        try:
            self.logger.info(f"üé¨ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—É—Å–Ω–æ–≥–æ –≤–∏–¥–µ–æ: {template_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
            if template_name not in self.templates:
                template_name = "motivation_viral"  # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π
            
            template = self.templates[template_name]
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
            video_id = f"viral_{template_name}_{int(datetime.now().timestamp())}"
            
            # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
            if not custom_script:
                custom_script = self.generate_viral_script(template)
            
            # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            video_components = await self.create_video_components(template, custom_script, video_id)
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ
            final_video_path = await self.assemble_final_video(
                video_components, template, video_id, quality_level
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata = self.generate_video_metadata(template, custom_script, target_platform)
            
            result = {
                "success": True,
                "video_id": video_id,
                "file_path": final_video_path,
                "template_used": template_name,
                "script": custom_script,
                "metadata": metadata,
                "duration": video_components.get("total_duration", 30),
                "resolution": template.visual_style.resolution,
                "quality_score": self.calculate_viral_score(template, custom_script),
                "created_at": datetime.now().isoformat()
            }
            
            self.logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ: {final_video_path}")
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ: {e}")
            return {
                "success": False,
                "error": str(e),
                "video_id": video_id if 'video_id' in locals() else None
            }
    
    def generate_viral_script(self, template: ContentTemplate) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏—Ä—É—Å–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞"""
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏–∑ —à–∞–±–ª–æ–Ω–∞ –∫–∞–∫ –æ—Å–Ω–æ–≤—É
        if template.sample_scripts:
            base_script = random.choice(template.sample_scripts)
        else:
            base_script = "–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∏–∑–º–µ–Ω–∏—Ç —Ç–≤–æ–µ –º—ã—à–ª–µ–Ω–∏–µ..."
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏—Ä—É—Å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        viral_phrases = [
            "–í–ù–ò–ú–ê–ù–ò–ï! ",
            "–°–¢–û–ü! ",
            "99% –ª—é–¥–µ–π –Ω–µ –∑–Ω–∞—é—Ç... ",
            "–°–µ–∫—Ä–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –ª—é–¥–µ–π: ",
            "–≠—Ç–æ –∏–∑–º–µ–Ω–∏—Ç —Ç–≤–æ—é –∂–∏–∑–Ω—å: ",
            "–®–û–ö–ò–†–£–Æ–©–ê–Ø –ø—Ä–∞–≤–¥–∞: "
        ]
        
        endings = [
            " –°–æ—Ö—Ä–∞–Ω—è–π, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å!",
            " –î–µ–ª–∏—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!",
            " –ù–∞–ø–∏—à–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö —Å–≤–æ–µ –º–Ω–µ–Ω–∏–µ!",
            " –°—Ç–∞–≤—å –ª–∞–π–∫, –µ—Å–ª–∏ —Å–æ–≥–ª–∞—Å–µ–Ω!",
            " –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞!",
            " –°–æ—Ö—Ä–∞–Ω—è–π –≤ –∑–∞–∫–ª–∞–¥–∫–∏!"
        ]
        
        # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        if not base_script.startswith(tuple(viral_phrases)):
            hook = random.choice(viral_phrases)
            script = hook + base_script
        else:
            script = base_script
        
        if not script.endswith(tuple(endings)):
            ending = random.choice(endings)
            script += ending
        
        return script
    
    async def create_video_components(
        self, 
        template: ContentTemplate, 
        script: str, 
        video_id: str
    ) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤–∏–¥–µ–æ"""
        
        components = {}
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        target_duration = random.randint(*template.visual_style.duration_range)
        components["total_duration"] = target_duration
        
        # 1. –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ
        background = await self.create_background_video(template, target_duration)
        components["background"] = background
        
        # 2. –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        text_clips = await self.create_text_overlays(template, script, target_duration)
        components["text_clips"] = text_clips
        
        # 3. –ü–æ–¥–±–∏—Ä–∞–µ–º –º—É–∑—ã–∫—É
        music = await self.select_trending_music(template.visual_style.music_genre, target_duration)
        components["music"] = music
        
        # 4. –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        effects = await self.create_visual_effects(template, target_duration)
        components["effects"] = effects
        
        # 5. –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã
        transitions = await self.create_transitions(template.visual_style.transition_speed)
        components["transitions"] = transitions
        
        return components
    
    async def create_background_video(self, template: ContentTemplate, duration: int) -> VideoFileClip:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞"""
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö
        width, height = template.visual_style.resolution
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
        def create_gradient_frame(t):
            """–°–æ–∑–¥–∞–µ—Ç –∫–∞–¥—Ä —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º"""
            
            # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
            color_schemes = {
                "dramatic": [(20, 20, 40), (80, 40, 120), (140, 60, 180)],
                "vibrant": [(255, 100, 150), (100, 200, 255), (150, 255, 100)],
                "cinematic": [(40, 60, 80), (80, 100, 120), (120, 140, 160)]
            }
            
            colors = color_schemes.get(template.visual_style.color_grading, color_schemes["vibrant"])
            
            # –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
            frame = np.zeros((height, width, 3), dtype=np.uint8)
            
            for y in range(height):
                for x in range(width):
                    # –†–∞—Å—á–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
                    gradient_pos = (y / height + 0.3 * np.sin(t * 2 + x / width * 4)) % 1
                    color_index = gradient_pos * (len(colors) - 1)
                    
                    c1_idx = int(color_index) % len(colors)
                    c2_idx = (c1_idx + 1) % len(colors)
                    blend = color_index - int(color_index)
                    
                    # –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è —Ü–≤–µ—Ç–æ–≤
                    c1, c2 = colors[c1_idx], colors[c2_idx]
                    
                    r = int(c1[0] * (1-blend) + c2[0] * blend)
                    g = int(c1[1] * (1-blend) + c2[1] * blend)  
                    b = int(c1[2] * (1-blend) + c2[2] * blend)
                    
                    frame[y, x] = [r, g, b]
            
            return frame
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ –∫–ª–∏–ø —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ñ–æ–Ω–æ–º
        background_clip = VideoClip(create_gradient_frame, duration=duration)
        background_clip = background_clip.set_fps(template.visual_style.fps)
        
        return background_clip
    
    async def create_text_overlays(
        self, 
        template: ContentTemplate, 
        script: str, 
        duration: int
    ) -> List[TextClip]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –Ω–∞–ª–æ–∂–µ–Ω–∏–π –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö"""
        
        text_clips = []
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞
        words = script.split()
        
        if len(words) <= 3:
            # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Å—å —Å—Ä–∞–∑—É
            text_parts = [script]
        elif len(words) <= 8:
            # –°—Ä–µ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç - —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ–ø–æ–ª–∞–º
            mid = len(words) // 2
            text_parts = [
                " ".join(words[:mid]),
                " ".join(words[mid:])
            ]
        else:
            # –î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ 3-4 —á–∞—Å—Ç–∏
            part_size = len(words) // 3
            text_parts = [
                " ".join(words[:part_size]),
                " ".join(words[part_size:part_size*2]),
                " ".join(words[part_size*2:])
            ]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–ø—ã –¥–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
        part_duration = duration / len(text_parts)
        
        for i, text_part in enumerate(text_parts):
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∫–∞–∫ –≤ –≤–∏—Ä—É—Å–Ω—ã—Ö –≤–∏–¥–µ–æ
            text_clip = TextClip(
                text_part,
                fontsize=60,  # –ö—Ä—É–ø–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                color='white',
                font='Arial-Bold',  # –ñ–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç
                stroke_color='black',  # –ß–µ—Ä–Ω–∞—è –æ–±–≤–æ–¥–∫–∞
                stroke_width=3,
                method='caption',
                size=template.visual_style.resolution
            ).set_duration(part_duration).set_start(i * part_duration)
            
            # –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            text_clip = text_clip.set_position('center').crossfadein(0.3).crossfadeout(0.3)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–∞
            if i == 0:  # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å - —Ö—É–∫
                text_clip = text_clip.resize(lambda t: 1 + 0.1 * np.sin(t * 3))
            
            text_clips.append(text_clip)
        
        return text_clips
    
    async def select_trending_music(self, genre: str, duration: int) -> Optional[AudioFileClip]:
        """–ü–æ–¥–±–æ—Ä —Ç—Ä–µ–Ω–¥–æ–≤–æ–π –º—É–∑—ã–∫–∏"""
        
        # –ü—É—Ç–∏ –∫ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–∞–º
        music_paths = {
            "trending": "viral_assets/audio/trending/",
            "dramatic": "viral_assets/audio/dramatic/",
            "upbeat": "viral_assets/audio/upbeat/"
        }
        
        music_dir = Path(music_paths.get(genre, music_paths["trending"]))
        
        # –ò—â–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã
        audio_files = list(music_dir.glob("*.mp3")) + list(music_dir.glob("*.wav"))
        
        if not audio_files:
            # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫—É—é –º—É–∑—ã–∫—É –µ—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç
            return self.create_synthetic_music(genre, duration)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–π–ª
        selected_file = random.choice(audio_files)
        
        try:
            audio_clip = AudioFileClip(str(selected_file))
            
            # –ü–æ–¥–≥–æ–Ω—è–µ–º –ø–æ–¥ –Ω—É–∂–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            if audio_clip.duration > duration:
                audio_clip = audio_clip.subclip(0, duration)
            elif audio_clip.duration < duration:
                # –ó–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º –º—É–∑—ã–∫—É
                loops_needed = int(duration / audio_clip.duration) + 1
                audio_clip = concatenate_audioclips([audio_clip] * loops_needed)
                audio_clip = audio_clip.subclip(0, duration)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
            audio_clip = audio_clip.volumex(0.7)  # 70% –≥—Ä–æ–º–∫–æ—Å—Ç–∏
            
            return audio_clip
            
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ {selected_file}: {e}")
            return self.create_synthetic_music(genre, duration)
    
    def create_synthetic_music(self, genre: str, duration: int) -> AudioClip:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–π –º—É–∑—ã–∫–∏"""
        
        def make_frame_audio(t):
            """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –∫–∞–¥—Ä"""
            
            if genre == "dramatic":
                # –î—Ä–∞–º–∞—Ç–∏—á–Ω–∞—è –º—É–∑—ã–∫–∞ - –Ω–∏–∑–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã
                return np.array([
                    0.3 * np.sin(2 * np.pi * 220 * t) + 
                    0.2 * np.sin(2 * np.pi * 110 * t) +
                    0.1 * np.sin(2 * np.pi * 440 * t * (1 + 0.1 * np.sin(t)))
                ])
            elif genre == "upbeat":
                # –ë–æ–¥—Ä–∞—è –º—É–∑—ã–∫–∞ - –≤—ã—Å–æ–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã
                return np.array([
                    0.4 * np.sin(2 * np.pi * 440 * t) +
                    0.3 * np.sin(2 * np.pi * 880 * t) +
                    0.2 * np.sin(2 * np.pi * 660 * t * (1 + 0.2 * np.sin(t * 4)))
                ])
            else:  # trending
                # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–¥–æ–≤–∞—è –º—É–∑—ã–∫–∞
                return np.array([
                    0.35 * np.sin(2 * np.pi * 330 * t) +
                    0.25 * np.sin(2 * np.pi * 220 * t) +
                    0.15 * np.sin(2 * np.pi * 550 * t * (1 + 0.15 * np.sin(t * 2)))
                ])
        
        return AudioClip(make_frame_audio, duration=duration, fps=22050)
    
    async def create_visual_effects(self, template: ContentTemplate, duration: int) -> List:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
        
        effects = []
        
        # –≠—Ñ—Ñ–µ–∫—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∏–ª—è
        viral_elements = template.visual_style.viral_elements
        
        if "zoom_effects" in viral_elements:
            # –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–∞
            zoom_times = np.linspace(0, duration, 5)  # 5 –∑—É–º–æ–≤ –∑–∞ –≤–∏–¥–µ–æ
            for zoom_time in zoom_times[1:-1]:  # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü
                effects.append({
                    "type": "zoom",
                    "start": zoom_time,
                    "duration": 0.5,
                    "intensity": 1.2
                })
        
        if "color_bursts" in viral_elements:
            # –¶–≤–µ—Ç–æ–≤—ã–µ –≤—Å–ø—ã—à–∫–∏ –¥–ª—è –¥—Ä–∞–º–∞—Ç–∏–∑–º–∞
            burst_times = np.linspace(0, duration, 8)
            for burst_time in burst_times[1:-1]:
                effects.append({
                    "type": "color_burst",
                    "start": burst_time,
                    "duration": 0.2,
                    "color": random.choice(["red", "blue", "yellow", "purple"])
                })
        
        if "shake_effects" in viral_elements:
            # –≠—Ñ—Ñ–µ–∫—Ç —Ç—Ä—è—Å–∫–∏ –¥–ª—è –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è
            shake_times = [duration * 0.3, duration * 0.7]  # –í –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–∞—Ö
            for shake_time in shake_times:
                effects.append({
                    "type": "shake",
                    "start": shake_time,
                    "duration": 0.3,
                    "intensity": 5
                })
        
        return effects
    
    async def create_transitions(self, speed: str) -> List[Dict]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —Å—Ü–µ–Ω–∞–º–∏"""
        
        transitions = []
        
        speed_settings = {
            "slow": {"duration": 1.0, "type": "fade"},
            "medium": {"duration": 0.5, "type": "crossfade"},
            "fast": {"duration": 0.2, "type": "cut"},
            "very_fast": {"duration": 0.1, "type": "jump_cut"}
        }
        
        transition_config = speed_settings.get(speed, speed_settings["medium"])
        
        transitions.append({
            "type": transition_config["type"],
            "duration": transition_config["duration"]
        })
        
        return transitions
    
    async def assemble_final_video(
        self, 
        components: Dict, 
        template: ContentTemplate, 
        video_id: str,
        quality_level: str = "ultra"
    ) -> str:
        """–°–±–æ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            background = components["background"]
            text_clips = components["text_clips"]
            music = components.get("music")
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤–∏–¥–µ–æ
            video = background
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –Ω–∞–ª–æ–∂–µ–Ω–∏—è
            for text_clip in text_clips:
                video = CompositeVideoClip([video, text_clip])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º—É–∑—ã–∫—É
            if music:
                video = video.set_audio(music)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
            quality_settings = self.get_quality_settings(quality_level)
            
            # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            output_path = f"generated_viral_content/{video_id}.mp4"
            
            # –≠–∫—Å–ø–æ—Ä—Ç —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
            video.write_videofile(
                output_path,
                fps=template.visual_style.fps,
                codec=quality_settings["codec"],
                bitrate=quality_settings["bitrate"],
                audio_bitrate=quality_settings["audio_bitrate"],
                preset=quality_settings["preset"],
                ffmpeg_params=["-crf", str(quality_settings["crf"])]
            )
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–ø—ã –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
            video.close()
            if music:
                music.close()
            
            self.logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
            return output_path
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –≤–∏–¥–µ–æ: {e}")
            raise
    
    def get_quality_settings(self, quality_level: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞—á–µ—Å—Ç–≤–∞"""
        
        settings = {
            "ultra": {
                "bitrate": "8000k",
                "codec": "libx264", 
                "preset": "slow",
                "crf": 18,
                "audio_bitrate": "320k"
            },
            "high": {
                "bitrate": "5000k",
                "codec": "libx264",
                "preset": "medium", 
                "crf": 20,
                "audio_bitrate": "256k"
            },
            "medium": {
                "bitrate": "3000k",
                "codec": "libx264",
                "preset": "fast",
                "crf": 23,
                "audio_bitrate": "192k"
            }
        }
        
        return settings.get(quality_level, settings["high"])
    
    def generate_video_metadata(
        self, 
        template: ContentTemplate, 
        script: str, 
        platform: str
    ) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–¥–µ–æ"""
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫—Ä–∏–ø—Ç–∞
        title = script[:60] + "..." if len(script) > 60 else script
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è title
        title = title.replace("–í–ù–ò–ú–ê–ù–ò–ï! ", "").replace("–°–¢–û–ü! ", "")
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        description = f"{script}\n\n"
        description += "üî• –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞!\n"
        description += "üí¨ –ü–∏—à–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö —Å–≤–æ–µ –º–Ω–µ–Ω–∏–µ!\n"
        description += "üëç –°—Ç–∞–≤—å –ª–∞–π–∫, –µ—Å–ª–∏ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à—Ç–µ–≥–∏
        hashtags = " ".join([f"#{tag}" for tag in template.trending_tags])
        description += hashtags
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
        if platform == "youtube":
            title = title[:100]  # –õ–∏–º–∏—Ç YouTube
            description = description[:5000]
        elif platform == "instagram":
            title = ""  # Instagram –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            description = description[:2200]  # –õ–∏–º–∏—Ç Instagram
        elif platform == "tiktok":
            title = title[:150]  # –õ–∏–º–∏—Ç TikTok
            description = description[:150]
        
        return {
            "title": title,
            "description": description,
            "tags": template.trending_tags,
            "category": template.category,
            "target_emotions": template.target_emotions,
            "viral_score": self.calculate_viral_score(template, script)
        }
    
    def calculate_viral_score(self, template: ContentTemplate, script: str) -> float:
        """–†–∞—Å—á–µ—Ç –≤–∏—Ä—É—Å–Ω–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞"""
        
        score = 0.0
        
        # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ —à–∞–±–ª–æ–Ω—É
        base_scores = {
            "motivation_viral": 0.8,
            "facts_viral": 0.85,
            "lifestyle_viral": 0.75,
            "money_viral": 0.9
        }
        
        score += base_scores.get(template.template_id, 0.7)
        
        # –ë–æ–Ω—É—Å—ã –∑–∞ –≤–∏—Ä—É—Å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Ç–µ–∫—Å—Ç–µ
        viral_keywords = [
            "—Å–µ–∫—Ä–µ—Ç", "—à–æ–∫", "–≤–Ω–∏–º–∞–Ω–∏–µ", "—Å—Ç–æ–ø", "–Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ",
            "99%", "–º–∏–ª–ª–∏–æ–Ω", "–±–æ–≥–∞—Ç—ã–µ", "—É—Å–ø–µ—Ö", "–∏–∑–º–µ–Ω–∏—Ç"
        ]
        
        script_lower = script.lower()
        keyword_bonus = sum(0.02 for keyword in viral_keywords if keyword in script_lower)
        score += min(keyword_bonus, 0.15)  # –ú–∞–∫—Å–∏–º—É–º 15% –±–æ–Ω—É—Å–∞
        
        # –ë–æ–Ω—É—Å –∑–∞ –¥–ª–∏–Ω—É (–æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞)
        if 20 <= len(script.split()) <= 40:
            score += 0.05
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω 0-1
        return min(1.0, max(0.0, score))


# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ
async def demo_viral_generator():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ä—É—Å–Ω–æ–≥–æ –≤–∏–¥–µ–æ"""
    
    print("üé¨ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ì–ï–ù–ï–†–ê–¢–û–†–ê –í–ò–†–£–°–ù–´–• –í–ò–î–ï–û")
    print("=" * 50)
    
    generator = ViralVideoGenerator()
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª—è—Ö
    templates_to_test = ["motivation_viral", "facts_viral", "money_viral"]
    
    for template_name in templates_to_test:
        print(f"\nüéØ –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ: {template_name}")
        
        result = await generator.create_viral_video(
            template_name=template_name,
            target_platform="youtube",
            quality_level="ultra"
        )
        
        if result["success"]:
            print(f"‚úÖ –í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ: {result['file_path']}")
            print(f"üé¨ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {result['metadata']['title']}")
            print(f"üìä –í–∏—Ä—É—Å–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª: {result['quality_score']:.1%}")
            print(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {result['duration']}—Å")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
    
    print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


if __name__ == "__main__":
    asyncio.run(demo_viral_generator())