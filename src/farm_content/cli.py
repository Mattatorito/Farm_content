"""
–û—Å–Ω–æ–≤–Ω–æ–π CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Farm Content.
"""

import asyncio
import sys
from pathlib import Path
from typing import Optional

import typer
from rich.console import Console
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.prompt import Confirm, Prompt
from rich.table import Table

from farm_content.core import (
    ProcessingMode,
    URLProcessingTask,
    get_logger,
    get_settings,
)
from farm_content.services import URLProcessorService

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
app = typer.Typer(
    name="farm-content",
    help="üî• Farm Content - –í–∏—Ä—É—Å–Ω–∞—è –ö–æ–Ω—Ç–µ–Ω—Ç-–ú–∞—à–∏–Ω–∞ 2025",
    add_completion=False,
)
console = Console()
logger = get_logger(__name__)


@app.command()
def version():
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    from farm_content import __version__

    console.print(f"üî• Farm Content v{__version__}")


@app.command()
def info():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ."""
    settings = get_settings()

    table = Table(title="üî• Farm Content - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
    table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
    table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green")

    table.add_row("–í–µ—Ä—Å–∏—è", "2025.1.0")
    table.add_row("Python", f"{sys.version.split()[0]}")
    table.add_row("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö", str(settings.data_dir))
    table.add_row("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤", str(settings.logs_dir))
    table.add_row("Host", settings.host)
    table.add_row("Port", str(settings.port))

    # API –∫–ª—é—á–∏
    services = ["openai", "youtube", "stability", "replicate"]
    for service in services:
        available = (
            "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω"
            if settings.is_service_available(service)
            else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        )
        table.add_row(f"{service.title()} API", available)

    console.print(table)


@app.command()
def process_url(
    url: str = typer.Argument(..., help="YouTube URL –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"),
    clips: int = typer.Option(3, "--clips", "-c", help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–ø–æ–≤ (1-10)"),
    duration: int = typer.Option(
        30, "--duration", "-d", help="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–ª–∏–ø–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"
    ),
    quality: str = typer.Option(
        "720p", "--quality", "-q", help="–ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ (480p, 720p, 1080p)"
    ),
    mobile: bool = typer.Option(
        True, "--mobile/--desktop", help="–ú–æ–±–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (9:16)"
    ),
    output: Optional[str] = typer.Option(
        None, "--output", "-o", help="–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
    ),
):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å YouTube URL –∏ —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–ø—ã."""

    console.print(
        Panel(
            f"üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ YouTube –≤–∏–¥–µ–æ\n"
            f"URL: {url}\n"
            f"–ö–ª–∏–ø–æ–≤: {clips}\n"
            f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}—Å\n"
            f"–ö–∞—á–µ—Å—Ç–≤–æ: {quality}",
            title="–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
            border_style="green",
        )
    )

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
    task = URLProcessingTask(
        id=f"url_{int(asyncio.get_event_loop().time())}",
        source_url=url,
        clips_count=clips,
        clip_duration=duration,
        output_quality=quality,
        mobile_format=mobile,
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    asyncio.run(_process_url_async(task, output))


async def _process_url_async(task: URLProcessingTask, output_dir: Optional[str]):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ URL."""
    processor = URLProcessorService()

    def progress_callback(progress: int, message: str):
        console.print(f"[{progress:3d}%] {message}")

    try:
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console,
        ) as progress:

            task_progress = progress.add_task("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ...", total=100)

            def update_progress(prog: int, msg: str):
                progress.update(task_progress, completed=prog, description=msg)

            result = await processor.process_url_task(task, update_progress)

        if result.status.value == "completed":
            console.print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!", style="green")

            if result.created_files:
                table = Table(title="üìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
                table.add_column("–§–∞–π–ª", style="cyan")
                table.add_column("–†–∞–∑–º–µ—Ä", style="green")

                for file_path in result.created_files:
                    if file_path.exists():
                        size = file_path.stat().st_size / (1024 * 1024)  # MB
                        table.add_row(file_path.name, f"{size:.1f} MB")

                console.print(table)
        else:
            console.print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.error_details}", style="red")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        console.print(f"‚ùå –û—à–∏–±–∫–∞: {e}", style="red")


@app.command()
def interactive():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã."""
    console.print(
        Panel(
            "üî• Farm Content - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º\n"
            "–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
            title="–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º",
            border_style="blue",
        )
    )

    while True:
        console.print("\nüìã –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:")
        console.print("1. üì∫ –ù–∞—Ä–µ–∑–∫–∞ –ø–æ URL")
        console.print("2. üî• –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤")
        console.print("3. ü§ñ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è")
        console.print("4. ‚ÑπÔ∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
        console.print("5. üö™ –í—ã—Ö–æ–¥")

        choice = Prompt.ask("–í–∞—à –≤—ã–±–æ—Ä", choices=["1", "2", "3", "4", "5"], default="1")

        if choice == "1":
            _interactive_url_processing()
        elif choice == "2":
            console.print("üî• –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!", style="yellow")
        elif choice == "3":
            console.print("ü§ñ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!", style="yellow")
        elif choice == "4":
            info()
        elif choice == "5":
            console.print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break


def _interactive_url_processing():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ URL."""
    console.print("\nüì∫ –†–µ–∂–∏–º –Ω–∞—Ä–µ–∑–∫–∏ –ø–æ URL")

    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    url = Prompt.ask("üîó –í–≤–µ–¥–∏—Ç–µ YouTube URL")
    clips = int(Prompt.ask("üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–ø–æ–≤", default="3"))
    duration = int(Prompt.ask("‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–ª–∏–ø–∞ (—Å–µ–∫)", default="30"))

    quality_choices = ["480p", "720p", "1080p"]
    quality = Prompt.ask("üìπ –ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ", choices=quality_choices, default="720p")

    mobile = Confirm.ask("üì± –ú–æ–±–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (9:16)?", default=True)

    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
    task = URLProcessingTask(
        id=f"interactive_{int(asyncio.get_event_loop().time())}",
        source_url=url,
        clips_count=clips,
        clip_duration=duration,
        output_quality=quality,
        mobile_format=mobile,
    )

    asyncio.run(_process_url_async(task, None))


@app.command()
def web():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."""
    try:
        from farm_content.interfaces.web import main as web_main

        console.print("üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
        web_main()
    except ImportError:
        console.print(
            "‚ùå –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install flask",
            style="red",
        )


@app.command()
def gui():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å GUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."""
    try:
        from farm_content.interfaces.gui import main as gui_main

        console.print("üñ•Ô∏è –ó–∞–ø—É—Å–∫ GUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
        gui_main()
    except ImportError:
        console.print(
            "‚ùå GUI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install PyQt6", style="red"
        )


@app.command()
def config():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π."""
    settings = get_settings()

    console.print("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    console.print(f"üìÇ –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {settings.config_dir / '.env'}")

    if Confirm.ask("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?"):
        info()

    if Confirm.ask("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å API –∫–ª—é—á–∏?"):
        _edit_api_keys()


def _edit_api_keys():
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–ª—é—á–µ–π."""
    console.print("üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–µ–π")

    services = {
        "openai": "OpenAI API Key",
        "youtube": "YouTube API Key",
        "stability": "Stability AI API Key",
        "replicate": "Replicate API Token",
    }

    env_file = get_settings().config_dir / ".env"

    for key, name in services.items():
        current = (
            "—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            if get_settings().is_service_available(key)
            else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        )
        console.print(f"{name}: {current}")

        if Confirm.ask(f"–ò–∑–º–µ–Ω–∏—Ç—å {name}?"):
            new_key = Prompt.ask(f"–í–≤–µ–¥–∏—Ç–µ {name}", password=True)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ .env —Ñ–∞–π–ª
            _update_env_file(env_file, f"{key.upper()}_API_KEY", new_key)

    console.print("‚úÖ API –∫–ª—é—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")


def _update_env_file(env_file: Path, key: str, value: str):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞."""
    lines = []
    key_found = False

    if env_file.exists():
        with open(env_file, "r") as f:
            lines = f.readlines()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
    for i, line in enumerate(lines):
        if line.startswith(f"{key}="):
            lines[i] = f"{key}={value}\n"
            key_found = True
            break

    if not key_found:
        lines.append(f"{key}={value}\n")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    env_file.parent.mkdir(exist_ok=True)
    with open(env_file, "w") as f:
        f.writelines(lines)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI."""
    try:
        app()
    except KeyboardInterrupt:
        console.print("\nüëã –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ CLI: {e}")
        console.print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", style="red")
        sys.exit(1)


if __name__ == "__main__":
    main()
