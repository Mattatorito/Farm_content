"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏, –æ–ø–∏—Å–∞–Ω–∏—è, —Ö–µ—à—Ç–µ–≥–∏.
"""

import random
from typing import Dict, List, Optional, Set

from farm_content.core import get_logger

logger = get_logger(__name__)


class ViralContentGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""

    def __init__(self):
        self.logger = get_logger(f"{__name__}.ViralContentGenerator")
        
        # –í–∏—Ä—É—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        self.title_patterns = {
            "high_energy": [
                "üî• –≠—Ç–æ –í–ó–û–†–í–ê–õ–û –∏–Ω—Ç–µ—Ä–Ω–µ—Ç! {}",
                "üò± –¢–´ –ù–ï –ü–û–í–ï–†–ò–®–¨ —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ {}!",
                "üöÄ –ú–ò–õ–õ–ò–û–ù–´ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∑–∞ {}!",
                "üí• –ù–ï–í–ï–†–û–Ø–¢–ù–û! {} —Å–ª–æ–º–∞–ª –≤—Å–µ —Ä–µ–∫–æ—Ä–¥—ã",
                "‚ö° {} - —ç—Ç–æ –®–ï–î–ï–í–†!",
                "üéØ {} –ø–æ–ª—É—á–∏–ª 10 –º–∏–ª–ª–∏–æ–Ω–æ–≤ –ª–∞–π–∫–æ–≤!",
                "üåü {} —Å—Ç–∞–ª –í–ò–†–£–°–ù–´–ú –∑–∞ —á–∞—Å!",
                "üîä –ì–†–û–ú–ö–û! {} —É—Å–ª—ã—à–∞–ª –≤–µ—Å—å –º–∏—Ä",
            ],
            "emotional": [
                "üíî {} –∑–∞—Å—Ç–∞–≤–∏–ª –º–µ–Ω—è –ø–ª–∞–∫–∞—Ç—å",
                "‚ù§Ô∏è {} —Ç—Ä–æ–Ω—É–ª —Å–µ—Ä–¥—Ü–∞ –º–∏–ª–ª–∏–æ–Ω–æ–≤",
                "üò≠ –ü–æ—Å–ª–µ {} —è –Ω–µ –º–æ–≥ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è",
                "ü•∫ {} - —Å–∞–º–æ–µ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ –≥–æ–¥–∞",
                "üíï {} —Ä–∞—Å—Ç–æ–ø–∏–ª –º–æ–µ —Å–µ—Ä–¥—Ü–µ",
                "üòä {} –ø–æ–¥–∞—Ä–∏–ª —É–ª—ã–±–∫—É –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å",
                "üôè {} –∏–∑–º–µ–Ω–∏–ª –º–æ—é –∂–∏–∑–Ω—å",
                "‚ú® {} - —á–∏—Å—Ç–∞—è –º–∞–≥–∏—è —ç–º–æ—Ü–∏–π",
            ],
            "educational": [
                "üß† {} - –ì–ï–ù–ò–ô –æ–±—ä—è—Å–Ω–∏–ª –∑–∞ {} —Å–µ–∫—É–Ω–¥",
                "üìö {} –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏",
                "üí° –°–ï–ö–†–ï–¢ {}: –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç",
                "üéì {} - —É—Ä–æ–∫ –∫–æ—Ç–æ—Ä—ã–π –î–û–õ–ñ–ï–ù –∑–Ω–∞—Ç—å –∫–∞–∂–¥—ã–π",
                "üî¨ {} - –Ω–∞—É–∫–∞ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º",
                "üìñ {} –∑–∞ {} –º–∏–Ω—É—Ç",
                "ü§Ø {} - —Ñ–∞–∫—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –≤–∑–æ—Ä–≤—É—Ç —Ç–≤–æ–π –º–æ–∑–≥",
                "üéØ {} - –ª–∞–π—Ñ—Ö–∞–∫ –≥–æ–¥–∞",
            ],
            "mystery": [
                "‚ùì –ß–¢–û –ï–°–õ–ò {}?",
                "üîç –¢–ê–ô–ù–ê {}: —Ä–∞–∑–≥–∞–¥–∫–∞ –®–û–ö–ò–†–£–ï–¢",
                "üïµÔ∏è {} - –ø—Ä–∞–≤–¥–∞ —Å–∫—Ä—ã—Ç–∞ {}",
                "üé≠ {} - –Ω–µ —Ç–æ —á–µ–º –∫–∞–∂–µ—Ç—Å—è",
                "üåô {} –≤ {} - –ú–ò–°–¢–ò–ö–ê",
                "üîÆ {} –ø—Ä–µ–¥—Å–∫–∞–∑–∞–ª –±—É–¥—É—â–µ–µ",
                "üëª {} - –ø–∞—Ä–∞–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —è–≤–ª–µ–Ω–∏–µ",
                "üóùÔ∏è –°–ï–ö–†–ï–¢ {} —Ä–∞—Å–∫—Ä—ã—Ç",
            ]
        }
        
        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
        self.emotional_triggers = {
            "shock": ["–®–û–ö–ò–†–£–Æ–©–ò–ô", "–ù–ï–í–ï–†–û–Ø–¢–ù–´–ô", "–ë–ï–ó–£–ú–ù–´–ô", "–≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô"],
            "curiosity": ["–°–ï–ö–†–ï–¢–ù–´–ô", "–°–ö–†–´–¢–´–ô", "–ó–ê–ü–†–ï–¢–ù–´–ô", "–ù–ï–ò–ó–í–ï–°–¢–ù–´–ô"],
            "urgency": ["–°–†–û–ß–ù–û", "–ù–ï–ú–ï–î–õ–ï–ù–ù–û", "–°–ï–ô–ß–ê–°", "–ë–´–°–¢–†–û"],
            "exclusivity": ["–≠–ö–°–ö–õ–Æ–ó–ò–í", "–¢–û–õ–¨–ö–û –î–õ–Ø –í–ê–°", "–ü–ï–†–í–´–ï", "VIP"],
            "social_proof": ["–ú–ò–õ–õ–ò–û–ù–´", "–í–°–ï –°–ú–û–¢–†–Ø–¢", "–¢–†–ï–ù–î", "–í–ò–†–£–°–ù–û"]
        }
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ö–µ—à—Ç–µ–≥–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        self.hashtag_categories = {
            "viral": ["#–≤–∏—Ä—É—Å–Ω–æ–µ", "#—Ç—Ä–µ–Ω–¥", "#—Ö–∞–π–ø", "#–ø–æ–ø—É–ª—è—Ä–Ω–æ–µ", "#—Ç–æ–ø"],
            "emotions": ["#—ç–º–æ—Ü–∏–∏", "#—á—É–≤—Å—Ç–≤–∞", "#–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "#–¥—É—à–µ–≤–Ω–æ", "#—Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ"],
            "entertainment": ["#—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "#—Å–º–µ—à–Ω–æ", "#–ø—Ä–∏–∫–æ–ª", "#—é–º–æ—Ä", "#–≤–µ—Å–µ–ª—å–µ"],
            "lifestyle": ["#–∂–∏–∑–Ω—å", "#—Å—Ç–∏–ª—å", "#–º–æ—Ç–∏–≤–∞—Ü–∏—è", "#—É—Å–ø–µ—Ö", "#—Ü–µ–ª–∏"],
            "tech": ["#—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "#–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏", "#–±—É–¥—É—â–µ–µ", "#AI", "#digital"],
            "education": ["#–æ–±—É—á–µ–Ω–∏–µ", "#–∑–Ω–∞–Ω–∏—è", "#–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "#—É—á–µ–±–∞", "#—Ä–∞–∑–≤–∏—Ç–∏–µ"]
        }
        
        # –ü–ª–∞—Ç—Ñ–æ—Ä–º–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.platform_settings = {
            "tiktok": {
                "max_title_length": 150,
                "optimal_hashtags": "3-5",
                "trending_style": "casual",
                "emoji_density": "high"
            },
            "instagram": {
                "max_title_length": 125,
                "optimal_hashtags": "5-10",
                "trending_style": "aesthetic",
                "emoji_density": "medium"
            },
            "youtube_shorts": {
                "max_title_length": 100,
                "optimal_hashtags": "2-4",
                "trending_style": "clickbait",
                "emoji_density": "low"
            }
        }

    def generate_viral_metadata(
        self,
        content_analysis: Dict,
        platform: str = "tiktok",
        style: str = "auto",
        language: str = "ru"
    ) -> Dict[str, any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
        
        if style == "auto":
            style = content_analysis.get("content_type", "high_energy")
        
        platform_config = self.platform_settings.get(platform, self.platform_settings["tiktok"])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title = self._generate_title(content_analysis, style, platform_config)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        description = self._generate_description(content_analysis, style, platform)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–µ—à—Ç–µ–≥–∏
        hashtags = self._generate_hashtags(content_analysis, platform_config)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º call-to-action
        cta = self._generate_cta(style, platform)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        optimal_time = self._suggest_posting_time(content_analysis, platform)
        
        return {
            "title": title,
            "description": description,
            "hashtags": hashtags,
            "call_to_action": cta,
            "optimal_posting_time": optimal_time,
            "viral_score": content_analysis.get("viral_score", 0.5),
            "target_audience": self._identify_target_audience(content_analysis),
            "engagement_predictions": self._predict_engagement(content_analysis, platform)
        }

    def _generate_title(self, analysis: Dict, style: str, platform_config: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞."""
        try:
            # –í—ã–±–∏—Ä–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –∑–∞–≥–æ–ª–æ–≤–∫–∞
            patterns = self.title_patterns.get(style, self.title_patterns["high_energy"])
            base_pattern = random.choice(patterns)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
            keywords = self._extract_keywords_from_analysis(analysis)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω
            if "{}" in base_pattern:
                keyword = random.choice(keywords) if keywords else "—ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç"
                title = base_pattern.format(keyword)
            else:
                title = base_pattern
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
            title = self._enhance_with_triggers(title, analysis)
            
            # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            max_length = platform_config.get("max_title_length", 150)
            if len(title) > max_length:
                title = title[:max_length-3] + "..."
            
            return title
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")
            return "üî• –ù–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç!"

    def _generate_description(self, analysis: Dict, style: str, platform: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
        try:
            description_parts = []
            
            # –û—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            if style == "high_energy":
                description_parts.append("–≠—Ç–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–æ—Å—Ç–æ –í–ó–†–´–í–ê–ï–¢! üî•")
                if analysis.get("energy_analysis", {}).get("overall_energy", 0) > 0.7:
                    description_parts.append("–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ –∑–∞—à–∫–∞–ª–∏–≤–∞–µ—Ç!")
            elif style == "emotional":
                description_parts.append("–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ —Å–∞–ª—Ñ–µ—Ç–∫–∏... üò≠üíï")
            elif style == "educational":
                description_parts.append("–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç! üß†üìö")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞
            duration = analysis.get("duration", 0)
            if duration > 0:
                description_parts.append(f"‚è±Ô∏è {int(duration)} —Å–µ–∫—É–Ω–¥ —á–∏—Å—Ç–æ–≥–æ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è")
            
            # –í–∏—Ä—É—Å–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª
            viral_score = analysis.get("viral_score", 0)
            if viral_score > 0.7:
                description_parts.append("üöÄ –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å—Ç–∞–Ω–µ—Ç –≤–∏—Ä—É—Å–Ω—ã–º!")
            
            # –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
            if platform == "tiktok":
                description_parts.append("\n\n‚ù§Ô∏è –õ–∞–π–∫ –µ—Å–ª–∏ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!")
                description_parts.append("üì§ –ü–æ–¥–µ–ª–∏—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!")
                description_parts.append("üí¨ –ü–∏—à–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö —á—Ç–æ –¥—É–º–∞–µ—à—å!")
            
            return " ".join(description_parts)
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
            return "–ù–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç! –°–º–æ—Ç—Ä–∏ –¥–æ –∫–æ–Ω—Ü–∞! üî•"

    def _generate_hashtags(self, analysis: Dict, platform_config: Dict) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ö–µ—à—Ç–µ–≥–æ–≤."""
        try:
            hashtags = set()
            
            # –ë–∞–∑–æ–≤—ã–µ —Ö–µ—à—Ç–µ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content_type = analysis.get("content_type", "high_energy")
            
            if content_type == "high_energy":
                hashtags.update(random.sample(self.hashtag_categories["viral"], 2))
                hashtags.update(random.sample(self.hashtag_categories["entertainment"], 2))
            elif content_type == "emotional":
                hashtags.update(random.sample(self.hashtag_categories["emotions"], 2))
                hashtags.update(random.sample(self.hashtag_categories["lifestyle"], 1))
            elif content_type == "educational":
                hashtags.update(random.sample(self.hashtag_categories["education"], 2))
                hashtags.update(random.sample(self.hashtag_categories["tech"], 1))
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –≤–∏—Ä—É—Å–Ω—ã–µ —Ö–µ—à—Ç–µ–≥–∏
            hashtags.update(["#fyp", "#viral", "#trending"])
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≥–ª–∞—Å–Ω–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
            optimal_count = platform_config.get("optimal_hashtags", 5)
            if isinstance(optimal_count, str) and "-" in optimal_count:
                min_count, max_count = map(int, optimal_count.split("-"))
                target_count = random.randint(min_count, max_count)
            else:
                target_count = optimal_count
            
            # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω—É–∂–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
            hashtags_list = list(hashtags)
            if len(hashtags_list) > target_count:
                hashtags_list = random.sample(hashtags_list, target_count)
            
            return hashtags_list
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–µ—à—Ç–µ–≥–æ–≤: {e}")
            return ["#viral", "#trending", "#fyp"]

    def _generate_cta(self, style: str, platform: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–∑—ã–≤–∞ –∫ –¥–µ–π—Å—Ç–≤–∏—é."""
        cta_options = {
            "tiktok": [
                "‚ù§Ô∏è –õ–∞–π–∫ –µ—Å–ª–∏ —Å–æ–≥–ª–∞—Å–µ–Ω!",
                "üì§ –û—Ç–ø—Ä–∞–≤—å –¥—Ä—É–≥—É!",
                "üí¨ –¢–≤–æ–µ –º–Ω–µ–Ω–∏–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ö!",
                "üîÑ –°–æ—Ö—Ä–∞–Ω–∏ —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å!",
                "üëÄ –î–æ—Å–º–æ—Ç—Ä–∏ –¥–æ –∫–æ–Ω—Ü–∞!"
            ],
            "instagram": [
                "üíù –°–æ—Ö—Ä–∞–Ω–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                "üë• –û—Ç–º–µ—Ç—å –¥—Ä—É–∑–µ–π",
                "üí¨ –ü–æ–¥–µ–ª–∏—Å—å –º–Ω–µ–Ω–∏–µ–º",
                "‚ù§Ô∏è –î–≤–æ–π–Ω–æ–π —Ç–∞–ø –µ—Å–ª–∏ –Ω—Ä–∞–≤–∏—Ç—Å—è",
                "üì© –ü—Ä–∏—à–ª–∏ –≤ direct"
            ],
            "youtube_shorts": [
                "üëç –õ–∞–π–∫ –∏ –ø–æ–¥–ø–∏—Å–∫–∞!",
                "üîî –í–∫–ª—é—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                "üí¨ –ü–∏—à–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö",
                "üì§ –ü–æ–¥–µ–ª–∏—Å—å –≤–∏–¥–µ–æ",
                "üëÄ –°–º–æ—Ç—Ä–∏ –¥—Ä—É–≥–∏–µ –≤–∏–¥–µ–æ –Ω–∞ –∫–∞–Ω–∞–ª–µ"
            ]
        }
        
        platform_ctas = cta_options.get(platform, cta_options["tiktok"])
        return random.choice(platform_ctas)

    def _suggest_posting_time(self, analysis: Dict, platform: str) -> Dict[str, any]:
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."""
        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        optimal_times = {
            "tiktok": {
                "weekdays": ["19:00", "20:00", "21:00"],
                "weekends": ["11:00", "14:00", "19:00", "20:00"]
            },
            "instagram": {
                "weekdays": ["18:00", "19:00", "20:00"],
                "weekends": ["12:00", "13:00", "19:00"]
            },
            "youtube_shorts": {
                "weekdays": ["20:00", "21:00", "22:00"],
                "weekends": ["14:00", "15:00", "20:00"]
            }
        }
        
        content_type = analysis.get("content_type", "high_energy")
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if content_type == "educational":
            # –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ª—É—á—à–µ –∏–¥–µ—Ç –≤ –¥–Ω–µ–≤–Ω–æ–µ –≤—Ä–µ–º—è
            return {
                "recommended_times": ["12:00", "13:00", "14:00"],
                "best_days": ["Tuesday", "Wednesday", "Thursday"],
                "avoid_times": ["late_evening", "early_morning"]
            }
        elif content_type == "high_energy":
            # –≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç - –≤–µ—á–µ—Ä–Ω–µ–µ –≤—Ä–µ–º—è
            platform_times = optimal_times.get(platform, optimal_times["tiktok"])
            return {
                "recommended_times": platform_times["weekdays"],
                "best_days": ["Friday", "Saturday", "Sunday"],
                "avoid_times": ["morning", "work_hours"]
            }
        else:
            platform_times = optimal_times.get(platform, optimal_times["tiktok"])
            return {
                "recommended_times": platform_times["weekends"],
                "best_days": ["any"],
                "avoid_times": []
            }

    def _extract_keywords_from_analysis(self, analysis: Dict) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞."""
        keywords = []
        
        # –ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_type = analysis.get("content_type", "")
        if content_type == "high_energy":
            keywords.extend(["—ç–∫—à–Ω", "–¥—Ä–∞–π–≤", "—ç–Ω–µ—Ä–≥–∏—è", "–∞–¥—Ä–µ–Ω–∞–ª–∏–Ω"])
        elif content_type == "emotional":
            keywords.extend(["—ç–º–æ—Ü–∏–∏", "—á—É–≤—Å—Ç–≤–∞", "–¥—É—à–∞", "—Å–µ—Ä–¥—Ü–µ"])
        elif content_type == "educational":
            keywords.extend(["–∑–Ω–∞–Ω–∏—è", "–æ–±—É—á–µ–Ω–∏–µ", "—Ñ–∞–∫—Ç—ã", "—Å–µ–∫—Ä–µ—Ç—ã"])
        
        # –ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∏—Ä—É—Å–Ω–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞
        viral_score = analysis.get("viral_score", 0)
        if viral_score > 0.8:
            keywords.extend(["—Ö–∏—Ç", "–±–æ–º–±–∞", "—Å–µ–Ω—Å–∞—Ü–∏—è"])
        elif viral_score > 0.6:
            keywords.extend(["—Ç—Ä–µ–Ω–¥", "–ø–æ–ø—É–ª—è—Ä–Ω–æ–µ"])
        
        # –ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        duration = analysis.get("duration", 0)
        if duration < 30:
            keywords.append("–º–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–æ")
        elif duration > 60:
            keywords.append("–ø–æ–¥—Ä–æ–±–Ω–æ")
        
        return keywords if keywords else ["–∫–æ–Ω—Ç–µ–Ω—Ç", "–≤–∏–¥–µ–æ", "—Ä–æ–ª–∏–∫"]

    def _enhance_with_triggers(self, title: str, analysis: Dict) -> str:
        """–£—Å–∏–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏."""
        try:
            viral_score = analysis.get("viral_score", 0)
            
            # –í—ã–±–∏—Ä–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∏—Ä—É—Å–Ω–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞
            if viral_score > 0.8:
                trigger_category = random.choice(["shock", "exclusivity"])
            elif viral_score > 0.6:
                trigger_category = random.choice(["curiosity", "social_proof"])
            else:
                trigger_category = "urgency"
            
            triggers = self.emotional_triggers.get(trigger_category, [])
            if triggers and random.random() > 0.3:  # 70% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                trigger = random.choice(triggers)
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –≤ –Ω–∞—á–∞–ª–æ –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ–º —á–∞—Å—Ç—å
                if "–ù–ï–í–ï–†–û–Ø–¢–ù–´–ô" not in title and "–®–û–ö–ò–†–£–Æ–©–ò–ô" not in title:
                    title = f"{trigger} {title}"
            
            return title
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: {e}")
            return title

    def _identify_target_audience(self, analysis: Dict) -> Dict[str, any]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏."""
        content_type = analysis.get("content_type", "high_energy")
        
        audiences = {
            "high_energy": {
                "age_range": "16-35",
                "interests": ["entertainment", "sports", "gaming", "music"],
                "behavior": "active_users",
                "engagement_style": "quick_consumption"
            },
            "emotional": {
                "age_range": "20-45",
                "interests": ["relationships", "family", "personal_growth"],
                "behavior": "thoughtful_viewers",
                "engagement_style": "deep_engagement"
            },
            "educational": {
                "age_range": "18-50",
                "interests": ["learning", "career", "technology", "science"],
                "behavior": "knowledge_seekers",
                "engagement_style": "careful_viewing"
            }
        }
        
        return audiences.get(content_type, audiences["high_energy"])

    def _predict_engagement(self, analysis: Dict, platform: str) -> Dict[str, any]:
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏."""
        viral_score = analysis.get("viral_score", 0.5)
        content_type = analysis.get("content_type", "high_energy")
        
        # –ë–∞–∑–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º
        platform_multipliers = {
            "tiktok": {"views": 1.5, "likes": 0.08, "shares": 0.03, "comments": 0.02},
            "instagram": {"views": 1.0, "likes": 0.06, "shares": 0.02, "comments": 0.015},
            "youtube_shorts": {"views": 1.2, "likes": 0.04, "shares": 0.01, "comments": 0.01}
        }
        
        multipliers = platform_multipliers.get(platform, platform_multipliers["tiktok"])
        
        # –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (–æ—Ç 1K –¥–æ 1M)
        base_views = int(1000 * (viral_score ** 2) * random.uniform(0.5, 2.0) * 100)
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_multipliers = {
            "high_energy": 1.3,
            "emotional": 1.1,
            "educational": 0.9
        }
        
        content_mult = content_multipliers.get(content_type, 1.0)
        predicted_views = int(base_views * content_mult * multipliers["views"])
        
        return {
            "predicted_views": predicted_views,
            "predicted_likes": int(predicted_views * multipliers["likes"]),
            "predicted_shares": int(predicted_views * multipliers["shares"]),
            "predicted_comments": int(predicted_views * multipliers["comments"]),
            "confidence": viral_score,
            "timeframe": "24_hours"
        }