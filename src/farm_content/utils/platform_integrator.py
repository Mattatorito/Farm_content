"""
üåê –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –ü–õ–ê–¢–§–û–†–ú–ê–ú–ò
===========================

–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
—á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ API —Å –ø–æ–ª–Ω—ã–º —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º –ª–∏–º–∏—Ç–æ–≤ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π.

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:
- YouTube (Data API v3 + Shorts)
- Instagram (Graph API + Reels) 
- TikTok (Content Posting API)
- VK (Video API)
- Telegram (Bot API)
"""

import asyncio
import json
import aiohttp
import logging
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, field
import base64
import hashlib
import hmac
import time
import os


@dataclass 
class PlatformCredentials:
    """–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
    platform: str
    account_id: str
    client_id: str = ""
    client_secret: str = ""
    access_token: str = ""
    refresh_token: str = ""
    api_key: str = ""
    expires_at: datetime = None
    additional_params: Dict = field(default_factory=dict)


@dataclass
class PublicationRequest:
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é"""
    platform: str
    account_id: str
    video_path: str
    title: str
    description: str
    tags: List[str] = field(default_factory=list)
    thumbnail_path: str = ""
    privacy_status: str = "public"  # public, unlisted, private
    scheduled_time: datetime = None
    additional_options: Dict = field(default_factory=dict)


@dataclass
class PublicationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    success: bool
    platform: str
    account_id: str
    video_id: str = ""
    video_url: str = ""
    error_message: str = ""
    published_at: datetime = None
    metadata: Dict = field(default_factory=dict)


class PlatformIntegrator:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏"""
    
    def __init__(self, credentials: PlatformCredentials):
        self.credentials = credentials
        self.logger = logging.getLogger(f"PlatformIntegrator_{credentials.platform}")
        self.session = None
        self.rate_limiter = {}  # –î–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ª–∏–º–∏—Ç–æ–≤ API
    
    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    async def publish_video(self, request: PublicationRequest) -> PublicationResult:
        """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ"""
        raise NotImplementedError
    
    async def check_rate_limit(self, endpoint: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ API"""
        current_time = time.time()
        
        if endpoint not in self.rate_limiter:
            self.rate_limiter[endpoint] = []
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
        self.rate_limiter[endpoint] = [
            req_time for req_time in self.rate_limiter[endpoint]
            if current_time - req_time < 3600
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å)
        if len(self.rate_limiter[endpoint]) >= 100:
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        self.rate_limiter[endpoint].append(current_time)
        return True


class YouTubeIntegrator(PlatformIntegrator):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –¥–ª—è YouTube"""
    
    def __init__(self, credentials: PlatformCredentials):
        super().__init__(credentials)
        self.api_base = "https://www.googleapis.com/youtube/v3"
        self.upload_base = "https://www.googleapis.com/upload/youtube/v3"
    
    async def publish_video(self, request: PublicationRequest) -> PublicationResult:
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤–∏–¥–µ–æ –Ω–∞ YouTube"""
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã API
            if not await self.check_rate_limit("videos.insert"):
                return PublicationResult(
                    success=False,
                    platform="youtube",
                    account_id=request.account_id,
                    error_message="–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç API –∑–∞–ø—Ä–æ—Å–æ–≤"
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
            await self.refresh_access_token_if_needed()
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
            video_metadata = {
                "snippet": {
                    "title": request.title[:100],  # –õ–∏–º–∏—Ç YouTube
                    "description": request.description[:5000],  # –õ–∏–º–∏—Ç YouTube
                    "tags": request.tags[:500],  # –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–≥–∞—Ö
                    "categoryId": "22",  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–õ—é–¥–∏ –∏ –±–ª–æ–≥–∏"
                    "defaultLanguage": "ru",
                    "defaultAudioLanguage": "ru"
                },
                "status": {
                    "privacyStatus": request.privacy_status,
                    "embeddable": True,
                    "license": "youtube",
                    "publicStatsViewable": True
                }
            }
            
            # –ï—Å–ª–∏ —ç—Ç–æ Shorts (–≤–∏–¥–µ–æ < 60 —Å–µ–∫), –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if self.is_shorts_video(request.video_path):
                video_metadata["snippet"]["title"] = "#Shorts " + video_metadata["snippet"]["title"]
            
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            if request.scheduled_time:
                video_metadata["status"]["publishAt"] = request.scheduled_time.strftime("%Y-%m-%dT%H:%M:%S.000Z")
                video_metadata["status"]["privacyStatus"] = "private"  # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
            upload_result = await self.upload_video_file(request.video_path, video_metadata)
            
            if not upload_result["success"]:
                return PublicationResult(
                    success=False,
                    platform="youtube", 
                    account_id=request.account_id,
                    error_message=upload_result["error"]
                )
            
            video_id = upload_result["video_id"]
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—É –µ—Å–ª–∏ –µ—Å—Ç—å
            if request.thumbnail_path and os.path.exists(request.thumbnail_path):
                await self.upload_thumbnail(video_id, request.thumbnail_path)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            video_url = f"https://www.youtube.com/watch?v={video_id}"
            if self.is_shorts_video(request.video_path):
                video_url = f"https://www.youtube.com/shorts/{video_id}"
            
            return PublicationResult(
                success=True,
                platform="youtube",
                account_id=request.account_id,
                video_id=video_id,
                video_url=video_url,
                published_at=datetime.now(),
                metadata={
                    "is_shorts": self.is_shorts_video(request.video_path),
                    "duration": upload_result.get("duration", 0),
                    "file_size": upload_result.get("file_size", 0)
                }
            )
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ YouTube: {e}")
            return PublicationResult(
                success=False,
                platform="youtube",
                account_id=request.account_id, 
                error_message=str(e)
            )
    
    async def upload_video_file(self, video_path: str, metadata: Dict) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤–∏–¥–µ–æ"""
        
        try:
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            with open(video_path, 'rb') as video_file:
                video_data = video_file.read()
            
            # –°–æ–∑–¥–∞–µ–º resumable upload session
            headers = {
                'Authorization': f'Bearer {self.credentials.access_token}',
                'Content-Type': 'application/json',
                'X-Upload-Content-Type': 'video/*',
                'X-Upload-Content-Length': str(len(video_data))
            }
            
            # –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            init_url = f"{self.upload_base}/videos?uploadType=resumable&part=snippet,status"
            
            async with self.session.post(init_url, headers=headers, json=metadata) as response:
                if response.status != 200:
                    error_data = await response.text()
                    return {"success": False, "error": f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏: {error_data}"}
                
                upload_url = response.headers.get('Location')
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            upload_headers = {
                'Authorization': f'Bearer {self.credentials.access_token}',
                'Content-Type': 'video/*'
            }
            
            async with self.session.put(upload_url, headers=upload_headers, data=video_data) as response:
                if response.status not in [200, 201]:
                    error_data = await response.text()
                    return {"success": False, "error": f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {error_data}"}
                
                result_data = await response.json()
                video_id = result_data.get('id')
                
                return {
                    "success": True,
                    "video_id": video_id,
                    "duration": self.get_video_duration(video_path),
                    "file_size": len(video_data)
                }
        
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    async def upload_thumbnail(self, video_id: str, thumbnail_path: str):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–∏–Ω–∏–∞—Ç—é—Ä—ã"""
        
        try:
            with open(thumbnail_path, 'rb') as thumb_file:
                thumb_data = thumb_file.read()
            
            url = f"{self.upload_base}/thumbnails/set?videoId={video_id}"
            headers = {
                'Authorization': f'Bearer {self.credentials.access_token}',
                'Content-Type': 'image/jpeg'
            }
            
            async with self.session.post(url, headers=headers, data=thumb_data) as response:
                if response.status == 200:
                    self.logger.info(f"–ú–∏–Ω–∏–∞—Ç—é—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –¥–ª—è –≤–∏–¥–µ–æ {video_id}")
                else:
                    error_data = await response.text()
                    self.logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∏–Ω–∏–∞—Ç—é—Ä—ã: {error_data}")
        
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∏–Ω–∏–∞—Ç—é—Ä—ã: {e}")
    
    def is_shorts_video(self, video_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–∏–¥–µ–æ Shorts (< 60 —Å–µ–∫)"""
        duration = self.get_video_duration(video_path)
        return duration <= 60
    
    def get_video_duration(self, video_path: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ"""
        try:
            from moviepy.editor import VideoFileClip
            with VideoFileClip(video_path) as clip:
                return clip.duration
        except:
            return 0
    
    async def refresh_access_token_if_needed(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        
        if self.credentials.expires_at and datetime.now() >= self.credentials.expires_at:
            await self.refresh_access_token()
    
    async def refresh_access_token(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞"""
        
        try:
            refresh_url = "https://oauth2.googleapis.com/token"
            data = {
                'client_id': self.credentials.client_id,
                'client_secret': self.credentials.client_secret,
                'refresh_token': self.credentials.refresh_token,
                'grant_type': 'refresh_token'
            }
            
            async with self.session.post(refresh_url, data=data) as response:
                if response.status == 200:
                    result = await response.json()
                    self.credentials.access_token = result['access_token']
                    
                    expires_in = result.get('expires_in', 3600)
                    self.credentials.expires_at = datetime.now() + timedelta(seconds=expires_in)
                    
                    self.logger.info("–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ YouTube –æ–±–Ω–æ–≤–ª–µ–Ω")
                else:
                    error_data = await response.text()
                    self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {error_data}")
        
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")


class InstagramIntegrator(PlatformIntegrator):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –¥–ª—è Instagram"""
    
    def __init__(self, credentials: PlatformCredentials):
        super().__init__(credentials)
        self.api_base = "https://graph.instagram.com"
    
    async def publish_video(self, request: PublicationRequest) -> PublicationResult:
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è Reels –Ω–∞ Instagram"""
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            if not await self.check_rate_limit("media"):
                return PublicationResult(
                    success=False,
                    platform="instagram",
                    account_id=request.account_id,
                    error_message="–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç API –∑–∞–ø—Ä–æ—Å–æ–≤"
                )
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –∏ –ø–æ–ª—É—á–∞–µ–º media_id
            media_id = await self.upload_video_media(request.video_path, request.description)
            
            if not media_id:
                return PublicationResult(
                    success=False,
                    platform="instagram",
                    account_id=request.account_id,
                    error_message="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ"
                )
            
            # –ü—É–±–ª–∏–∫—É–µ–º media
            publish_result = await self.publish_media(media_id)
            
            if not publish_result["success"]:
                return PublicationResult(
                    success=False,
                    platform="instagram",
                    account_id=request.account_id,
                    error_message=publish_result["error"]
                )
            
            return PublicationResult(
                success=True,
                platform="instagram", 
                account_id=request.account_id,
                video_id=publish_result["media_id"],
                video_url=publish_result["permalink"],
                published_at=datetime.now(),
                metadata={
                    "media_type": "REEL",
                    "caption": request.description[:2200]  # –õ–∏–º–∏—Ç Instagram
                }
            )
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Instagram: {e}")
            return PublicationResult(
                success=False,
                platform="instagram",
                account_id=request.account_id,
                error_message=str(e)
            )
    
    async def upload_video_media(self, video_path: str, caption: str) -> Optional[str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –∫–∞–∫ media object"""
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ö–æ—Å—Ç–∏–Ω–≥
            video_url = await self.upload_to_temp_hosting(video_path)
            
            if not video_url:
                return None
            
            # –°–æ–∑–¥–∞–µ–º media container
            url = f"{self.api_base}/v17.0/{self.credentials.account_id}/media"
            
            params = {
                'media_type': 'REELS',
                'video_url': video_url,
                'caption': caption[:2200],  # –õ–∏–º–∏—Ç Instagram
                'access_token': self.credentials.access_token
            }
            
            async with self.session.post(url, data=params) as response:
                if response.status == 200:
                    result = await response.json()
                    return result.get('id')
                else:
                    error_data = await response.text()
                    self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è media: {error_data}")
                    return None
        
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –≤ Instagram: {e}")
            return None
    
    async def upload_to_temp_hosting(self, video_path: str) -> Optional[str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ö–æ—Å—Ç–∏–Ω–≥ (—Å–∏–º—É–ª—è—Ü–∏—è)"""
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        # –î–ª—è –¥–µ–º–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        self.logger.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º {video_path} –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ö–æ—Å—Ç–∏–Ω–≥...")
        
        # –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        await asyncio.sleep(2)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π URL (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–π URL)
        import uuid
        fake_id = str(uuid.uuid4())
        return f"https://temp-hosting.example.com/videos/{fake_id}.mp4"
    
    async def publish_media(self, media_id: str) -> Dict:
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ media"""
        
        try:
            url = f"{self.api_base}/v17.0/{self.credentials.account_id}/media_publish"
            
            params = {
                'creation_id': media_id,
                'access_token': self.credentials.access_token
            }
            
            async with self.session.post(url, data=params) as response:
                if response.status == 200:
                    result = await response.json()
                    
                    # –ü–æ–ª—É—á–∞–µ–º permalink
                    permalink = await self.get_media_permalink(result['id'])
                    
                    return {
                        "success": True,
                        "media_id": result['id'],
                        "permalink": permalink
                    }
                else:
                    error_data = await response.text()
                    return {"success": False, "error": error_data}
        
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    async def get_media_permalink(self, media_id: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å—Ç"""
        
        try:
            url = f"{self.api_base}/v17.0/{media_id}"
            params = {
                'fields': 'permalink',
                'access_token': self.credentials.access_token
            }
            
            async with self.session.get(url, params=params) as response:
                if response.status == 200:
                    result = await response.json()
                    return result.get('permalink', '')
        except:
            pass
        
        return f"https://www.instagram.com/p/{media_id}/"


class TikTokIntegrator(PlatformIntegrator):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –¥–ª—è TikTok"""
    
    def __init__(self, credentials: PlatformCredentials):
        super().__init__(credentials)
        self.api_base = "https://open-api.tiktok.com"
    
    async def publish_video(self, request: PublicationRequest) -> PublicationResult:
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤–∏–¥–µ–æ –≤ TikTok"""
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            if not await self.check_rate_limit("video.upload"):
                return PublicationResult(
                    success=False,
                    platform="tiktok", 
                    account_id=request.account_id,
                    error_message="–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç API –∑–∞–ø—Ä–æ—Å–æ–≤"
                )
            
            # TikTok API —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤
            timestamp = str(int(time.time()))
            signature = self.generate_signature(timestamp)
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
            upload_url = await self.create_upload_session(signature, timestamp)
            
            if not upload_url:
                return PublicationResult(
                    success=False,
                    platform="tiktok",
                    account_id=request.account_id,
                    error_message="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏"
                )
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
            video_id = await self.upload_video_content(upload_url, request.video_path)
            
            if not video_id:
                return PublicationResult(
                    success=False,
                    platform="tiktok",
                    account_id=request.account_id, 
                    error_message="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ"
                )
            
            # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç
            post_result = await self.create_video_post(
                video_id, 
                request.title + " " + request.description,  # TikTok –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
                signature,
                timestamp
            )
            
            if not post_result["success"]:
                return PublicationResult(
                    success=False,
                    platform="tiktok",
                    account_id=request.account_id,
                    error_message=post_result["error"]
                )
            
            return PublicationResult(
                success=True,
                platform="tiktok",
                account_id=request.account_id,
                video_id=post_result["share_id"],
                video_url=post_result["share_url"],
                published_at=datetime.now(),
                metadata={
                    "privacy_level": "SELF_ONLY" if request.privacy_status == "private" else "PUBLIC_TO_EVERYONE"
                }
            )
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ TikTok: {e}")
            return PublicationResult(
                success=False,
                platform="tiktok",
                account_id=request.account_id,
                error_message=str(e)
            )
    
    def generate_signature(self, timestamp: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è TikTok API"""
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å –Ω–∞ –æ—Å–Ω–æ–≤–µ client_secret –∏ timestamp
        message = f"{self.credentials.client_id}{timestamp}"
        signature = hmac.new(
            self.credentials.client_secret.encode(),
            message.encode(),
            hashlib.sha256
        ).hexdigest()
        
        return signature
    
    async def create_upload_session(self, signature: str, timestamp: str) -> Optional[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ"""
        
        try:
            url = f"{self.api_base}/v2/post/publish/video/init/"
            
            headers = {
                'Authorization': f'Bearer {self.credentials.access_token}',
                'Content-Type': 'application/json'
            }
            
            data = {
                'post_info': {
                    'title': 'Temp Upload',  # –í—Ä–µ–º–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    'privacy_level': 'PUBLIC_TO_EVERYONE',
                    'disable_duet': False,
                    'disable_comment': False,
                    'disable_stitch': False,
                    'video_cover_timestamp_ms': 1000
                },
                'source_info': {
                    'source': 'FILE_UPLOAD',
                    'video_size': os.path.getsize('temp_video_path'),  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–∏–º –∏–∑ request
                    'chunk_size': 10485760,  # 10MB chunks
                    'total_chunk_count': 1
                }
            }
            
            async with self.session.post(url, headers=headers, json=data) as response:
                if response.status == 200:
                    result = await response.json()
                    if result.get('data', {}).get('publish_id'):
                        return result['data']['upload_url']
                
                error_data = await response.text()
                self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ TikTok: {error_data}")
                return None
        
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return None
    
    async def upload_video_content(self, upload_url: str, video_path: str) -> Optional[str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤–∏–¥–µ–æ"""
        
        try:
            with open(video_path, 'rb') as video_file:
                video_data = video_file.read()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –ø–æ —á–∞—Å—Ç—è–º
            headers = {
                'Content-Type': 'video/mp4',
                'Content-Range': f'bytes 0-{len(video_data)-1}/{len(video_data)}'
            }
            
            async with self.session.put(upload_url, headers=headers, data=video_data) as response:
                if response.status in [200, 201, 204]:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –∏–∑ URL –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π
                    import uuid
                    return str(uuid.uuid4())
                else:
                    error_data = await response.text()
                    self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ TikTok: {error_data}")
                    return None
        
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: {e}")
            return None
    
    async def create_video_post(
        self, 
        video_id: str, 
        caption: str, 
        signature: str, 
        timestamp: str
    ) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å –≤–∏–¥–µ–æ"""
        
        try:
            url = f"{self.api_base}/v2/post/publish/video/commit/"
            
            headers = {
                'Authorization': f'Bearer {self.credentials.access_token}',
                'Content-Type': 'application/json'
            }
            
            data = {
                'post_id': video_id,
                'post_info': {
                    'title': caption[:150],  # –õ–∏–º–∏—Ç TikTok
                    'privacy_level': 'PUBLIC_TO_EVERYONE',
                    'disable_duet': False,
                    'disable_comment': False,
                    'disable_stitch': False
                }
            }
            
            async with self.session.post(url, headers=headers, json=data) as response:
                if response.status == 200:
                    result = await response.json()
                    return {
                        "success": True,
                        "share_id": result.get('data', {}).get('share_id', video_id),
                        "share_url": f"https://www.tiktok.com/@username/video/{video_id}"
                    }
                else:
                    error_data = await response.text()
                    return {"success": False, "error": error_data}
        
        except Exception as e:
            return {"success": False, "error": str(e)}


class PlatformPublisher:
    """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—É–±–ª–∏–∫–∞—Ü–∏–π –Ω–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö"""
    
    def __init__(self, config_path: str = "config/platform_credentials.json"):
        self.logger = logging.getLogger("PlatformPublisher")
        self.config_path = Path(config_path)
        self.credentials_db = self.load_credentials()
        self.integrators = {}
    
    def load_credentials(self) -> Dict[str, PlatformCredentials]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        
        if not self.config_path.exists():
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            example_config = {
                "youtube_account_1": {
                    "platform": "youtube",
                    "account_id": "your_youtube_channel_id",
                    "client_id": "your_youtube_client_id.googleusercontent.com", 
                    "client_secret": "your_youtube_client_secret",
                    "access_token": "your_access_token",
                    "refresh_token": "your_refresh_token"
                },
                "instagram_account_1": {
                    "platform": "instagram",
                    "account_id": "your_instagram_account_id",
                    "access_token": "your_instagram_access_token"
                },
                "tiktok_account_1": {
                    "platform": "tiktok",
                    "account_id": "your_tiktok_account_id",
                    "client_id": "your_tiktok_client_key",
                    "client_secret": "your_tiktok_client_secret",
                    "access_token": "your_tiktok_access_token"
                }
            }
            
            self.config_path.parent.mkdir(parents=True, exist_ok=True)
            with open(self.config_path, 'w', encoding='utf-8') as f:
                json.dump(example_config, f, ensure_ascii=False, indent=2)
            
            self.logger.info(f"–°–æ–∑–¥–∞–Ω –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {self.config_path}")
            return {}
        
        try:
            with open(self.config_path, 'r', encoding='utf-8') as f:
                config_data = json.load(f)
            
            credentials_db = {}
            for account_name, account_data in config_data.items():
                credentials_db[account_name] = PlatformCredentials(**account_data)
            
            return credentials_db
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {}
    
    async def get_integrator(self, account_name: str) -> Optional[PlatformIntegrator]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        
        if account_name in self.integrators:
            return self.integrators[account_name]
        
        if account_name not in self.credentials_db:
            self.logger.error(f"–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {account_name}")
            return None
        
        credentials = self.credentials_db[account_name]
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä
        if credentials.platform == "youtube":
            integrator = YouTubeIntegrator(credentials)
        elif credentials.platform == "instagram":
            integrator = InstagramIntegrator(credentials)
        elif credentials.platform == "tiktok":
            integrator = TikTokIntegrator(credentials)
        else:
            self.logger.error(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {credentials.platform}")
            return None
        
        # –ö—ç—à–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä
        self.integrators[account_name] = integrator
        
        return integrator
    
    async def publish_content(
        self, 
        account_name: str, 
        request: PublicationRequest
    ) -> PublicationResult:
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ"""
        
        integrator = await self.get_integrator(account_name)
        if not integrator:
            return PublicationResult(
                success=False,
                platform="unknown",
                account_id=account_name,
                error_message="–ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        async with integrator:
            result = await integrator.publish_video(request)
            return result
    
    async def batch_publish(
        self, 
        publications: List[tuple]  # [(account_name, PublicationRequest), ...]
    ) -> List[PublicationResult]:
        """–ü–∞–∫–µ—Ç–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        
        tasks = []
        
        for account_name, request in publications:
            task = self.publish_content(account_name, request)
            tasks.append(task)
        
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        processed_results = []
        for i, result in enumerate(results):
            if isinstance(result, Exception):
                account_name, request = publications[i]
                processed_results.append(
                    PublicationResult(
                        success=False,
                        platform=request.platform,
                        account_id=account_name,
                        error_message=str(result)
                    )
                )
            else:
                processed_results.append(result)
        
        return processed_results


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def demo_platform_integration():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏"""
    
    print("üåê –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° –ü–õ–ê–¢–§–û–†–ú–ê–ú–ò")
    print("=" * 50)
    
    publisher = PlatformPublisher()
    
    # –ü—Ä–∏–º–µ—Ä –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ YouTube
    youtube_request = PublicationRequest(
        platform="youtube",
        account_id="youtube_account_1",
        video_path="/path/to/viral_video.mp4",
        title="üî• –ù–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–π AI-–∫–æ–Ω—Ç–µ–Ω—Ç!",
        description="–≠—Ç–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º!\n\n#AI #Shorts #Viral",
        tags=["AI", "viral", "shorts", "content", "artificial intelligence"],
        privacy_status="public"
    )
    
    # –ü—Ä–∏–º–µ—Ä –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Instagram  
    instagram_request = PublicationRequest(
        platform="instagram",
        account_id="instagram_account_1", 
        video_path="/path/to/trend_reel.mp4",
        title="",  # Instagram –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        description="üé¨ –¢—Ä–µ–Ω–¥–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Å–∞–º–æ–µ –≥–æ—Ä—è—á–µ–µ –≤—Ä–µ–º—è!\n\n#trending #reels #viral #content",
        privacy_status="public"
    )
    
    # –ü—Ä–∏–º–µ—Ä –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ TikTok
    tiktok_request = PublicationRequest(
        platform="tiktok",
        account_id="tiktok_account_1",
        video_path="/path/to/movie_clip.mp4", 
        title="üé≠ –õ—É—á—à–∏–µ –º–æ–º–µ–Ω—Ç—ã –∏–∑ —Ñ–∏–ª—å–º–æ–≤",
        description="–ü–æ–¥–±–æ—Ä–∫–∞ —Å–∞–º—ã—Ö —ç–ø–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω! #movies #clips #cinema #epic",
        privacy_status="public"
    )
    
    # –ü–∞–∫–µ—Ç–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
    publications = [
        ("youtube_account_1", youtube_request),
        ("instagram_account_1", instagram_request),
        ("tiktok_account_1", tiktok_request)
    ]
    
    print("üì§ –ù–∞—á–∏–Ω–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    results = await publisher.batch_publish(publications)
    
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–£–ë–õ–ò–ö–ê–¶–ò–ô:")
    for result in results:
        status = "‚úÖ –£—Å–ø–µ—à–Ω–æ" if result.success else "‚ùå –û—à–∏–±–∫–∞"
        print(f"\n{status} | {result.platform.upper()}")
        
        if result.success:
            print(f"   üÜî ID: {result.video_id}")
            print(f"   üîó –°—Å—ã–ª–∫–∞: {result.video_url}")
            print(f"   üìÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {result.published_at}")
        else:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞: {result.error_message}")
    
    print("\nüéØ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


if __name__ == "__main__":
    asyncio.run(demo_platform_integration())