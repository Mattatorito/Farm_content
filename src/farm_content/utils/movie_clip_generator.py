"""
üé¨ –ú–û–î–£–õ–¨ –ù–ê–†–ï–ó–ö–ò –§–ò–õ–¨–ú–û–í –ò –°–ï–†–ò–ê–õ–û–í
====================================

–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ä—É—Å–Ω—ã—Ö –∫–ª–∏–ø–æ–≤ –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤.
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ª–∏–ø–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–∏–¥–µ–æ.

–ü—Ä–∏–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞:
- –î—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ü–µ–Ω—ã –∏–∑ —Ñ–∏–ª—å–º–æ–≤
- –≠–ø–∏—á–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏–∑ —Å–µ—Ä–∏–∞–ª–æ–≤  
- –°–º–µ—à–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –∏ —Å–∏—Ç—É–∞—Ü–∏–∏
- –≠–∫—à–Ω-—Å—Ü–µ–Ω—ã –∏ –ø–æ–≥–æ–Ω–∏
"""

import asyncio
import json
import random
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
import logging

try:
    import moviepy.editor as mp
    from moviepy.video.fx import resize
    MOVIEPY_AVAILABLE = True
except ImportError:
    MOVIEPY_AVAILABLE = False


@dataclass
class MovieScene:
    """–°—Ü–µ–Ω–∞ –∏–∑ —Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞"""
    title: str
    start_time: float
    end_time: float
    emotion: str  # "drama", "action", "comedy", "suspense"
    intensity: float  # 0.0 - 1.0
    description: str
    dialogue: Optional[str] = None


@dataclass
class MovieSource:
    """–ò—Å—Ç–æ—á–Ω–∏–∫ —Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞"""
    title: str
    file_path: str
    year: int
    genre: str
    rating: float
    scenes: List[MovieScene]
    metadata: Dict


class MovieClipGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–ª–∏–ø–æ–≤ –∏–∑ —Ñ–∏–ª—å–º–æ–≤"""
    
    def __init__(self):
        self.logger = logging.getLogger("MovieClipGenerator")
        
        # –ë–∞–∑–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤
        self.movie_database = self.load_movie_database()
        
        # –®–∞–±–ª–æ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç–º–æ—Ü–∏–π
        self.emotion_templates = {
            "drama": {
                "effects": ["dramatic_zoom", "slow_motion", "emotional_filter"],
                "music": ["sad_piano", "epic_orchestral"],
                "text_style": "dramatic",
                "hashtags": ["#–¥—Ä–∞–º–∞", "#—ç–º–æ—Ü–∏–∏", "#—Å–ª–µ–∑—ã", "#–≥—Ä—É—Å—Ç—å"]
            },
            "action": {
                "effects": ["fast_cuts", "motion_blur", "impact_frames"],
                "music": ["epic_action", "adrenaline_rush"],
                "text_style": "bold",
                "hashtags": ["#—ç–∫—à–Ω", "#–∞–¥—Ä–µ–Ω–∞–ª–∏–Ω", "#—ç–ø–∏—á–Ω–æ", "#–∫—Ä—É—Ç—è–∫"]
            },
            "comedy": {
                "effects": ["bounce", "cartoon_zoom", "funny_filter"],
                "music": ["upbeat_comedy", "silly_music"],
                "text_style": "playful",
                "hashtags": ["#—Å–º–µ—à–Ω–æ", "#—é–º–æ—Ä", "#–ø—Ä–∏–∫–æ–ª", "#—Ä–∂–∞–∫–∞"]
            },
            "suspense": {
                "effects": ["tension_build", "dark_filter", "glitch"],
                "music": ["thriller_music", "suspense_sound"],
                "text_style": "mysterious",
                "hashtags": ["#–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ", "#—Ç—Ä–∏–ª–ª–µ—Ä", "#–º–∏—Å—Ç–∏–∫–∞", "#—Å—Ç—Ä–∞—à–Ω–æ"]
            }
        }
    
    def load_movie_database(self) -> List[MovieSource]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤"""
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å–º—ã —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞–º–∏
        movies_data = [
            {
                "title": "–ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä",
                "file_path": "movies/interstellar.mp4",
                "year": 2014,
                "genre": "sci-fi",
                "rating": 8.6,
                "scenes": [
                    {
                        "title": "–ü—Ä–æ—â–∞–Ω–∏–µ —Å –¥–æ—á–µ—Ä—å—é",
                        "start_time": 1840.0,  # 30:40
                        "end_time": 1885.0,    # 31:25
                        "emotion": "drama",
                        "intensity": 0.9,
                        "description": "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–æ—â–∞–Ω–∏–µ –ö—É–ø–µ—Ä–∞ —Å –ú–µ—Ä—Ñ",
                        "dialogue": "–ù–µ –∑–Ω–∞—é, –∫–æ–≥–¥–∞ –≤–µ—Ä–Ω—É—Å—å..."
                    },
                    {
                        "title": "–î–æ–∫–∏–Ω–≥ —Å –≠–Ω–¥—é—Ä–∞–Ω—Å",
                        "start_time": 6420.0,  # 1:47:00
                        "end_time": 6480.0,    # 1:48:00
                        "emotion": "suspense",
                        "intensity": 0.95,
                        "description": "–ù–∞–ø—Ä—è–∂–µ–Ω–Ω–∞—è —Å—Ç—ã–∫–æ–≤–∫–∞ —Å –≤—Ä–∞—â–∞—é—â–µ–π—Å—è —Å—Ç–∞–Ω—Ü–∏–µ–π"
                    }
                ]
            },
            {
                "title": "–î–∂–æ–∫–µ—Ä",
                "file_path": "movies/joker.mp4", 
                "year": 2019,
                "genre": "drama",
                "rating": 8.4,
                "scenes": [
                    {
                        "title": "–ü—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –î–∂–æ–∫–µ—Ä–∞",
                        "start_time": 5400.0,  # 1:30:00
                        "end_time": 5460.0,    # 1:31:00
                        "emotion": "drama",
                        "intensity": 0.85,
                        "description": "–ê—Ä—Ç—É—Ä —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –î–∂–æ–∫–µ—Ä–æ–º",
                        "dialogue": "–í—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–æ, —á—Ç–æ –∑–∞—Å–ª—É–∂–∏–≤–∞–ª–∏"
                    }
                ]
            },
            {
                "title": "–ú—Å—Ç–∏—Ç–µ–ª–∏: –§–∏–Ω–∞–ª",
                "file_path": "movies/avengers_endgame.mp4",
                "year": 2019, 
                "genre": "action",
                "rating": 8.4,
                "scenes": [
                    {
                        "title": "–Ø –µ—Å—Ç—å –ñ–µ–ª–µ–∑–Ω—ã–π –ß–µ–ª–æ–≤–µ–∫",
                        "start_time": 10800.0,  # 3:00:00
                        "end_time": 10860.0,    # 3:01:00
                        "emotion": "drama",
                        "intensity": 1.0,
                        "description": "–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–¥–≤–∏–≥ –¢–æ–Ω–∏ –°—Ç–∞—Ä–∫–∞"
                    },
                    {
                        "title": "–ü–æ—Ä—Ç–∞–ª –§–∏–Ω–∞–ª—å–Ω–æ–π –±–∏—Ç–≤—ã",
                        "start_time": 9600.0,   # 2:40:00
                        "end_time": 9720.0,     # 2:42:00
                        "emotion": "action",
                        "intensity": 0.9,
                        "description": "–í—Å–µ –≥–µ—Ä–æ–∏ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –±–∏—Ç–≤—ã"
                    }
                ]
            }
        ]
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç—ã MovieSource
        movies = []
        for movie_data in movies_data:
            scenes = [MovieScene(**scene) for scene in movie_data["scenes"]]
            
            movie = MovieSource(
                title=movie_data["title"],
                file_path=movie_data["file_path"], 
                year=movie_data["year"],
                genre=movie_data["genre"],
                rating=movie_data["rating"],
                scenes=scenes,
                metadata={}
            )
            movies.append(movie)
        
        return movies
    
    async def create_viral_movie_clip(
        self, 
        target_emotion: str = None,
        duration: int = 45,
        platform: str = "instagram"
    ) -> Optional[Dict]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–ª–∏–ø–∞ –∏–∑ —Ñ–∏–ª—å–º–∞"""
        
        try:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –∏ —Å—Ü–µ–Ω—É
            movie = random.choice(self.movie_database)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ü–µ–Ω—ã –ø–æ —ç–º–æ—Ü–∏–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
            available_scenes = movie.scenes
            if target_emotion:
                available_scenes = [s for s in movie.scenes if s.emotion == target_emotion]
            
            if not available_scenes:
                available_scenes = movie.scenes
            
            scene = random.choice(available_scenes)
            
            self.logger.info(f"–°–æ–∑–¥–∞–µ–º –∫–ª–∏–ø –∏–∑ {movie.title}: {scene.title}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–ø
            clip_data = await self.process_movie_scene(movie, scene, duration, platform)
            
            if clip_data:
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                clip_data.update({
                    "source_movie": movie.title,
                    "scene_title": scene.title,
                    "emotion": scene.emotion,
                    "intensity": scene.intensity,
                    "year": movie.year,
                    "rating": movie.rating
                })
            
            return clip_data
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–ø–∞: {e}")
            return None
    
    async def process_movie_scene(
        self,
        movie: MovieSource,
        scene: MovieScene,
        duration: int,
        platform: str
    ) -> Optional[Dict]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ü–µ–Ω—ã –∏–∑ —Ñ–∏–ª—å–º–∞"""
        
        try:
            if not MOVIEPY_AVAILABLE:
                self.logger.warning("MoviePy –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É")
                return await self.create_mock_clip(movie, scene, duration, platform)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ—Ñ–∞–π–ª
            if not Path(movie.file_path).exists():
                self.logger.warning(f"–§–∞–π–ª {movie.file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É")
                return await self.create_mock_clip(movie, scene, duration, platform)
            
            # –û–±—Ä–µ–∑–∞–µ–º —Å—Ü–µ–Ω—É
            video = mp.VideoFileClip(movie.file_path)
            clip = video.subclip(scene.start_time, min(scene.end_time, scene.start_time + duration))
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç–º–æ—Ü–∏–∏
            clip = await self.apply_emotion_effects(clip, scene.emotion)
            
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
            clip = self.adapt_for_platform(clip, platform)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            clip = await self.add_viral_text_overlay(clip, movie, scene)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–ø
            output_path = f"ready_videos/{movie.title}_{scene.title}_{platform}_{int(datetime.now().timestamp())}.mp4"
            clip.write_videofile(output_path, codec='libx264', audio_codec='aac')
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–ø—ã –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
            clip.close()
            video.close()
            
            return {
                "file_path": output_path,
                "duration": duration,
                "platform": platform,
                "title": self.generate_viral_title(movie, scene),
                "description": self.generate_viral_description(movie, scene),
                "hashtags": self.generate_hashtags(movie, scene)
            }
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ü–µ–Ω—ã: {e}")
            return await self.create_mock_clip(movie, scene, duration, platform)
    
    async def create_mock_clip(self, movie: MovieSource, scene: MovieScene, duration: int, platform: str) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏ –∫–ª–∏–ø–∞"""
        
        output_path = f"ready_videos/mock_{movie.title}_{scene.title}_{platform}_{int(datetime.now().timestamp())}.mp4"
        
        return {
            "file_path": output_path,
            "duration": duration,
            "platform": platform,
            "title": self.generate_viral_title(movie, scene),
            "description": self.generate_viral_description(movie, scene), 
            "hashtags": self.generate_hashtags(movie, scene),
            "mock": True
        }
    
    async def apply_emotion_effects(self, clip, emotion: str):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç–º–æ—Ü–∏–∏"""
        
        if not MOVIEPY_AVAILABLE:
            return clip
        
        template = self.emotion_templates.get(emotion, {})
        effects = template.get("effects", [])
        
        try:
            for effect in effects:
                if effect == "dramatic_zoom":
                    # –î—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑—É–º
                    clip = clip.resize(lambda t: 1 + 0.02*t)
                
                elif effect == "slow_motion":
                    # –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ –≤ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
                    if clip.duration > 10:
                        slow_part = clip.subclip(5, 8).fx(lambda c: c.speedx(0.5))
                        clip = mp.concatenate_videoclips([
                            clip.subclip(0, 5),
                            slow_part,
                            clip.subclip(8)
                        ])
                
                elif effect == "fast_cuts":
                    # –ë—ã—Å—Ç—Ä—ã–µ –Ω–∞—Ä–µ–∑–∫–∏ –¥–ª—è —ç–∫—à–Ω–∞
                    if clip.duration > 20:
                        cuts = []
                        for i in range(0, int(clip.duration), 2):
                            cuts.append(clip.subclip(i, min(i+1.5, clip.duration)))
                        clip = mp.concatenate_videoclips(cuts)
            
            return clip
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤: {e}")
            return clip
    
    def adapt_for_platform(self, clip, platform: str):
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É"""
        
        if not MOVIEPY_AVAILABLE:
            return clip
        
        try:
            if platform in ["instagram", "tiktok"]:
                # 9:16 –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ
                clip = clip.resize(height=1920).crop(width=1080)
            
            elif platform == "youtube":
                # 16:9 –¥–ª—è YouTube Shorts (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å –∏–ª–∏ –æ–±—Ä–µ–∑–∞—Ç—å)
                pass
            
            return clip
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø–æ–¥ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É: {e}")
            return clip
    
    async def add_viral_text_overlay(self, clip, movie: MovieSource, scene: MovieScene):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏—Ä—É—Å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–≤–µ—Ä–ª–µ—è"""
        
        if not MOVIEPY_AVAILABLE:
            return clip
        
        try:
            # –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—É—Å–Ω—ã–π —Ç–µ–∫—Å—Ç
            viral_texts = [
                f"üî• {movie.title.upper()}",
                f"üíØ –≠—Ç–∞ —Å—Ü–µ–Ω–∞ –¥–æ —Å–ª–µ–∑!",
                f"‚ù§Ô∏è –õ–∞–π–∫ –µ—Å–ª–∏ –ø–ª–∞–∫–∞–ª",
                f"üì¢ {scene.emotion.upper()} –ú–û–ú–ï–ù–¢!"
            ]
            
            text = random.choice(viral_texts)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            # –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫—Ä–∞—Å–∏–≤—ã–µ —à—Ä–∏—Ñ—Ç—ã –∏ –∞–Ω–∏–º–∞—Ü–∏–∏
            
            return clip
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
            return clip
    
    def generate_viral_title(self, movie: MovieSource, scene: MovieScene) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        
        templates = [
            f"üî• {movie.title.upper()}: –≠—Ç–∞ —Å—Ü–µ–Ω–∞ –∑–∞—Å—Ç–∞–≤–∏–ª–∞ –≤—Å–µ—Ö –ø–ª–∞–∫–∞—Ç—å!",
            f"üíØ {movie.title}: –ú–æ–º–µ–Ω—Ç –∫–æ—Ç–æ—Ä—ã–π –∏–∑–º–µ–Ω–∏–ª –≤—Å—ë!",
            f"üò≠ {movie.title}: –°–∞–º–∞—è –≥—Ä—É—Å—Ç–Ω–∞—è —Å—Ü–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∏–Ω–æ!",
            f"üé¨ {movie.title}: {scene.title} - –º—É—Ä–∞—à–∫–∏ –ø–æ –∫–æ–∂–µ!",
            f"‚ö° {movie.title}: –≠–ø–∏—á–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞ {int(scene.end_time - scene.start_time)} —Å–µ–∫—É–Ω–¥!"
        ]
        
        return random.choice(templates)
    
    def generate_viral_description(self, movie: MovieSource, scene: MovieScene) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏—Ä—É—Å–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"""
        
        emotion_desc = {
            "drama": "–¥–æ —Å–ª–µ–∑",
            "action": "–∞–¥—Ä–µ–Ω–∞–ª–∏–Ω –∑–∞—à–∫–∞–ª–∏–≤–∞–µ—Ç", 
            "comedy": "–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ —Å–º–µ—è—Ç—å—Å—è",
            "suspense": "–Ω–µ—Ä–≤—ã –Ω–∞ –ø—Ä–µ–¥–µ–ª–µ"
        }
        
        desc = emotion_desc.get(scene.emotion, "–Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–µ —ç–º–æ—Ü–∏–∏")
        
        templates = [
            f"–õ—É—á—à–∞—è —Å—Ü–µ–Ω–∞ –∏–∑ {movie.title}! {desc.capitalize()}! üî•\n\n"
            f"üí¨ –ù–∞–ø–∏—à–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ö —á—Ç–æ —á—É–≤—Å—Ç–≤–æ–≤–∞–ª!\n"
            f"‚ù§Ô∏è –õ–∞–π–∫ –µ—Å–ª–∏ –±—ã–ª–æ –∫—Ä—É—Ç–æ!\n"
            f"üì§ –ü–æ–¥–µ–ª–∏—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!",
            
            f"{movie.title} ({movie.year}) - {scene.title}\n\n"
            f"–≠—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –ø—Ä–æ—Å—Ç–æ —à–µ–¥–µ–≤—Ä! {desc} üòç\n\n"
            f"üëÜ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –ª—É—á—à–∏–µ –º–æ–º–µ–Ω—Ç—ã –∫–∏–Ω–æ!\n"
            f"üîî –í–∫–ª—é—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!",
        ]
        
        return random.choice(templates)
    
    def generate_hashtags(self, movie: MovieSource, scene: MovieScene) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–µ—à—Ç–µ–≥–æ–≤"""
        
        base_hashtags = ["#—Ñ–∏–ª—å–º—ã", "#–∫–∏–Ω–æ", "#shorts", "#–≤–∏—Ä—É—Å–Ω–æ–µ"]
        emotion_hashtags = self.emotion_templates.get(scene.emotion, {}).get("hashtags", [])
        
        movie_hashtags = [
            f"#{movie.title.lower().replace(' ', '').replace(':', '')}",
            f"#{movie.genre}",
            f"#–∫–∏–Ω–æ{movie.year}"
        ]
        
        all_hashtags = base_hashtags + emotion_hashtags + movie_hashtags
        return all_hashtags[:15]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def demo_movie_clips():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–ø–æ–≤ –∏–∑ —Ñ–∏–ª—å–º–æ–≤"""
    
    print("üé¨ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ì–ï–ù–ï–†–ê–¢–û–†–ê –ö–õ–ò–ü–û–í –ò–ó –§–ò–õ–¨–ú–û–í")
    print("=" * 50)
    
    generator = MovieClipGenerator()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–ø—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç–º–æ—Ü–∏–π
    emotions = ["drama", "action", "suspense"]
    
    for emotion in emotions:
        print(f"\nüé≠ –°–æ–∑–¥–∞–µ–º {emotion} –∫–ª–∏–ø...")
        
        clip_data = await generator.create_viral_movie_clip(
            target_emotion=emotion,
            duration=45,
            platform="instagram"
        )
        
        if clip_data:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∫–ª–∏–ø: {clip_data['title']}")
            print(f"üìÅ –§–∞–π–ª: {clip_data['file_path']}")
            print(f"üè∑Ô∏è –•–µ—à—Ç–µ–≥–∏: {', '.join(clip_data['hashtags'][:5])}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–ø–∞")


if __name__ == "__main__":
    asyncio.run(demo_movie_clips())