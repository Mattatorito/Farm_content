"""
AI-–∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è —Å—Ç–∏–ª—è –≤–∏–¥–µ–æ.
"""

import asyncio
import json
import random
from datetime import datetime, timedelta
from pathlib import Path
from typing import Any, Dict, List, Optional, Tuple

import requests
from farm_content.core import VideoProcessingError, get_logger

logger = get_logger(__name__)


class TrendAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç—Ä–µ–Ω–¥–æ–≤ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö —Å AI-–∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π."""

    def __init__(self):
        self.logger = get_logger(f"{__name__}.TrendAnalyzer")
        
        # –ë–∞–∑—ã —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ API —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π)
        self.trend_categories = {
            "visual_styles": {
                "minimalist": {
                    "score": 0.85,
                    "features": ["clean_composition", "white_space", "simple_colors"],
                    "platforms": ["instagram", "tiktok"],
                    "duration": "medium"
                },
                "neon_aesthetics": {
                    "score": 0.92,
                    "features": ["bright_colors", "glow_effects", "dark_background"],
                    "platforms": ["tiktok", "youtube_shorts"],
                    "duration": "high"
                },
                "retro_vibe": {
                    "score": 0.78,
                    "features": ["vintage_filters", "grain_effect", "warm_tones"],
                    "platforms": ["instagram", "twitter"],
                    "duration": "medium"
                },
                "dramatic_contrast": {
                    "score": 0.88,
                    "features": ["high_contrast", "dramatic_lighting", "bold_shadows"],
                    "platforms": ["tiktok", "instagram"],
                    "duration": "high"
                }
            },
            "content_themes": {
                "transformation": {
                    "score": 0.95,
                    "keywords": ["–¥–æ –∏ –ø–æ—Å–ª–µ", "–ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ", "–∏–∑–º–µ–Ω–µ–Ω–∏—è"],
                    "engagement_rate": 0.89,
                    "viral_potential": 0.92
                },
                "behind_scenes": {
                    "score": 0.82,
                    "keywords": ["–∫–∞–∫ –¥–µ–ª–∞–µ—Ç—Å—è", "–ø—Ä–æ—Ü–µ—Å—Å", "—Å–µ–∫—Ä–µ—Ç—ã"],
                    "engagement_rate": 0.76,
                    "viral_potential": 0.78
                },
                "tutorials": {
                    "score": 0.87,
                    "keywords": ["–∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å", "—É—á–∏–º—Å—è", "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"],
                    "engagement_rate": 0.81,
                    "viral_potential": 0.83
                },
                "challenges": {
                    "score": 0.94,
                    "keywords": ["—á–µ–ª–ª–µ–Ω–¥–∂", "–≤—ã–∑–æ–≤", "–ø–æ–ø—Ä–æ–±—É–π"],
                    "engagement_rate": 0.88,
                    "viral_potential": 0.91
                }
            },
            "audio_trends": {
                "trending_sounds": [
                    {
                        "name": "epic_motivation",
                        "score": 0.89,
                        "usage_count": 125000,
                        "platforms": ["tiktok", "instagram"]
                    },
                    {
                        "name": "chill_vibes",
                        "score": 0.76,
                        "usage_count": 89000,
                        "platforms": ["instagram", "youtube_shorts"]
                    },
                    {
                        "name": "dramatic_buildup",
                        "score": 0.92,
                        "usage_count": 156000,
                        "platforms": ["tiktok", "youtube_shorts"]
                    }
                ]
            },
            "timing_patterns": {
                "optimal_durations": {
                    "tiktok": {"min": 15, "max": 60, "optimal": 30},
                    "instagram": {"min": 15, "max": 90, "optimal": 45},
                    "youtube_shorts": {"min": 15, "max": 60, "optimal": 40}
                },
                "posting_times": {
                    "weekdays": ["18:00", "20:00", "22:00"],
                    "weekends": ["14:00", "16:00", "19:00"]
                }
            }
        }
        
        # –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã (–æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
        self.current_trends = {
            "hot_hashtags": [
                "#–≤–∏—Ä—É—Å–Ω–æ", "#—Ç—Ä–µ–Ω–¥2025", "#—Ç–æ–ø–∫–æ–Ω—Ç–µ–Ω—Ç", "#–º–æ—â–Ω–æ",
                "#–Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ", "#—Å–º–æ—Ç—Ä–∏–≤—Å–µ", "#—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "#–ø–æ–ø—É–ª—è—Ä–Ω–æ–µ"
            ],
            "viral_elements": [
                "–±—ã—Å—Ç—Ä—ã–π –º–æ–Ω—Ç–∞–∂", "–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç", "—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è",
                "–ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "—é–º–æ—Ä", "–º–æ—Ç–∏–≤–∞—Ü–∏—è", "–ª–∞–π—Ñ—Ö–∞–∫"
            ],
            "engagement_triggers": [
                "–¥–æ—Å–º–æ—Ç—Ä–∏ –¥–æ –∫–æ–Ω—Ü–∞", "–∞ —Ç—ã –∫–∞–∫ –¥—É–º–∞–µ—à—å?", "—Å–æ–≥–ª–∞—Å–µ–Ω –ª–∞–π–∫",
                "—Å–æ—Ö—Ä–∞–Ω–∏ —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å", "–ø–æ–¥–µ–ª–∏—Å—å —Å –¥—Ä—É–≥–æ–º"
            ]
        }

    async def analyze_current_trends(
        self, 
        platforms: List[str] = ["tiktok", "instagram", "youtube_shorts"]
    ) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤."""
        
        self.logger.info("üîç –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤...")
        
        try:
            trends_analysis = {
                "timestamp": datetime.now().isoformat(),
                "platforms_analyzed": platforms,
                "trending_styles": {},
                "content_themes": {},
                "recommendations": {}
            }
            
            # –ê–Ω–∞–ª–∏–∑ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
            for platform in platforms:
                platform_trends = await self._get_platform_trends(platform)
                trends_analysis["trending_styles"][platform] = platform_trends
            
            # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã—Ö —Ç–µ–º
            trending_themes = self._analyze_content_themes()
            trends_analysis["content_themes"] = trending_themes
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            recommendations = await self._generate_trend_recommendations(
                trends_analysis, platforms
            )
            trends_analysis["recommendations"] = recommendations
            
            return trends_analysis
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
            return self._get_fallback_trends()

    async def _get_platform_trends(self, platform: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã."""
        
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∏ –±—ã API-–∑–∞–ø—Ä–æ—Å—ã
            # –°–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            
            platform_data = {
                "visual_styles": [],
                "popular_effects": [],
                "trending_duration": 30,
                "engagement_peaks": []
            }
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–∏–ª–∏ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
            for style, data in self.trend_categories["visual_styles"].items():
                if platform in data["platforms"]:
                    platform_data["visual_styles"].append({
                        "name": style,
                        "score": data["score"],
                        "features": data["features"]
                    })
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
            if platform == "tiktok":
                platform_data["popular_effects"] = [
                    "speed_ramping", "zoom_transitions", "color_pop",
                    "glitch_effect", "neon_glow"
                ]
            elif platform == "instagram":
                platform_data["popular_effects"] = [
                    "smooth_transitions", "aesthetic_filters", "bokeh_blur",
                    "vintage_look", "color_grading"
                ]
            elif platform == "youtube_shorts":
                platform_data["popular_effects"] = [
                    "dynamic_zoom", "text_animations", "sound_sync",
                    "quick_cuts", "dramatic_reveals"
                ]
            
            # –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            duration_info = self.trend_categories["timing_patterns"]["optimal_durations"]
            if platform in duration_info:
                platform_data["trending_duration"] = duration_info[platform]["optimal"]
            
            return platform_data
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤ –¥–ª—è {platform}: {e}")
            return {"visual_styles": [], "popular_effects": []}

    def _analyze_content_themes(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã—Ö —Ç–µ–º."""
        
        themes_analysis = {}
        
        try:
            for theme, data in self.trend_categories["content_themes"].items():
                themes_analysis[theme] = {
                    "trending_score": data["score"],
                    "engagement_potential": data["engagement_rate"],
                    "viral_potential": data["viral_potential"],
                    "keywords": data["keywords"],
                    "recommendation": self._get_theme_recommendation(theme, data)
                }
        
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–º: {e}")
        
        return themes_analysis

    def _get_theme_recommendation(self, theme: str, data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–º—ã."""
        
        if data["score"] > 0.9:
            return f"üî• –ì–æ—Ä—è—á–∏–π —Ç—Ä–µ–Ω–¥! {theme} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
        elif data["score"] > 0.8:
            return f"üìà –†–∞—Å—Ç—É—â–∏–π —Ç—Ä–µ–Ω–¥: {theme} –Ω–∞–±–∏—Ä–∞–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å"
        elif data["score"] > 0.7:
            return f"üí° –°—Ç–∞–±–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä: {theme} –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        else:
            return f"‚ö†Ô∏è –û—Å—Ç–æ—Ä–æ–∂–Ω–æ: {theme} —Ç–µ—Ä—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å"

    async def _generate_trend_recommendations(
        self, 
        trends_analysis: Dict[str, Any], 
        platforms: List[str]
    ) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤."""
        
        recommendations = {
            "top_strategies": [],
            "visual_adjustments": {},
            "content_suggestions": [],
            "timing_optimization": {}
        }
        
        try:
            # –¢–æ–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            recommendations["top_strategies"] = [
                {
                    "strategy": "–î—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç + –±—ã—Å—Ç—Ä—ã–π –º–æ–Ω—Ç–∞–∂",
                    "confidence": 0.92,
                    "platforms": ["tiktok", "instagram"],
                    "description": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—ã—Å–æ–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç –∏ –±—ã—Å—Ç—Ä—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã"
                },
                {
                    "strategy": "–ù–µ–æ–Ω–æ–≤–∞—è —ç—Å—Ç–µ—Ç–∏–∫–∞ + –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç",
                    "confidence": 0.89,
                    "platforms": ["tiktok", "youtube_shorts"],
                    "description": "–Ø—Ä–∫–∏–µ –Ω–µ–æ–Ω–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"
                },
                {
                    "strategy": "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è + —á–µ–ª–ª–µ–Ω–¥–∂ —ç–ª–µ–º–µ–Ω—Ç—ã",
                    "confidence": 0.94,
                    "platforms": platforms,
                    "description": "–ü–æ–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –≤—ã–∑–æ–≤–∞"
                }
            ]
            
            # –í–∏–∑—É–∞–ª—å–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            for platform in platforms:
                platform_trends = trends_analysis["trending_styles"].get(platform, {})
                visual_styles = platform_trends.get("visual_styles", [])
                
                if visual_styles:
                    top_style = max(visual_styles, key=lambda x: x["score"])
                    recommendations["visual_adjustments"][platform] = {
                        "recommended_style": top_style["name"],
                        "key_features": top_style["features"],
                        "confidence": top_style["score"]
                    }
            
            # –ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            top_themes = sorted(
                trends_analysis["content_themes"].items(),
                key=lambda x: x[1]["trending_score"],
                reverse=True
            )[:3]
            
            for theme, data in top_themes:
                recommendations["content_suggestions"].append({
                    "theme": theme,
                    "keywords": data["keywords"],
                    "viral_potential": data["viral_potential"],
                    "implementation_tip": self._get_implementation_tip(theme)
                })
            
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–∞–π–º–∏–Ω–≥–∞
            recommendations["timing_optimization"] = {
                "optimal_posting_times": self.trend_categories["timing_patterns"]["posting_times"],
                "duration_recommendations": {
                    platform: self.trend_categories["timing_patterns"]["optimal_durations"][platform]
                    for platform in platforms
                    if platform in self.trend_categories["timing_patterns"]["optimal_durations"]
                }
            }
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        
        return recommendations

    def _get_implementation_tip(self, theme: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–∞ –ø–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–º—ã."""
        
        tips = {
            "transformation": "–ü–æ–∫–∞–∂–∏—Ç–µ —á—ë—Ç–∫–∏–π '–¥–æ' –∏ '–ø–æ—Å–ª–µ', –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—ã—Å—Ç—Ä—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã",
            "behind_scenes": "–î–æ–±–∞–≤—å—Ç–µ –∑–∞–∫–∞–¥—Ä–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –ø–æ–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –ø–æ—ç—Ç–∞–ø–Ω–æ",
            "tutorials": "–†–∞–∑–±–µ–π—Ç–µ –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ —à–∞–≥–∏, –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏",
            "challenges": "–°–æ–∑–¥–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ö–µ—à—Ç–µ–≥, –ø–æ–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
        }
        
        return tips.get(theme, "–§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ –∏ —ç–º–æ—Ü–∏—è—Ö")

    async def adapt_content_to_trends(
        self,
        content_analysis: Dict[str, Any],
        trends_analysis: Dict[str, Any],
        target_platform: str = "tiktok"
    ) -> Dict[str, Any]:
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ–¥ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã."""
        
        self.logger.info(f"üéØ –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ–¥ —Ç—Ä–µ–Ω–¥—ã {target_platform}")
        
        try:
            adaptation_plan = {
                "original_analysis": content_analysis,
                "applied_trends": [],
                "style_adjustments": {},
                "content_modifications": {},
                "estimated_improvement": 0.0
            }
            
            # –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç—Ä–µ–Ω–¥–∞–º–∏
            compatibility_score = await self._calculate_trend_compatibility(
                content_analysis, trends_analysis, target_platform
            )
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤
            visual_adaptations = await self._apply_visual_trends(
                content_analysis, trends_analysis, target_platform
            )
            adaptation_plan["style_adjustments"] = visual_adaptations
            
            # –ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            content_modifications = await self._apply_content_trends(
                content_analysis, trends_analysis
            )
            adaptation_plan["content_modifications"] = content_modifications
            
            # –†–∞—Å—á—ë—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è
            improvement = await self._estimate_trend_improvement(
                compatibility_score, visual_adaptations, content_modifications
            )
            adaptation_plan["estimated_improvement"] = improvement
            
            return adaptation_plan
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
            raise VideoProcessingError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç: {e}")

    async def _calculate_trend_compatibility(
        self,
        content_analysis: Dict[str, Any],
        trends_analysis: Dict[str, Any],
        platform: str
    ) -> float:
        """–†–∞—Å—á—ë—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å —Ç—Ä–µ–Ω–¥–∞–º–∏."""
        
        try:
            compatibility_factors = []
            
            # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏
            content_style = content_analysis.get("visual_style", "unknown")
            platform_trends = trends_analysis["trending_styles"].get(platform, {})
            visual_styles = platform_trends.get("visual_styles", [])
            
            style_match = any(
                style["name"] == content_style or 
                content_style in style.get("features", [])
                for style in visual_styles
            )
            compatibility_factors.append(0.8 if style_match else 0.3)
            
            # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏
            content_type = content_analysis.get("content_type", "unknown")
            theme_scores = [
                data["trending_score"] 
                for theme, data in trends_analysis["content_themes"].items()
                if theme in content_type or content_type in theme
            ]
            
            if theme_scores:
                compatibility_factors.append(max(theme_scores))
            else:
                compatibility_factors.append(0.5)  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
            
            # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content_duration = content_analysis.get("duration", 30)
            optimal_duration = platform_trends.get("trending_duration", 30)
            
            duration_factor = 1.0 - min(abs(content_duration - optimal_duration) / optimal_duration, 0.5)
            compatibility_factors.append(duration_factor)
            
            # –û–±—â–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
            return sum(compatibility_factors) / len(compatibility_factors)
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}")
            return 0.5

    async def _apply_visual_trends(
        self,
        content_analysis: Dict[str, Any],
        trends_analysis: Dict[str, Any],
        platform: str
    ) -> Dict[str, Any]:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤."""
        
        visual_adaptations = {
            "color_adjustments": {},
            "effect_suggestions": [],
            "composition_changes": {},
            "transition_styles": []
        }
        
        try:
            platform_trends = trends_analysis["trending_styles"].get(platform, {})
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ü–≤–µ—Ç–∞–º
            top_styles = platform_trends.get("visual_styles", [])
            if top_styles:
                best_style = max(top_styles, key=lambda x: x["score"])
                
                if "bright_colors" in best_style["features"]:
                    visual_adaptations["color_adjustments"] = {
                        "saturation": "+20%",
                        "vibrance": "+15%",
                        "highlights": "+10%"
                    }
                elif "warm_tones" in best_style["features"]:
                    visual_adaptations["color_adjustments"] = {
                        "temperature": "+200K",
                        "tint": "+5",
                        "shadows": "warmer"
                    }
            
            # –≠—Ñ—Ñ–µ–∫—Ç—ã
            popular_effects = platform_trends.get("popular_effects", [])
            visual_adaptations["effect_suggestions"] = popular_effects[:3]
            
            # –ö–æ–º–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if any("clean_composition" in style.get("features", []) for style in top_styles):
                visual_adaptations["composition_changes"] = {
                    "rule_of_thirds": True,
                    "negative_space": "increase",
                    "focus_point": "center"
                }
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
        
        return visual_adaptations

    async def _apply_content_trends(
        self,
        content_analysis: Dict[str, Any],
        trends_analysis: Dict[str, Any]
    ) -> Dict[str, Any]:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤."""
        
        content_modifications = {
            "narrative_structure": {},
            "engagement_elements": [],
            "hashtag_suggestions": [],
            "call_to_action": ""
        }
        
        try:
            # –õ—É—á—à–∏–µ —Ç–µ–º—ã
            top_themes = sorted(
                trends_analysis["content_themes"].items(),
                key=lambda x: x[1]["viral_potential"],
                reverse=True
            )[:2]
            
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
            if top_themes:
                primary_theme = top_themes[0][0]
                
                if primary_theme == "transformation":
                    content_modifications["narrative_structure"] = {
                        "opening": "–ü–æ–∫–∞–∂–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ",
                        "middle": "–ü—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è",
                        "ending": "–†–µ–∑—É–ª—å—Ç–∞—Ç —Å –≤–∞—É-—ç—Ñ—Ñ–µ–∫—Ç–æ–º"
                    }
                elif primary_theme == "tutorials":
                    content_modifications["narrative_structure"] = {
                        "opening": "–ü—Ä–æ–±–ª–µ–º–∞ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å",
                        "middle": "–ü–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
                        "ending": "–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
                    }
            
            # –≠–ª–µ–º–µ–Ω—Ç—ã –≤–æ–≤–ª–µ—á–µ–Ω–∏—è
            content_modifications["engagement_elements"] = random.sample(
                self.current_trends["engagement_triggers"], 2
            )
            
            # –•–µ—à—Ç–µ–≥–∏
            content_modifications["hashtag_suggestions"] = random.sample(
                self.current_trends["hot_hashtags"], 5
            )
            
            # Call to action
            cta_options = [
                "–°–æ—Ö—Ä–∞–Ω–∏, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å!",
                "–ü–æ–¥–µ–ª–∏—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!",
                "–ê —Ç—ã –∫–∞–∫ –¥—É–º–∞–µ—à—å? –ü–∏—à–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö!",
                "–õ–∞–π–∫, –µ—Å–ª–∏ –±—ã–ª–æ –ø–æ–ª–µ–∑–Ω–æ!",
                "–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞!"
            ]
            content_modifications["call_to_action"] = random.choice(cta_options)
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
        
        return content_modifications

    async def _estimate_trend_improvement(
        self,
        compatibility_score: float,
        visual_adaptations: Dict[str, Any],
        content_modifications: Dict[str, Any]
    ) -> float:
        """–û—Ü–µ–Ω–∫–∞ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤."""
        
        try:
            improvement_factors = []
            
            # –ë–∞–∑–æ–≤–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –æ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            base_improvement = compatibility_score * 0.3
            improvement_factors.append(base_improvement)
            
            # –£–ª—É—á—à–µ–Ω–∏–µ –æ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –∞–¥–∞–ø—Ç–∞—Ü–∏–π
            visual_score = 0.0
            if visual_adaptations.get("color_adjustments"):
                visual_score += 0.15
            if visual_adaptations.get("effect_suggestions"):
                visual_score += 0.1 * len(visual_adaptations["effect_suggestions"])
            
            improvement_factors.append(min(visual_score, 0.4))
            
            # –£–ª—É—á—à–µ–Ω–∏–µ –æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π
            content_score = 0.0
            if content_modifications.get("engagement_elements"):
                content_score += 0.2
            if content_modifications.get("hashtag_suggestions"):
                content_score += 0.1
            if content_modifications.get("call_to_action"):
                content_score += 0.15
            
            improvement_factors.append(min(content_score, 0.45))
            
            # –û–±—â–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ
            total_improvement = sum(improvement_factors)
            return min(total_improvement, 1.0)  # –ú–∞–∫—Å–∏–º—É–º 100%
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è: {e}")
            return 0.2  # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞

    def _get_fallback_trends(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ."""
        
        return {
            "timestamp": datetime.now().isoformat(),
            "platforms_analyzed": ["tiktok", "instagram", "youtube_shorts"],
            "trending_styles": {
                "tiktok": {
                    "visual_styles": [{"name": "neon_aesthetics", "score": 0.8}],
                    "popular_effects": ["speed_ramping", "color_pop"]
                }
            },
            "content_themes": {
                "transformation": {
                    "trending_score": 0.9,
                    "viral_potential": 0.85
                }
            },
            "recommendations": {
                "top_strategies": [
                    {
                        "strategy": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥",
                        "confidence": 0.7,
                        "description": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —è—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞ –∏ –±—ã—Å—Ç—Ä—ã–π –º–æ–Ω—Ç–∞–∂"
                    }
                ]
            }
        }

    def export_trends_report(
        self, 
        trends_analysis: Dict[str, Any], 
        output_path: Path
    ) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–∞ –ø–æ —Ç—Ä–µ–Ω–¥–∞–º."""
        
        try:
            report = {
                "report_generated": datetime.now().isoformat(),
                "analysis_period": "current",
                "trends_data": trends_analysis,
                "summary": {
                    "total_platforms_analyzed": len(trends_analysis.get("platforms_analyzed", [])),
                    "top_visual_trend": self._get_top_trend(trends_analysis, "visual"),
                    "top_content_theme": self._get_top_trend(trends_analysis, "content"),
                    "confidence_level": "high"
                }
            }
            
            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(report, f, ensure_ascii=False, indent=2)
                
            self.logger.info(f"–û—Ç—á—ë—Ç –ø–æ —Ç—Ä–µ–Ω–¥–∞–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_path}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞: {e}")

    def _get_top_trend(self, trends_analysis: Dict[str, Any], trend_type: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞ –ø–æ —Ç–∏–ø—É."""
        
        try:
            if trend_type == "visual":
                styles = trends_analysis.get("trending_styles", {})
                all_styles = []
                
                for platform_styles in styles.values():
                    all_styles.extend(platform_styles.get("visual_styles", []))
                
                if all_styles:
                    top_style = max(all_styles, key=lambda x: x.get("score", 0))
                    return top_style.get("name", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            
            elif trend_type == "content":
                themes = trends_analysis.get("content_themes", {})
                if themes:
                    top_theme = max(themes.items(), key=lambda x: x[1].get("trending_score", 0))
                    return top_theme[0]
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞: {e}")
        
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"