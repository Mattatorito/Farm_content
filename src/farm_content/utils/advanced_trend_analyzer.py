"""
üìà –ü–†–û–î–í–ò–ù–£–¢–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† –¢–†–ï–ù–î–û–í YOUTUBE –ò INSTAGRAM
===================================================

–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞, –∞–Ω–∞–ª–∏–∑–∞ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö Shorts
—Å YouTube –∏ Instagram Reels –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –ü–æ–∏—Å–∫ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –≤–∏–¥–µ–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
- –ê–Ω–∞–ª–∏–∑ –≤–∏—Ä—É—Å–Ω–æ—Å—Ç–∏ –∏ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏  
- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
- –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ —Å–≤–æ–∏ –∞–∫–∫–∞—É–Ω—Ç—ã
"""

import asyncio
import json
import re
import random
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional, Set
from dataclasses import dataclass
import logging

try:
    import yt_dlp
    YT_DLP_AVAILABLE = True
except ImportError:
    YT_DLP_AVAILABLE = False

try:
    import requests
    REQUESTS_AVAILABLE = True
except ImportError:
    REQUESTS_AVAILABLE = False


@dataclass
class TrendingVideo:
    """–¢—Ä–µ–Ω–¥–æ–≤–æ–µ –≤–∏–¥–µ–æ"""
    id: str
    url: str
    title: str
    platform: str  # "youtube", "instagram"
    category: str
    views: int
    likes: int
    comments: int
    duration: float
    upload_date: datetime
    channel: str
    viral_score: float
    hashtags: List[str]
    description: str
    thumbnail_url: str


@dataclass
class TrendAnalysisResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤"""
    category: str
    total_videos: int
    trending_videos: List[TrendingVideo]
    top_hashtags: List[str]
    popular_themes: List[str]
    analysis_date: datetime
    platform_stats: Dict


class AdvancedTrendAnalyzer:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç—Ä–µ–Ω–¥–æ–≤"""
    
    def __init__(self):
        self.logger = logging.getLogger("AdvancedTrendAnalyzer")
        
        # –ö—ç—à –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —Å–∫–∞—á–∏–≤–∞–Ω–∏–π
        self.processed_videos: Set[str] = set()
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.trend_categories = {
            "gaming": {
                "keywords": ["–∏–≥—Ä—ã", "–≥–µ–π–º–ø–ª–µ–π", "–ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ", "–ª–µ—Ç—Å–ø–ª–µ–π", "gaming"],
                "channels": ["@typical_gamer", "@pewdiepie", "@markiplier"],
                "hashtags": ["#gaming", "#games", "#gamer", "#gameplay"]
            },
            "lifestyle": {
                "keywords": ["–ª–∞–π—Ñ—Å—Ç–∞–π–ª", "–¥–µ–Ω—å", "—É—Ç—Ä–æ", "—Ä—É—Ç–∏–Ω–∞", "lifestyle"],
                "channels": ["@lifestyle", "@routine", "@morning"],
                "hashtags": ["#lifestyle", "#daily", "#routine", "#life"]
            },
            "comedy": {
                "keywords": ["—Å–º–µ—à–Ω–æ", "–ø—Ä–∏–∫–æ–ª", "—é–º–æ—Ä", "–º–µ–º—ã", "funny"],
                "channels": ["@comedy", "@memes", "@funny"],
                "hashtags": ["#funny", "#memes", "#comedy", "#lol"]
            },
            "food": {
                "keywords": ["–µ–¥–∞", "—Ä–µ—Ü–µ–ø—Ç", "–≥–æ—Ç–æ–≤–∫–∞", "food", "cooking"],
                "channels": ["@cooking", "@food", "@recipes"],
                "hashtags": ["#food", "#cooking", "#recipe", "#delicious"]
            },
            "travel": {
                "keywords": ["–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "travel", "–æ—Ç–ø—É—Å–∫", "–ø–æ–µ–∑–¥–∫–∞"],
                "channels": ["@travel", "@vacation", "@trip"],
                "hashtags": ["#travel", "#vacation", "#trip", "#explore"]
            }
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ YouTube API (–∑–∞–≥–ª—É—à–∫–∞)
        self.youtube_api_key = "your_youtube_api_key"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Instagram API (–∑–∞–≥–ª—É—à–∫–∞)  
        self.instagram_token = "your_instagram_token"
    
    async def analyze_trends(
        self,
        categories: List[str] = None,
        platforms: List[str] = None,
        min_views: int = 10000,
        max_age_days: int = 7
    ) -> Dict[str, TrendAnalysisResult]:
        """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º"""
        
        if categories is None:
            categories = list(self.trend_categories.keys())
        
        if platforms is None:
            platforms = ["youtube", "instagram"]
        
        results = {}
        
        for category in categories:
            self.logger.info(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}")
            
            category_results = TrendAnalysisResult(
                category=category,
                total_videos=0,
                trending_videos=[],
                top_hashtags=[],
                popular_themes=[],
                analysis_date=datetime.now(),
                platform_stats={}
            )
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
            for platform in platforms:
                platform_videos = await self.search_trending_videos(
                    platform=platform,
                    category=category,
                    min_views=min_views,
                    max_age_days=max_age_days
                )
                
                category_results.trending_videos.extend(platform_videos)
                category_results.platform_stats[platform] = len(platform_videos)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            category_results.total_videos = len(category_results.trending_videos)
            category_results.top_hashtags = self.extract_top_hashtags(category_results.trending_videos)
            category_results.popular_themes = self.extract_popular_themes(category_results.trending_videos)
            
            results[category] = category_results
        
        return results
    
    async def search_trending_videos(
        self,
        platform: str,
        category: str,
        min_views: int = 10000,
        max_age_days: int = 7
    ) -> List[TrendingVideo]:
        """–ü–æ–∏—Å–∫ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –≤–∏–¥–µ–æ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ"""
        
        if platform == "youtube":
            return await self.search_youtube_trends(category, min_views, max_age_days)
        elif platform == "instagram":
            return await self.search_instagram_trends(category, min_views, max_age_days)
        else:
            self.logger.warning(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}")
            return []
    
    async def search_youtube_trends(
        self,
        category: str,
        min_views: int = 10000,
        max_age_days: int = 7
    ) -> List[TrendingVideo]:
        """–ü–æ–∏—Å–∫ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–∞ YouTube"""
        
        trending_videos = []
        
        try:
            category_data = self.trend_categories.get(category, {})
            keywords = category_data.get("keywords", [category])
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Ç—Ä–µ–Ω–¥–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å YouTube API)
            for keyword in keywords[:2]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –¥–µ–º–æ
                videos = await self.mock_youtube_search(keyword, category, min_views)
                trending_videos.extend(videos)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–∏—Ä—É—Å–Ω–æ–º—É —Å—á–µ—Ç—É
            trending_videos.sort(key=lambda x: x.viral_score, reverse=True)
            
            return trending_videos[:10]  # –¢–æ–ø-10 –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ YouTube —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
            return []
    
    async def search_instagram_trends(
        self,
        category: str,
        min_views: int = 10000,
        max_age_days: int = 7
    ) -> List[TrendingVideo]:
        """–ü–æ–∏—Å–∫ —Ç—Ä–µ–Ω–¥–æ–≤ –≤ Instagram"""
        
        trending_videos = []
        
        try:
            category_data = self.trend_categories.get(category, {})
            hashtags = category_data.get("hashtags", [f"#{category}"])
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Ç—Ä–µ–Ω–¥–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å Instagram API)
            for hashtag in hashtags[:2]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –¥–µ–º–æ
                videos = await self.mock_instagram_search(hashtag, category, min_views)
                trending_videos.extend(videos)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–∏—Ä—É—Å–Ω–æ–º—É —Å—á–µ—Ç—É
            trending_videos.sort(key=lambda x: x.viral_score, reverse=True)
            
            return trending_videos[:10]
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ Instagram —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
            return []
    
    async def mock_youtube_search(self, keyword: str, category: str, min_views: int) -> List[TrendingVideo]:
        """–ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –Ω–∞ YouTube (–¥–ª—è –¥–µ–º–æ)"""
        
        videos = []
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ –≤–∏–¥–µ–æ
        for i in range(5):
            video_id = f"yt_{keyword}_{i}_{int(datetime.now().timestamp())}"
            
            views = random.randint(min_views, min_views * 10)
            likes = int(views * random.uniform(0.05, 0.15))  # 5-15% –ª–∞–π–∫–æ–≤
            comments = int(views * random.uniform(0.01, 0.05))  # 1-5% –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∏—Ä—É—Å–Ω—ã–π —Å—á–µ—Ç
            viral_score = self.calculate_viral_score(views, likes, comments, 1)  # 1 –¥–µ–Ω—å
            
            video = TrendingVideo(
                id=video_id,
                url=f"https://youtube.com/shorts/{video_id}",
                title=f"üî• {keyword.upper()}: –≠—Ç–æ –≤–∑–æ—Ä–≤–µ—Ç –≤–∞—à –º–æ–∑–≥! #{i+1}",
                platform="youtube",
                category=category,
                views=views,
                likes=likes,
                comments=comments,
                duration=random.randint(15, 60),
                upload_date=datetime.now() - timedelta(days=random.randint(0, 3)),
                channel=f"@trending_{keyword}_channel",
                viral_score=viral_score,
                hashtags=[f"#{keyword}", "#shorts", "#–≤–∏—Ä—É—Å–Ω–æ–µ", f"#{category}"],
                description=f"–ù–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–π {keyword} –∫–æ–Ω—Ç–µ–Ω—Ç! –ü–æ–¥–ø–∏—à–∏—Å—å –¥–ª—è –±–æ–ª—å—à–µ–≥–æ!",
                thumbnail_url=f"https://img.youtube.com/vi/{video_id}/maxresdefault.jpg"
            )
            
            videos.append(video)
        
        return videos
    
    async def mock_instagram_search(self, hashtag: str, category: str, min_views: int) -> List[TrendingVideo]:
        """–ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤ Instagram (–¥–ª—è –¥–µ–º–æ)"""
        
        videos = []
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ Reels
        for i in range(5):
            video_id = f"ig_{hashtag.replace('#', '')}_{i}_{int(datetime.now().timestamp())}"
            
            views = random.randint(min_views, min_views * 5)
            likes = int(views * random.uniform(0.08, 0.20))  # 8-20% –ª–∞–π–∫–æ–≤ –≤ Instagram
            comments = int(views * random.uniform(0.02, 0.08))  # 2-8% –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∏—Ä—É—Å–Ω—ã–π —Å—á–µ—Ç
            viral_score = self.calculate_viral_score(views, likes, comments, 1)
            
            video = TrendingVideo(
                id=video_id,
                url=f"https://instagram.com/reel/{video_id}/",
                title=f"üíØ {hashtag} Reel: –ó–∞–ª–∏–ø–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç!",
                platform="instagram",
                category=category,
                views=views,
                likes=likes,
                comments=comments,
                duration=random.randint(15, 90),
                upload_date=datetime.now() - timedelta(days=random.randint(0, 2)),
                channel=f"@viral_{category}_creator",
                viral_score=viral_score,
                hashtags=[hashtag, "#reels", "#viral", f"#{category}", "#explore"],
                description=f"–¢–æ–ø–æ–≤—ã–π {category} –∫–æ–Ω—Ç–µ–Ω—Ç! üî• –°–æ—Ö—Ä–∞–Ω–∏ —Å–µ–±–µ!",
                thumbnail_url=f"https://instagram.com/p/{video_id}/media/?size=l"
            )
            
            videos.append(video)
        
        return videos
    
    def calculate_viral_score(self, views: int, likes: int, comments: int, age_days: int) -> float:
        """–†–∞—Å—á–µ—Ç –≤–∏—Ä—É—Å–Ω–æ–≥–æ —Å—á–µ—Ç–∞ –≤–∏–¥–µ–æ"""
        
        # –ë–∞–∑–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        engagement_rate = (likes + comments * 2) / max(views, 1)  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤–∞–∂–Ω–µ–µ –ª–∞–π–∫–æ–≤
        freshness_factor = max(0.1, 1 - (age_days / 7))  # –ß–µ–º —Å–≤–µ–∂–µ–µ, —Ç–µ–º –ª—É—á—à–µ
        view_factor = min(1.0, views / 100000)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç (0-10)
        viral_score = (engagement_rate * 3 + freshness_factor * 2 + view_factor * 5) * 2
        
        return round(min(10.0, viral_score), 2)
    
    async def download_trending_video(
        self,
        video: TrendingVideo,
        output_dir: str = "downloaded_trends"
    ) -> Optional[str]:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ"""
        
        if video.id in self.processed_videos:
            self.logger.info(f"–í–∏–¥–µ–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {video.id}")
            return None
        
        try:
            output_path = Path(output_dir)
            output_path.mkdir(exist_ok=True)
            
            if not YT_DLP_AVAILABLE:
                # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
                fake_path = output_path / f"{video.id}.mp4"
                self.logger.info(f"–ò–º–∏—Ç–∞—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {video.title}")
                return str(fake_path)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ yt-dlp
            ydl_opts = {
                'outtmpl': str(output_path / f'{video.id}.%(ext)s'),
                'format': 'best[height<=720][ext=mp4]',  # HD –∫–∞—á–µ—Å—Ç–≤–æ
                'writeinfojson': True,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                'writesubtitles': True,  # –°–∫–∞—á–∏–≤–∞–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å
            }
            
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                ydl.download([video.url])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
            self.processed_videos.add(video.id)
            
            downloaded_file = output_path / f"{video.id}.mp4"
            
            if downloaded_file.exists():
                self.logger.info(f"–°–∫–∞—á–∞–Ω–æ: {video.title}")
                return str(downloaded_file)
            else:
                self.logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {downloaded_file}")
                return None
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {video.url}: {e}")
            return None
    
    def extract_top_hashtags(self, videos: List[TrendingVideo]) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–ø–æ–≤—ã—Ö —Ö–µ—à—Ç–µ–≥–æ–≤"""
        
        hashtag_counts = {}
        
        for video in videos:
            for hashtag in video.hashtags:
                hashtag_counts[hashtag] = hashtag_counts.get(hashtag, 0) + 1
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
        sorted_hashtags = sorted(hashtag_counts.items(), key=lambda x: x[1], reverse=True)
        
        return [hashtag for hashtag, count in sorted_hashtags[:20]]
    
    def extract_popular_themes(self, videos: List[TrendingVideo]) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ–º"""
        
        themes = {}
        
        for video in videos:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–º—ã –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –æ–ø–∏—Å–∞–Ω–∏–π
            text = f"{video.title} {video.description}".lower()
            
            # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            for category, data in self.trend_categories.items():
                for keyword in data.get("keywords", []):
                    if keyword.lower() in text:
                        themes[keyword] = themes.get(keyword, 0) + 1
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
        sorted_themes = sorted(themes.items(), key=lambda x: x[1], reverse=True)
        
        return [theme for theme, count in sorted_themes[:10]]
    
    async def process_trending_video(
        self,
        video: TrendingVideo,
        adaptation_settings: Dict = None
    ) -> Optional[Dict]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏"""
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
            downloaded_path = await self.download_trending_video(video)
            
            if not downloaded_path:
                return None
            
            # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
            adapted_data = await self.adapt_viral_content(video, downloaded_path, adaptation_settings)
            
            return adapted_data
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ {video.id}: {e}")
            return None
    
    async def adapt_viral_content(
        self,
        original_video: TrendingVideo,
        video_path: str,
        settings: Dict = None
    ) -> Dict:
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ–¥ —Å–≤–æ–π —Å—Ç–∏–ª—å"""
        
        if settings is None:
            settings = {}
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        adapted_title = self.adapt_title(original_video.title, settings)
        adapted_description = self.adapt_description(original_video.description, settings)
        adapted_hashtags = self.adapt_hashtags(original_video.hashtags, settings)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ
        adapted_data = {
            "original_id": original_video.id,
            "original_url": original_video.url,
            "original_platform": original_video.platform,
            "original_viral_score": original_video.viral_score,
            "adapted_title": adapted_title,
            "adapted_description": adapted_description,
            "adapted_hashtags": adapted_hashtags,
            "video_path": video_path,
            "adaptation_date": datetime.now(),
            "category": original_video.category,
            "expected_performance": self.predict_performance(original_video, settings)
        }
        
        return adapted_data
    
    def adapt_title(self, original_title: str, settings: Dict) -> str:
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        
        # –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–∏
        adapted = original_title
        
        # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–ª–æ–≤–∞ –Ω–∞ –±–æ–ª–µ–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ
        replacements = {
            "—ç–∫—Å–∫–ª—é–∑–∏–≤": "—Ç–æ–ø",
            "—Ç–æ–ª—å–∫–æ —É –Ω–∞—Å": "–ª—É—á—à–∏–π",
            "—Å–µ–∫—Ä–µ—Ç": "—Å–ø–æ—Å–æ–±"
        }
        
        for old, new in replacements.items():
            adapted = adapted.replace(old, new)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–∏ —Ç—Ä–∏–≥–≥–µ—Ä—ã
        triggers = ["üî•", "üíØ", "‚ö°", "üéØ"]
        if not any(trigger in adapted for trigger in triggers):
            adapted = f"üî• {adapted}"
        
        return adapted
    
    def adapt_description(self, original_description: str, settings: Dict) -> str:
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è"""
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
        adapted = original_description
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é
        cta_options = [
            "\n\n‚ù§Ô∏è –õ–∞–π–∫ –µ—Å–ª–∏ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!",
            "\n\nüí¨ –ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –º–Ω–µ–Ω–∏–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ö!",
            "\n\nüì§ –ü–æ–¥–µ–ª–∏—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!",
            "\n\nüîî –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –±–æ–ª—å—à–µ –∫—Ä—É—Ç–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞!"
        ]
        
        adapted += random.choice(cta_options)
        
        return adapted
    
    def adapt_hashtags(self, original_hashtags: List[str], settings: Dict) -> List[str]:
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è —Ö–µ—à—Ç–µ–≥–æ–≤"""
        
        # –ë–µ—Ä–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ö–µ—à—Ç–µ–≥–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–∏
        adapted_hashtags = original_hashtags.copy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –≤–∏—Ä—É—Å–Ω—ã–µ —Ö–µ—à—Ç–µ–≥–∏
        viral_hashtags = ["#—Ä–µ–∫", "#—Ç–æ–ø", "#—Ç—Ä–µ–Ω–¥", "#–≤–∏—Ä—É—Å–Ω–æ–µ", "#–∞–∫—Ç—É–∞–ª—å–Ω–æ–µ"]
        
        for hashtag in viral_hashtags:
            if hashtag not in adapted_hashtags:
                adapted_hashtags.append(hashtag)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        return adapted_hashtags[:15]
    
    def predict_performance(self, original_video: TrendingVideo, settings: Dict) -> Dict:
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        
        # –ë–∞–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫–∞—Ö
        base_performance = original_video.viral_score
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
        adaptation_factor = random.uniform(0.7, 1.2)  # -30% –¥–æ +20%
        
        expected_viral_score = min(10.0, base_performance * adaptation_factor)
        
        # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        expected_views = int(original_video.views * adaptation_factor * random.uniform(0.5, 0.8))
        expected_engagement = original_video.likes / max(original_video.views, 1) * adaptation_factor
        
        return {
            "viral_score": round(expected_viral_score, 2),
            "expected_views": expected_views,
            "expected_engagement_rate": round(expected_engagement * 100, 2),
            "success_probability": min(95, int(expected_viral_score * 10)),
            "adaptation_factor": round(adaptation_factor, 2)
        }


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def demo_trend_analysis():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤"""
    
    print("üìà –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê –¢–†–ï–ù–î–û–í")
    print("=" * 50)
    
    analyzer = AdvancedTrendAnalyzer()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã
    categories = ["gaming", "lifestyle"]
    platforms = ["youtube", "instagram"]
    
    results = await analyzer.analyze_trends(
        categories=categories,
        platforms=platforms,
        min_views=50000
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for category, result in results.items():
        print(f"\nüéØ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.upper()}")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ: {result.total_videos}")
        print(f"üè∑Ô∏è –¢–æ–ø —Ö–µ—à—Ç–µ–≥–∏: {', '.join(result.top_hashtags[:5])}")
        print(f"üí° –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã: {', '.join(result.popular_themes[:3])}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 –≤–∏–¥–µ–æ
        top_videos = sorted(result.trending_videos, key=lambda x: x.viral_score, reverse=True)[:3]
        
        for i, video in enumerate(top_videos, 1):
            print(f"\n   {i}. üî• {video.title}")
            print(f"      üì± {video.platform} | üëÅÔ∏è {video.views:,} | ‚≠ê {video.viral_score}/10")
    
    # –î–µ–º–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ–Ω–¥–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ
    if results:
        category_result = list(results.values())[0]
        if category_result.trending_videos:
            top_video = category_result.trending_videos[0]
            
            print(f"\nüé¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ø–æ–≤–æ–µ –≤–∏–¥–µ–æ...")
            adapted_data = await analyzer.process_trending_video(top_video)
            
            if adapted_data:
                print(f"‚úÖ –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ: {adapted_data['adapted_title']}")
                print(f"üìà –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {adapted_data['expected_performance']['viral_score']}/10")


if __name__ == "__main__":
    asyncio.run(demo_trend_analysis())