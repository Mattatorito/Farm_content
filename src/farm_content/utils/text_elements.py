"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
"""

import asyncio
import json
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List, Optional, Tuple

from moviepy.video.io.VideoFileClip import VideoFileClip
from moviepy.editor import TextClip, CompositeVideoClip

from farm_content.core import VideoProcessingError, get_logger

logger = get_logger(__name__)


class TextElementsGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –¥–ª—è –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""

    def __init__(self):
        self.logger = get_logger(f"{__name__}.TextElementsGenerator")
        
        # –®—Ä–∏—Ñ—Ç—ã –∏ —Å—Ç–∏–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
        self.platform_text_styles = {
            "tiktok": {
                "font": "Arial-Bold",
                "fontsize": 60,
                "color": "white",
                "stroke_color": "black",
                "stroke_width": 3,
                "position": ("center", "center"),
                "method": "caption",
                "animation": "slide_in"
            },
            "instagram": {
                "font": "Helvetica-Bold",
                "fontsize": 55,
                "color": "white",
                "stroke_color": "black",
                "stroke_width": 2,
                "position": ("center", 0.8),
                "method": "caption",
                "animation": "fade_in"
            },
            "youtube_shorts": {
                "font": "Arial-Bold",
                "fontsize": 50,
                "color": "yellow",
                "stroke_color": "black",
                "stroke_width": 2,
                "position": ("center", 0.1),
                "method": "caption",
                "animation": "typewriter"
            }
        }
        
        # –í–∏—Ä—É—Å–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        self.viral_text_patterns = {
            "attention_grabbers": [
                "–°–ú–û–¢–†–ò –ß–¢–û –ü–†–û–ò–°–•–û–î–ò–¢!",
                "–¢–´ –ù–ï –ü–û–í–ï–†–ò–®–¨!",
                "–ù–ï–í–ï–†–û–Ø–¢–ù–û!",
                "–ü–û–î–û–ñ–î–ò...",
                "–ß–¢–û?! üò±",
                "–ë–û–ñ–ï –ú–û–ô!",
                "–≠–¢–û –†–ï–ê–õ–¨–ù–û?",
                "–ù–ï –ú–û–ñ–ï–¢ –ë–´–¢–¨!"
            ],
            "engagement_hooks": [
                "–î–æ—Å–º–æ—Ç—Ä–∏ –¥–æ –∫–æ–Ω—Ü–∞ üëÄ",
                "–õ–∞–π–∫ –µ—Å–ª–∏ —Å–æ–≥–ª–∞—Å–µ–Ω ‚ù§Ô∏è",
                "–°–æ—Ö—Ä–∞–Ω–∏ —Å–µ–±–µ üìå",
                "–ü–æ–¥–µ–ª–∏—Å—å —Å –¥—Ä—É–∑—å—è–º–∏ üì§",
                "–ü–∏—à–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö üí¨",
                "–ß—Ç–æ –¥—É–º–∞–µ—à—å? ü§î",
                "–°–æ–≥–ª–∞—Å–µ–Ω? ü§ù",
                "–¢–≤–æ–µ –º–Ω–µ–Ω–∏–µ? üìù"
            ],
            "trending_phrases": [
                "–¢–†–ï–ù–î 2025",
                "–í–ò–†–£–°–ù–û",
                "–¢–û–ü –ö–û–ù–¢–ï–ù–¢",
                "–°–ú–û–¢–†–Ø–¢ –í–°–ï",
                "–ú–ò–õ–õ–ò–û–ù–´ –ü–†–û–°–ú–û–¢–†–û–í",
                "–í–ó–û–†–í–ê–õ–û –ò–ù–¢–ï–†–ù–ï–¢",
                "–°–õ–û–ú–ê–õ –ê–õ–ì–û–†–ò–¢–ú–´",
                "–†–ï–ö–û–†–î–°–ú–ï–ù"
            ],
            "emotional_triggers": [
                "–î–æ —Å–ª–µ–∑ üò≠",
                "–ú—É—Ä–∞—à–∫–∏ –ø–æ –∫–æ–∂–µ",
                "–°–µ—Ä–¥—Ü–µ –∑–∞–º–µ—Ä–ª–æ ‚ù§Ô∏è",
                "–ù–µ—Ç —Å–ª–æ–≤...",
                "–î—É—à–µ–≤–Ω–æ ü•∫",
                "–ü—Ä–æ–±—Ä–∞–ª–æ",
                "–ú–æ—â–Ω–æ! üí™",
                "–ì–ª—É–±–æ–∫–æ"
            ]
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤
        self.subtitle_settings = {
            "max_chars_per_line": 40,
            "max_lines": 2,
            "duration_per_word": 0.5,
            "min_duration": 1.0,
            "max_duration": 4.0,
            "fade_in_duration": 0.2,
            "fade_out_duration": 0.2
        }

    async def add_viral_text_overlays(
        self,
        video_path: Path,
        platform: str = "tiktok",
        auto_generate_text: bool = True,
        custom_texts: Optional[List[Dict[str, Any]]] = None,
        viral_intensity: float = 0.8
    ) -> VideoFileClip:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏—Ä—É—Å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–≤–µ—Ä–ª–µ–µ–≤ –∫ –≤–∏–¥–µ–æ."""
        
        self.logger.info(f"üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è {platform}")
        
        try:
            with VideoFileClip(str(video_path)) as video:
                duration = video.duration
                
                if custom_texts:
                    texts_to_add = custom_texts
                elif auto_generate_text:
                    texts_to_add = self._generate_auto_texts(duration, platform, viral_intensity)
                else:
                    texts_to_add = []
                
                if not texts_to_add:
                    return video
                
                # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–ª–∏–ø—ã
                text_clips = []
                for text_data in texts_to_add:
                    text_clip = await self._create_text_clip(
                        text_data, platform, video.size
                    )
                    if text_clip:
                        text_clips.append(text_clip)
                
                if text_clips:
                    # –ö–æ–º–ø–æ–∑–∏—Ç–∏—Ä—É–µ–º –≤–∏–¥–µ–æ —Å —Ç–µ–∫—Å—Ç–∞–º–∏
                    final_video = CompositeVideoClip([video] + text_clips)
                    return final_video.set_duration(video.duration)
                else:
                    return video
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return VideoFileClip(str(video_path))

    def _generate_auto_texts(
        self, 
        duration: float, 
        platform: str, 
        intensity: float
    ) -> List[Dict[str, Any]]:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã."""
        
        texts = []
        
        try:
            # –•—É–∫ –≤ –Ω–∞—á–∞–ª–µ (–ø–µ—Ä–≤—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã)
            if duration > 3:
                hook_text = self._select_random_text("attention_grabbers", intensity)
                texts.append({
                    "text": hook_text,
                    "start_time": 0.5,
                    "duration": 2.0,
                    "position": "top",
                    "style": "attention"
                })
            
            # –°—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å - –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞
            if duration > 15:
                mid_point = duration / 2
                engagement_text = self._select_random_text("trending_phrases", intensity)
                texts.append({
                    "text": engagement_text,
                    "start_time": mid_point - 1,
                    "duration": 2.5,
                    "position": "center",
                    "style": "highlight"
                })
            
            # –ö–æ–Ω–µ—Ü - –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
            if duration > 5:
                cta_text = self._select_random_text("engagement_hooks", intensity)
                texts.append({
                    "text": cta_text,
                    "start_time": max(duration - 4, duration * 0.8),
                    "duration": 3.0,
                    "position": "bottom",
                    "style": "call_to_action"
                })
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –≤—ã—Å–æ–∫–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
            if intensity > 0.7 and duration > 20:
                emotional_text = self._select_random_text("emotional_triggers", intensity)
                texts.append({
                    "text": emotional_text,
                    "start_time": duration * 0.3,
                    "duration": 2.0,
                    "position": "center_right",
                    "style": "emotion"
                })
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ç–µ–∫—Å—Ç–æ–≤: {e}")
        
        return texts

    def _select_random_text(self, category: str, intensity: float) -> str:
        """–í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —É—á–µ—Ç–æ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏."""
        
        import random
        
        texts = self.viral_text_patterns.get(category, ["–ö–û–ù–¢–ï–ù–¢"])
        
        # –ü—Ä–∏ –≤—ã—Å–æ–∫–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –≤—ã–±–∏—Ä–∞–µ–º –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
        if intensity > 0.8 and category == "attention_grabbers":
            priority_texts = [t for t in texts if any(word in t for word in ["–ù–ï", "–ß–¢–û", "–ë–û–ñ–ï"])]
            if priority_texts:
                texts = priority_texts
        
        return random.choice(texts)

    async def _create_text_clip(
        self, 
        text_data: Dict[str, Any], 
        platform: str, 
        video_size: Tuple[int, int]
    ) -> Optional[TextClip]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–ø–∞."""
        
        try:
            style_config = self.platform_text_styles.get(platform, self.platform_text_styles["tiktok"])
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–∫—Å—Ç–∞
            text = text_data["text"]
            start_time = text_data["start_time"]
            duration = text_data["duration"]
            position = text_data.get("position", "center")
            style_type = text_data.get("style", "normal")
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Å—Ç–∏–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞
            text_config = style_config.copy()
            
            if style_type == "attention":
                text_config["fontsize"] = int(text_config["fontsize"] * 1.2)
                text_config["color"] = "red"
                text_config["stroke_width"] = text_config.get("stroke_width", 2) + 1
            elif style_type == "highlight":
                text_config["color"] = "yellow"
                text_config["fontsize"] = int(text_config["fontsize"] * 1.1)
            elif style_type == "call_to_action":
                text_config["color"] = "lime"
                text_config["fontsize"] = int(text_config["fontsize"] * 0.9)
            elif style_type == "emotion":
                text_config["color"] = "pink"
                text_config["fontsize"] = int(text_config["fontsize"] * 0.8)
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–ª–∏–ø
            try:
                txt_clip = TextClip(
                    text,
                    fontsize=text_config["fontsize"],
                    color=text_config["color"],
                    font=text_config.get("font", "Arial-Bold"),
                    stroke_color=text_config.get("stroke_color"),
                    stroke_width=text_config.get("stroke_width", 0)
                ).set_duration(duration).set_start(start_time)
            except Exception:
                # Fallback –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤
                txt_clip = TextClip(
                    text,
                    fontsize=text_config["fontsize"],
                    color=text_config["color"]
                ).set_duration(duration).set_start(start_time)
            
            # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            video_w, video_h = video_size
            
            if position == "top":
                txt_clip = txt_clip.set_position(("center", video_h * 0.1))
            elif position == "center":
                txt_clip = txt_clip.set_position("center")
            elif position == "bottom":
                txt_clip = txt_clip.set_position(("center", video_h * 0.85))
            elif position == "center_right":
                txt_clip = txt_clip.set_position((video_w * 0.6, video_h * 0.5))
            else:
                txt_clip = txt_clip.set_position("center")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            animation = text_config.get("animation", "fade_in")
            txt_clip = self._apply_text_animation(txt_clip, animation)
            
            return txt_clip
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–ø–∞: {e}")
            return None

    def _apply_text_animation(self, text_clip: TextClip, animation: str) -> TextClip:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∫ —Ç–µ–∫—Å—Ç—É."""
        
        try:
            if animation == "fade_in":
                return text_clip.crossfadein(0.3)
            elif animation == "slide_in":
                # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è - —Å—Ä–∞–∑—É –ø–æ—è–≤–ª—è–µ—Ç—Å—è
                return text_clip.crossfadein(0.2)
            elif animation == "typewriter":
                # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - fade in —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
                return text_clip.crossfadein(0.5)
            else:
                return text_clip.crossfadein(0.2)
                
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
            return text_clip

    async def generate_auto_captions(
        self,
        video_path: Path,
        language: str = "ru",
        style: str = "viral",
        platform: str = "tiktok"
    ) -> List[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)."""
        
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤
        # –í –ø–æ–ª–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã speech-to-text
        
        captions = []
        
        try:
            with VideoFileClip(str(video_path)) as video:
                duration = video.duration
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                if duration > 10:
                    captions = [
                        {
                            "start": 0.0,
                            "end": 3.0,
                            "text": "–°–º–æ—Ç—Ä–∏—Ç–µ —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç!",
                            "confidence": 0.9
                        },
                        {
                            "start": 3.0,
                            "end": 8.0,
                            "text": "–≠—Ç–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ!",
                            "confidence": 0.85
                        },
                        {
                            "start": 8.0,
                            "end": duration,
                            "text": "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!",
                            "confidence": 0.8
                        }
                    ]
        
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {e}")
        
        return captions

    async def add_captions_to_video(
        self,
        video_path: Path,
        captions: List[Dict[str, Any]],
        platform: str = "tiktok",
        output_path: Optional[Path] = None
    ) -> Path:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –∫ –≤–∏–¥–µ–æ."""
        
        try:
            if output_path is None:
                output_path = video_path.parent / f"{video_path.stem}_with_captions.mp4"
            
            with VideoFileClip(str(video_path)) as video:
                caption_clips = []
                
                for caption in captions:
                    caption_clip = await self._create_caption_clip(
                        caption, platform, video.size
                    )
                    if caption_clip:
                        caption_clips.append(caption_clip)
                
                if caption_clips:
                    # –ö–æ–º–ø–æ–∑–∏—Ç–∏—Ä—É–µ–º –≤–∏–¥–µ–æ —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏
                    final_video = CompositeVideoClip([video] + caption_clips)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
                    await asyncio.get_event_loop().run_in_executor(
                        None,
                        lambda: final_video.write_videofile(
                            str(output_path),
                            codec="libx264",
                            audio_codec="aac",
                            verbose=False,
                            logger=None
                        )
                    )
                else:
                    # –ü—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
                    import shutil
                    shutil.copy2(video_path, output_path)
            
            return output_path
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {e}")
            raise VideoProcessingError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã: {e}")

    async def _create_caption_clip(
        self, 
        caption: Dict[str, Any], 
        platform: str, 
        video_size: Tuple[int, int]
    ) -> Optional[TextClip]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–ø–∞ —Å—É–±—Ç–∏—Ç—Ä–∞."""
        
        try:
            style_config = self.platform_text_styles.get(platform, self.platform_text_styles["tiktok"])
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤ (–º–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞)
            caption_config = style_config.copy()
            caption_config["fontsize"] = int(caption_config["fontsize"] * 0.7)
            caption_config["position"] = ("center", video_size[1] * 0.8)  # –í–Ω–∏–∑—É
            
            text = caption["text"]
            start_time = caption["start"]
            duration = caption["end"] - caption["start"]
            
            # –°–æ–∑–¥–∞–µ–º —Å—É–±—Ç–∏—Ç—Ä
            try:
                caption_clip = TextClip(
                    text,
                    fontsize=caption_config["fontsize"],
                    color=caption_config["color"],
                    font=caption_config.get("font", "Arial-Bold"),
                    stroke_color=caption_config.get("stroke_color"),
                    stroke_width=caption_config.get("stroke_width", 0)
                ).set_duration(duration).set_start(start_time)
            except Exception:
                # Fallback
                caption_clip = TextClip(
                    text,
                    fontsize=caption_config["fontsize"],
                    color=caption_config["color"]
                ).set_duration(duration).set_start(start_time)
            
            # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
            caption_clip = caption_clip.set_position(("center", video_size[1] * 0.85))
            
            # –î–æ–±–∞–≤–ª—è–µ–º fade —ç—Ñ—Ñ–µ–∫—Ç—ã
            fade_duration = min(0.3, duration / 4)
            caption_clip = caption_clip.crossfadein(fade_duration).crossfadeout(fade_duration)
            
            return caption_clip
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–∞: {e}")
            return None

    def create_viral_text_combinations(
        self, 
        content_analysis: Dict[str, Any],
        platform: str = "tiktok"
    ) -> List[Dict[str, Any]]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –≤–∏—Ä—É—Å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
        
        combinations = []
        
        try:
            content_type = content_analysis.get("content_type", "high_energy")
            viral_score = content_analysis.get("viral_score", 0.5)
            duration = content_analysis.get("duration", 30)
            
            # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
            base_combinations = [
                {
                    "name": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–∏—Ä—É—Å–Ω–æ—Å—Ç—å",
                    "intensity": 1.0,
                    "texts": [
                        {"text": "üî• –¢–´ –ù–ï –ü–û–í–ï–†–ò–®–¨!", "timing": "start", "style": "attention"},
                        {"text": "–ú–ò–õ–õ–ò–û–ù–´ –ü–†–û–°–ú–û–¢–†–û–í", "timing": "middle", "style": "highlight"},
                        {"text": "‚ù§Ô∏è –õ–ê–ô–ö –ï–°–õ–ò –°–û–ì–õ–ê–°–ï–ù!", "timing": "end", "style": "call_to_action"}
                    ]
                },
                {
                    "name": "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ",
                    "intensity": 0.8,
                    "texts": [
                        {"text": "üò± –ù–ï–í–ï–†–û–Ø–¢–ù–û!", "timing": "start", "style": "attention"},
                        {"text": "–î–æ —Å–ª–µ–∑ üò≠", "timing": "middle", "style": "emotion"},
                        {"text": "üí¨ –ü–æ–¥–µ–ª–∏—Å—å –º–Ω–µ–Ω–∏–µ–º!", "timing": "end", "style": "call_to_action"}
                    ]
                },
                {
                    "name": "–¢—Ä–µ–Ω–¥–æ–≤—ã–π —Å—Ç–∏–ª—å",
                    "intensity": 0.7,
                    "texts": [
                        {"text": "–¢–†–ï–ù–î 2025", "timing": "start", "style": "highlight"},
                        {"text": "–°–ú–û–¢–†–Ø–¢ –í–°–ï", "timing": "middle", "style": "highlight"},
                        {"text": "üìå –°–æ—Ö—Ä–∞–Ω–∏ —Å–µ–±–µ", "timing": "end", "style": "call_to_action"}
                    ]
                }
            ]
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ–¥ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            for combo in base_combinations:
                adjusted_combo = combo.copy()
                
                if content_type == "educational":
                    adjusted_combo["texts"][0]["text"] = "üí° –£–ó–ù–ê–ô –°–ï–ö–†–ï–¢!"
                    adjusted_combo["texts"][1]["text"] = "–¢–û–ü –ò–ù–§–û–†–ú–ê–¶–ò–Ø"
                elif content_type == "emotional":
                    adjusted_combo["texts"][1]["text"] = "–ú—É—Ä–∞—à–∫–∏ –ø–æ –∫–æ–∂–µ"
                
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ–¥ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
                if platform == "youtube_shorts":
                    adjusted_combo["texts"][2]["text"] = "üëç –õ–∞–π–∫ –∏ –ø–æ–¥–ø–∏—Å–∫–∞!"
                elif platform == "instagram":
                    adjusted_combo["texts"][2]["text"] = "üíù –°–æ—Ö—Ä–∞–Ω–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
                
                combinations.append(adjusted_combo)
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Ç–µ–∫—Å—Ç–æ–≤: {e}")
        
        return combinations

    def export_text_elements_config(
        self, 
        text_combinations: List[Dict[str, Any]], 
        output_path: Path
    ) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ JSON."""
        
        try:
            config = {
                "version": "1.0",
                "generated_at": str(datetime.now()),
                "text_combinations": text_combinations,
                "platform_styles": self.platform_text_styles,
                "viral_patterns": self.viral_text_patterns
            }
            
            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(config, f, ensure_ascii=False, indent=2)
                
            self.logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {output_path}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")