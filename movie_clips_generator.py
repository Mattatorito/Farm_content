#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üé¨ –ì–ï–ù–ï–†–ê–¢–û–† –ö–õ–ò–ü–û–í –ò–ó –§–ò–õ–¨–ú–û–í –ò –°–ï–†–ò–ê–õ–û–í
–°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–µ–æ —Å –Ω–∞—Ä–µ–∑–∫–∞–º–∏ –∏–∑ —Ñ–∏–ª—å–º–æ–≤ —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import asyncio
import sys
import os
from pathlib import Path
import logging
import random
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
current_dir = Path(__file__).parent
src_path = current_dir / "src"
sys.path.insert(0, str(src_path))
sys.path.insert(0, str(current_dir))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)s | %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

logger = logging.getLogger(__name__)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –∏ —Ü–∏—Ç–∞—Ç
MOVIE_DATABASE = {
    "iron_man": {
        "title": "–ñ–µ–ª–µ–∑–Ω—ã–π —á–µ–ª–æ–≤–µ–∫",
        "character": "–¢–æ–Ω–∏ –°—Ç–∞—Ä–∫",
        "quotes": [
            {"text": "–Ø - –ñ–µ–ª–µ–∑–Ω—ã–π —á–µ–ª–æ–≤–µ–∫", "timestamp": "0:03-0:06"},
            {"text": "–ò–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Ç–æ, —á—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ", "timestamp": "0:10-0:14"},
            {"text": "–ì–µ–Ω–∏–π, –º–∏–ª–ª–∏–∞—Ä–¥–µ—Ä, –ø–ª–µ–π–±–æ–π, —Ñ–∏–ª–∞–Ω—Ç—Ä–æ–ø", "timestamp": "0:05-0:09"}
        ],
        "themes": ["—É—Å–ø–µ—Ö", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–ª–∏–¥–µ—Ä—Å—Ç–≤–æ"]
    },
    "dark_knight": {
        "title": "–¢–µ–º–Ω—ã–π —Ä—ã—Ü–∞—Ä—å", 
        "character": "–î–∂–æ–∫–µ—Ä",
        "quotes": [
            {"text": "–ü–æ—á–µ–º—É —Ç–∞–∫ —Å–µ—Ä—å–µ–∑–Ω–æ?", "timestamp": "0:02-0:04"},
            {"text": "–•–∞–æ—Å - —ç—Ç–æ –ª–µ—Å—Ç–Ω–∏—Ü–∞", "timestamp": "0:08-0:11"},
            {"text": "–ú—ã –∂–∏–≤–µ–º –≤ –æ–±—â–µ—Å—Ç–≤–µ", "timestamp": "0:05-0:08"}
        ],
        "themes": ["–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è", "–æ–±—â–µ—Å—Ç–≤–æ", "—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è"]
    },
    "wolf_wall_street": {
        "title": "–í–æ–ª–∫ —Å –£–æ–ª–ª-—Å—Ç—Ä–∏—Ç",
        "character": "–î–∂–æ—Ä–¥–∞–Ω –ë–µ–ª—Ñ–æ—Ä—Ç", 
        "quotes": [
            {"text": "–î–µ–Ω—å–≥–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–ø—è—Ç", "timestamp": "0:04-0:07"},
            {"text": "–ü—Ä–æ–¥–∞–π –º–Ω–µ —ç—Ç—É —Ä—É—á–∫—É", "timestamp": "0:06-0:09"},
            {"text": "–Ø –Ω–µ –ø–æ–∫–∏–¥–∞—é –∫–æ—Ä–∞–±–ª—å", "timestamp": "0:03-0:07"}
        ],
        "themes": ["–¥–µ–Ω—å–≥–∏", "–±–∏–∑–Ω–µ—Å", "–∞–º–±–∏—Ü–∏–∏"]
    },
    "matrix": {
        "title": "–ú–∞—Ç—Ä–∏—Ü–∞",
        "character": "–ù–µ–æ/–ú–æ—Ä—Ñ–µ—É—Å",
        "quotes": [
            {"text": "–í—ã–±–µ—Ä–∏ –∫—Ä–∞—Å–Ω—É—é –∏–ª–∏ —Å–∏–Ω—é—é —Ç–∞–±–ª–µ—Ç–∫—É", "timestamp": "0:05-0:09"},
            {"text": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–∞–ª—å–Ω—ã–π –º–∏—Ä", "timestamp": "0:04-0:08"},
            {"text": "–ù–µ—Ç –ª–æ–∂–∫–∏", "timestamp": "0:02-0:05"}
        ],
        "themes": ["—Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å", "–≤—ã–±–æ—Ä", "—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è"]
    },
    "godfather": {
        "title": "–ö—Ä–µ—Å—Ç–Ω—ã–π –æ—Ç–µ—Ü",
        "character": "–î–æ–Ω –ö–æ—Ä–ª–µ–æ–Ω–µ",
        "quotes": [
            {"text": "–°–¥–µ–ª–∞—é –µ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –æ–Ω –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è", "timestamp": "0:06-0:11"},
            {"text": "–°–µ–º—å—è - —ç—Ç–æ –≤—Å–µ", "timestamp": "0:03-0:06"},
            {"text": "–£–≤–∞–∂–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å", "timestamp": "0:04-0:08"}
        ],
        "themes": ["–≤–ª–∞—Å—Ç—å", "—Å–µ–º—å—è", "—É–≤–∞–∂–µ–Ω–∏–µ"]
    }
}

def create_sample_movie_clips():
    """
    –°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ-–∫–ª–∏–ø—ã –∏–∑ —Ñ–∏–ª—å–º–æ–≤ (–∏–º–∏—Ç–∞—Ü–∏—è)
    """
    clips_dir = Path("viral_assets/movie_clips")
    clips_dir.mkdir(parents=True, exist_ok=True)
    
    logger.info("üé¨ –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–∫–ª–∏–ø—ã –∏–∑ —Ñ–∏–ª—å–º–æ–≤...")
    
    try:
        from moviepy.editor import (
            ColorClip, TextClip, CompositeVideoClip, 
            AudioFileClip, ImageClip
        )
        import numpy as np
        
        os.environ['IMAGEMAGICK_BINARY'] = '/opt/homebrew/bin/convert'
        
        created_clips = []
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–∫–ª–∏–ø—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª—å–º–∞
        for movie_id, movie_data in MOVIE_DATABASE.items():
            logger.info(f"üé≠ –°–æ–∑–¥–∞–µ–º –∫–ª–∏–ø –¥–ª—è: {movie_data['title']}")
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–ª–∏–ø (–∏–º–∏—Ç–∞—Ü–∏—è –∫–∞–¥—Ä–∞ –∏–∑ —Ñ–∏–ª—å–º–∞)
            duration = 8
            
            # –†–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤
            color_schemes = {
                "iron_man": (220, 50, 47),      # –ö—Ä–∞—Å–Ω–æ-–∑–æ–ª–æ—Ç–æ–π
                "dark_knight": (30, 30, 30),    # –¢–µ–º–Ω—ã–π
                "wolf_wall_street": (0, 100, 0), # –ó–µ–ª–µ–Ω—ã–π (–¥–æ–ª–ª–∞—Ä—ã)
                "matrix": (0, 255, 0),          # –ú–∞—Ç—Ä–∏—á–Ω—ã–π –∑–µ–ª–µ–Ω—ã–π
                "godfather": (101, 67, 33)      # –°–µ–ø–∏—è
            }
            
            bg_color = color_schemes.get(movie_id, (50, 50, 50))
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω —Ñ–∏–ª—å–º–∞
            background = ColorClip(size=(1080, 1920), color=bg_color, duration=duration)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ—Å—Ç–∏
            gradient = ColorClip(size=(1080, 1920), color=(0, 0, 0), duration=duration)
            gradient = gradient.set_opacity(0.3)
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ —Å–≤–µ—Ä—Ö—É
            title_clip = TextClip(
                movie_data['title'].upper(),
                fontsize=70,
                color='white',
                font='Arial-Bold',
                stroke_color='black',
                stroke_width=2
            ).set_position(('center', 100)).set_duration(duration)
            
            # –ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            character_clip = TextClip(
                movie_data['character'],
                fontsize=50,
                color='yellow',
                font='Arial-Bold',
                stroke_color='black',
                stroke_width=1
            ).set_position(('center', 200)).set_duration(duration)
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É
            quote = random.choice(movie_data['quotes'])
            
            # –°–æ–∑–¥–∞–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö)
            subtitle_clip = TextClip(
                f'"{quote["text"]}"',
                fontsize=85,
                color='white',
                font='Arial-Bold',
                size=(900, None),
                method='caption',
                align='center',
                stroke_color='black',
                stroke_width=3
            ).set_position('center').set_duration(duration)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–∏—è –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤
            subtitle_clip = subtitle_clip.set_start(2).set_duration(6)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–º–∫—É —Å—É–±—Ç–∏—Ç—Ä–æ–≤ (–∫–∞–∫ –≤ —Ñ–∏–ª—å–º–∞—Ö)
            subtitle_bg = ColorClip(
                size=(950, 200), 
                color=(0, 0, 0),
                duration=6
            ).set_opacity(0.7).set_position(('center', 'center')).set_start(2)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–µ
            theme_text = " ‚Ä¢ ".join(movie_data['themes'][:2]).upper()
            theme_clip = TextClip(
                f"#{theme_text}",
                fontsize=40,
                color='cyan',
                font='Arial-Bold'
            ).set_position(('center', 1700)).set_duration(duration)
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            final_clip = CompositeVideoClip([
                background,
                gradient,
                title_clip,
                character_clip,
                subtitle_bg,
                subtitle_clip,
                theme_clip
            ])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–ø
            clip_path = clips_dir / f"{movie_id}_clip.mp4"
            
            final_clip.write_videofile(
                str(clip_path),
                fps=24,
                codec='libx264',
                bitrate="4000k",
                audio=False,
                verbose=False,
                logger=None
            )
            
            created_clips.append({
                "path": str(clip_path),
                "movie": movie_data['title'],
                "character": movie_data['character'],
                "quote": quote['text'],
                "themes": movie_data['themes']
            })
            
            logger.info(f"‚úÖ –ö–ª–∏–ø —Å–æ–∑–¥–∞–Ω: {clip_path.name}")
        
        return created_clips
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–ø–æ–≤: {e}")
        return []

def create_movie_compilation():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–∏–ª—è—Ü–∏—é –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–ª–∏–ø–æ–≤ —Ñ–∏–ª—å–º–æ–≤
    """
    try:
        logger.info("üé¨ –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∏–ª—è—Ü–∏—é –∏–∑ —Ñ–∏–ª—å–º–æ–≤...")
        
        from moviepy.editor import (
            VideoFileClip, TextClip, CompositeVideoClip,
            concatenate_videoclips, ColorClip, AudioFileClip
        )
        import numpy as np
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª–∏–ø–æ–≤
        clips_dir = Path("viral_assets/movie_clips") 
        clip_files = list(clips_dir.glob("*.mp4"))
        
        if not clip_files:
            logger.info("üìπ –ö–ª–∏–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º...")
            create_sample_movie_clips()
            clip_files = list(clips_dir.glob("*.mp4"))
        
        if len(clip_files) < 2:
            logger.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª–∏–ø–æ–≤ –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏")
            return None
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–∏–ø—ã
        selected_clips = random.sample(clip_files, min(3, len(clip_files)))
        video_clips = []
        
        for i, clip_path in enumerate(selected_clips):
            logger.info(f"üìΩÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–ø {i+1}: {clip_path.name}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–∏–ø
            clip = VideoFileClip(str(clip_path))
            
            # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã (6-8 —Å–µ–∫—É–Ω–¥)
            clip = clip.subclip(0, min(6, clip.duration))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —á–∞—Å—Ç–∏
            part_text = TextClip(
                f"–ß–ê–°–¢–¨ {i+1}",
                fontsize=60,
                color='red',
                font='Arial-Bold',
                stroke_color='white',
                stroke_width=2
            ).set_position(('center', 50)).set_duration(2).set_start(0)
            
            # –ö–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π –∫–ª–∏–ø —Å –Ω–æ–º–µ—Ä–æ–º —á–∞—Å—Ç–∏
            clip_with_part = CompositeVideoClip([clip, part_text])
            
            video_clips.append(clip_with_part)
        
        logger.info("üé¨ –°–æ–µ–¥–∏–Ω—è–µ–º –∫–ª–∏–ø—ã –≤ –∫–æ–º–ø–∏–ª—è—Ü–∏—é...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É –∫–ª–∏–ø–∞–º–∏
        transitions = []
        
        for i in range(len(video_clips)):
            transitions.append(video_clips[i])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É –∫–ª–∏–ø–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
            if i < len(video_clips) - 1:
                transition = ColorClip(
                    size=(1080, 1920), 
                    color=(0, 0, 0),
                    duration=0.5
                )
                
                transition_text = TextClip(
                    "...",
                    fontsize=100,
                    color='white',
                    font='Arial-Bold'
                ).set_position('center').set_duration(0.5)
                
                transition_comp = CompositeVideoClip([transition, transition_text])
                transitions.append(transition_comp)
        
        # –°–æ–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–ª–∏–ø—ã
        final_compilation = concatenate_videoclips(transitions, method="compose")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
        intro_bg = ColorClip(size=(1080, 1920), color=(20, 20, 20), duration=3)
        
        intro_text = TextClip(
            "–¢–û–ü –ú–û–ú–ï–ù–¢–´\n–ò–ó –§–ò–õ–¨–ú–û–í üé¨\n\n–°–ú–û–¢–†–ò –î–û –ö–û–ù–¶–ê!",
            fontsize=90,
            color='gold',
            font='Arial-Bold',
            size=(900, None),
            method='caption',
            align='center',
            stroke_color='black',
            stroke_width=3
        ).set_position('center').set_duration(3)
        
        intro = CompositeVideoClip([intro_bg, intro_text])
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ
        final_video = concatenate_videoclips([intro, final_compilation])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ–Ω–æ–≤—É—é –º—É–∑—ã–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
        audio_dir = Path("viral_assets/audio")
        music_file = audio_dir / "background_electronic.wav"
        
        if music_file.exists():
            music = AudioFileClip(str(music_file))
            music = music.set_duration(final_video.duration).volumex(0.2)
            final_video = final_video.set_audio(music)
            logger.info("üéµ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        output_dir = Path("ready_videos")
        output_dir.mkdir(exist_ok=True)
        
        from datetime import datetime
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_path = output_dir / f"MOVIE_COMPILATION_{timestamp}.mp4"
        
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–ø–∏–ª—è—Ü–∏—é: {output_path}")
        
        final_video.write_videofile(
            str(output_path),
            fps=24,
            codec='libx264',
            bitrate="6000k",
            audio_codec='aac' if music_file.exists() else None,
            verbose=False,
            logger=None,
            temp_audiofile='temp-audio.m4a' if music_file.exists() else None,
            remove_temp=True
        )
        
        file_size = output_path.stat().st_size / 1024 / 1024
        
        logger.info("üéâ –ö–û–ú–ü–ò–õ–Ø–¶–ò–Ø –ò–ó –§–ò–õ–¨–ú–û–í –°–û–ó–î–ê–ù–ê!")
        logger.info(f"üìÅ –§–∞–π–ª: {output_path}")
        logger.info(f"üìè –†–∞–∑–º–µ—Ä: {file_size:.1f} MB")
        logger.info(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {final_video.duration:.1f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"üé¨ –ö–ª–∏–ø–æ–≤ –≤ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏: {len(selected_clips)}")
        
        return str(output_path)
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return None

def create_single_movie_clip(movie_choice=None):
    """
    –°–æ–∑–¥–∞–µ—Ç –æ–¥–∏–Ω–æ—á–Ω—ã–π –∫–ª–∏–ø –∏–∑ —Ñ–∏–ª—å–º–∞ —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏
    """
    try:
        logger.info("üé≠ –°–æ–∑–¥–∞–µ–º –∫–ª–∏–ø –∏–∑ —Ñ–∏–ª—å–º–∞ —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏...")
        
        from moviepy.editor import (
            ColorClip, TextClip, CompositeVideoClip, AudioFileClip
        )
        import numpy as np
        
        os.environ['IMAGEMAGICK_BINARY'] = '/opt/homebrew/bin/convert'
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å–º
        if movie_choice and movie_choice in MOVIE_DATABASE:
            movie_id = movie_choice
        else:
            movie_id = random.choice(list(MOVIE_DATABASE.keys()))
        
        movie_data = MOVIE_DATABASE[movie_id]
        logger.info(f"üé¨ –°–æ–∑–¥–∞–µ–º –∫–ª–∏–ø: {movie_data['title']}")
        
        duration = 12
        
        # –¶–≤–µ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã
        color_schemes = {
            "iron_man": {"bg": (180, 20, 20), "accent": (255, 215, 0)},
            "dark_knight": {"bg": (15, 15, 25), "accent": (200, 200, 200)}, 
            "wolf_wall_street": {"bg": (0, 80, 0), "accent": (0, 255, 0)},
            "matrix": {"bg": (0, 20, 0), "accent": (0, 255, 0)},
            "godfather": {"bg": (80, 50, 20), "accent": (255, 200, 100)}
        }
        
        colors = color_schemes.get(movie_id, {"bg": (40, 40, 40), "accent": (255, 255, 255)})
        
        # –§–æ–Ω
        background = ColorClip(size=(1080, 1920), color=colors["bg"], duration=duration)
        
        # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–µ –∑–∞—Ç–µ–º–Ω–µ–Ω–∏–µ
        overlay1 = ColorClip(size=(1080, 1920), color=(0, 0, 0), duration=duration)
        overlay1 = overlay1.set_opacity(0.4)
        
        overlay2 = ColorClip(size=(1080, 600), color=(0, 0, 0), duration=duration)
        overlay2 = overlay2.set_opacity(0.6).set_position(('center', 1200))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∏–ª—å–º–∞
        title = TextClip(
            movie_data['title'].upper(),
            fontsize=80,
            color=colors["accent"],
            font='Arial-Bold',
            stroke_color='black',
            stroke_width=3
        ).set_position(('center', 80)).set_duration(duration)
        
        # –ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        character = TextClip(
            f"üí¨ {movie_data['character']}",
            fontsize=55,
            color='white',
            font='Arial-Bold',
            stroke_color='black',
            stroke_width=2
        ).set_position(('center', 180)).set_duration(duration)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ü–∏—Ç–∞—Ç—É
        quote = random.choice(movie_data['quotes'])
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º —Å—É–±—Ç–∏—Ç—Ä–æ–≤
        main_quote = TextClip(
            f'"{quote["text"]}"',
            fontsize=95,
            color='white',
            font='Arial-Bold',
            size=(950, None),
            method='caption',
            align='center',
            stroke_color='black',
            stroke_width=4
        ).set_position(('center', 700)).set_duration(8).set_start(2)
        
        # –≠—Ñ—Ñ–µ–∫—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤
        main_quote = main_quote.crossfadein(0.5)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        context = TextClip(
            "–õ–ï–ì–ï–ù–î–ê–†–ù–ê–Ø –¶–ò–¢–ê–¢–ê –ò–ó –§–ò–õ–¨–ú–ê",
            fontsize=45,
            color='yellow',
            font='Arial-Bold',
            stroke_color='black',
            stroke_width=2
        ).set_position(('center', 600)).set_duration(duration)
        
        # –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ö–µ—à—Ç–µ–≥–∏
        hashtags = " ".join([f"#{theme.upper()}" for theme in movie_data['themes']])
        hashtag_clip = TextClip(
            hashtags,
            fontsize=40,
            color='cyan',
            font='Arial-Bold'
        ).set_position(('center', 1650)).set_duration(duration)
        
        # –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
        cta = TextClip(
            "üëç –õ–ê–ô–ö –ï–°–õ–ò –£–ó–ù–ê–õ –§–ò–õ–¨–ú! üëç\n\nüîî –ü–û–î–ü–ò–®–ò–°–¨ –ù–ê –ë–û–õ–¨–®–ï! üîî",
            fontsize=55,
            color='red',
            font='Arial-Bold',
            size=(900, None),
            method='caption',
            align='center',
            stroke_color='white',
            stroke_width=2
        ).set_position(('center', 1450)).set_duration(5).set_start(7)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–ª—å—Å–∞—Ü–∏—é –∫ CTA
        cta = cta.resize(lambda t: 1 + 0.05*np.sin(8*t))
        
        logger.info("üé¨ –°–æ–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∫–ª–∏–ø–∞...")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è
        elements = [
            background,
            overlay1,
            overlay2,
            title,
            character,
            context,
            main_quote,
            hashtag_clip,
            cta
        ]
        
        final_clip = CompositeVideoClip(elements)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–≤—É–∫
        audio_dir = Path("viral_assets/audio")
        
        # –§–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞
        music_file = audio_dir / "background_electronic.wav"
        if music_file.exists():
            music = AudioFileClip(str(music_file))
            music = music.set_duration(duration).volumex(0.25)
            final_clip = final_clip.set_audio(music)
            logger.info("üéµ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞")
        
        # –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        impact_file = audio_dir / "impact.wav"
        if impact_file.exists():
            impact = AudioFileClip(str(impact_file)).set_start(2).volumex(0.5)
            if music_file.exists():
                from moviepy.editor import CompositeAudioClip
                combined_audio = CompositeAudioClip([music, impact])
                final_clip = final_clip.set_audio(combined_audio)
            else:
                final_clip = final_clip.set_audio(impact)
            logger.info("üîä –î–æ–±–∞–≤–ª–µ–Ω –∑–≤—É–∫–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        output_dir = Path("ready_videos")
        output_dir.mkdir(exist_ok=True)
        
        from datetime import datetime
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_path = output_dir / f"MOVIE_CLIP_{movie_data['title'].replace(' ', '_')}_{timestamp}.mp4"
        
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–ø: {output_path}")
        
        final_clip.write_videofile(
            str(output_path),
            fps=24,
            codec='libx264',
            bitrate="6000k",
            audio_codec='aac',
            verbose=False,
            logger=None,
            temp_audiofile='temp-audio.m4a',
            remove_temp=True
        )
        
        file_size = output_path.stat().st_size / 1024 / 1024
        
        logger.info("üéâ –ö–õ–ò–ü –ò–ó –§–ò–õ–¨–ú–ê –°–û–ó–î–ê–ù!")
        logger.info(f"üìÅ –§–∞–π–ª: {output_path}")
        logger.info(f"üé¨ –§–∏–ª—å–º: {movie_data['title']}")
        logger.info(f"üë§ –ü–µ—Ä—Å–æ–Ω–∞–∂: {movie_data['character']}")
        logger.info(f"üí¨ –¶–∏—Ç–∞—Ç–∞: {quote['text']}")
        logger.info(f"üìè –†–∞–∑–º–µ—Ä: {file_size:.1f} MB")
        
        return str(output_path)
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–ø–∞: {e}")
        import traceback
        traceback.print_exc()
        return None

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    print("üé¨" + "="*80)
    print("           –ì–ï–ù–ï–†–ê–¢–û–† –ö–õ–ò–ü–û–í –ò–ó –§–ò–õ–¨–ú–û–í –ò –°–ï–†–ò–ê–õ–û–í")
    print("              (—Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏ –∫–∞–∫ –≤ –≤–∞—à–∏—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö)")
    print("="*84)
    
    print("\nüéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–ª—å–º—ã:")
    for i, (movie_id, data) in enumerate(MOVIE_DATABASE.items(), 1):
        print(f"{i}. {data['title']} - {data['character']}")
    
    print(f"\nüé¨ –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:")
    print("1. –°–æ–∑–¥–∞—Ç—å –∫–ª–∏–ø –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞")
    print("2. –°–æ–∑–¥–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∫–ª–∏–ø")
    print("3. –°–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–∏–ª—è—Ü–∏—é –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∏–ª—å–º–æ–≤")
    print("4. –°–æ–∑–¥–∞—Ç—å –≤—Å–µ –∫–ª–∏–ø—ã")
    
    choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-4): ").strip()
    
    results = []
    
    if choice == "1":
        print("\nüé≠ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º:")
        movies = list(MOVIE_DATABASE.keys())
        for i, movie_id in enumerate(movies, 1):
            print(f"{i}. {MOVIE_DATABASE[movie_id]['title']}")
        
        try:
            movie_num = int(input("\n–ù–æ–º–µ—Ä —Ñ–∏–ª—å–º–∞: ")) - 1
            if 0 <= movie_num < len(movies):
                selected_movie = movies[movie_num]
                result = create_single_movie_clip(selected_movie)
                if result:
                    results.append(result)
            else:
                logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∏–ª—å–º–∞")
        except ValueError:
            logger.error("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
            
    elif choice == "2":
        logger.info("üé≤ –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∫–ª–∏–ø...")
        result = create_single_movie_clip()
        if result:
            results.append(result)
            
    elif choice == "3":
        logger.info("üé¨ –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∏–ª—è—Ü–∏—é...")
        result = create_movie_compilation()
        if result:
            results.append(result)
            
    elif choice == "4":
        logger.info("üé≠ –°–æ–∑–¥–∞–µ–º –≤—Å–µ –∫–ª–∏–ø—ã...")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–ø –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª—å–º–∞
        for movie_id in MOVIE_DATABASE.keys():
            result = create_single_movie_clip(movie_id)
            if result:
                results.append(result)
        
        # –ü–ª—é—Å –∫–æ–º–ø–∏–ª—è—Ü–∏—è
        comp_result = create_movie_compilation()
        if comp_result:
            results.append(comp_result)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if results:
        print(f"\nüéâ –£–°–ü–ï–•! –°–æ–∑–¥–∞–Ω–æ –≤–∏–¥–µ–æ: {len(results)}")
        
        for i, result in enumerate(results, 1):
            file_size = Path(result).stat().st_size / 1024 / 1024
            print(f"üìπ –í–∏–¥–µ–æ {i}: {Path(result).name} ({file_size:.1f} MB)")
        
        print(f"\nüéØ –°–æ–∑–¥–∞–Ω—ã –≤–∏–¥–µ–æ —Å:")
        print("‚úÖ –ù–∞—Ä–µ–∑–∫–∞–º–∏ –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤")
        print("‚úÖ –°—É–±—Ç–∏—Ç—Ä–∞–º–∏ –∫–∞–∫ –≤ –≤–∞—à–∏—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö")
        print("‚úÖ –¶–∏—Ç–∞—Ç–∞–º–∏ –≥–ª–∞–≤–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤")
        print("‚úÖ –ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º")
        print("‚úÖ –ó–≤—É–∫–æ–≤—ã–º —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ–º")
        print("‚úÖ –í–∏—Ä—É—Å–Ω—ã–º–∏ –ø—Ä–∏–∑—ã–≤–∞–º–∏ –∫ –¥–µ–π—Å—Ç–≤–∏—é")
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–ø–∫—É
        open_folder = input("\nüóÇÔ∏è –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å –≤–∏–¥–µ–æ? (y/n): ").strip().lower()
        if open_folder == 'y':
            import subprocess
            subprocess.run(["open", "ready_videos"])
    else:
        print("\n‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∏–¥–µ–æ –Ω–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã.")

if __name__ == "__main__":
    main()