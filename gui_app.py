#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üñ•Ô∏è –í–ò–†–£–°–ù–ê–Ø –ö–û–ù–¢–ï–ù–¢-–ú–ê–®–ò–ù–ê 2025 - GUI –ü–†–ò–õ–û–ñ–ï–ù–ò–ï
=================================================

–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
—Å —Ç—Ä–µ–º—è –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ä–µ–∂–∏–º–∞–º–∏ —Ä–∞–±–æ—Ç—ã:

1. üì∫ –ù–ê–†–ï–ó–ö–ê –ü–û URL - –í—Å—Ç–∞–≤–ª—è–µ—à—å —Å—Å—ã–ª–∫—É –∏ –ø–æ–ª—É—á–∞–µ—à—å –Ω–∞—Ä–µ–∑–∞–Ω–Ω—ã–µ YouTube Shorts
2. üî• –ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–û–í - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ç–æ–ø–æ–≤—ã—Ö –≤–∏–¥–µ–æ —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
3. ü§ñ AI –ì–ï–ù–ï–†–ê–¶–ò–Ø - –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ç—Ä–µ–Ω–¥–æ–≤

–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: PyQt6, asyncio, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Material Design
"""

import asyncio
import json
import os
from datetime import datetime
import sys
import threading
from dataclasses import dataclass
from datetime import datetime, timedelta
from pathlib import Path
from typing import Any, Dict, List, Optional

from PyQt6.QtCore import (
    QEasingCurve,
    QObject,
    QPropertyAnimation,
    QRect,
    QSize,
    Qt,
    QThread,
    QTimer,
    QUrl,
    pyqtSignal,
    pyqtSlot,
)
from PyQt6.QtGui import (
    QBrush,
    QColor,
    QDesktopServices,
    QFont,
    QIcon,
    QLinearGradient,
    QMovie,
    QPainter,
    QPalette,
    QPixmap,
)

# PyQt6 imports
from PyQt6.QtWidgets import (
    QApplication,
    QCheckBox,
    QComboBox,
    QFileDialog,
    QFrame,
    QGridLayout,
    QGroupBox,
    QHBoxLayout,
    QLabel,
    QLineEdit,
    QListWidget,
    QListWidgetItem,
    QMainWindow,
    QMessageBox,
    QProgressBar,
    QPushButton,
    QScrollArea,
    QSlider,
    QSpinBox,
    QSplitter,
    QStackedWidget,
    QTableWidget,
    QTableWidgetItem,
    QTabWidget,
    QTextEdit,
    QVBoxLayout,
    QWidget,
)

# –ù–∞—à–∏ –º–æ–¥—É–ª–∏
sys.path.insert(0, str(Path(__file__).parent / "src"))
try:
    from farm_content.utils import ViralClipExtractor
    from farm_content.services.url_processor import URLProcessor
    from farm_content.core import get_logger
    SYSTEM_AVAILABLE = True
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    SYSTEM_AVAILABLE = False


@dataclass
class ProcessingJob:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞—á –æ–±—Ä–∞–±–æ—Ç–∫–∏"""

    job_id: str
    mode: str  # 'url', 'trends', 'ai'
    status: str  # 'pending', 'processing', 'completed', 'failed'
    input_data: Dict
    progress: int = 0
    result: Optional[Dict] = None
    error: Optional[str] = None
    created_at: datetime = None

    def __post_init__(self):
        if self.created_at is None:
            self.created_at = datetime.now()


class ProcessingThread(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ –≤ —Ñ–æ–Ω–µ"""

    progress_updated = pyqtSignal(str, int, str)  # job_id, progress, message
    job_completed = pyqtSignal(str, dict)  # job_id, result
    job_failed = pyqtSignal(str, str)  # job_id, error

    def __init__(self, job: ProcessingJob, parent=None):
        super().__init__(parent)
        self.job = job
        self.extractor = ViralClipExtractor() if SYSTEM_AVAILABLE else None

    def run(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞"""
        try:
            self.progress_updated.emit(self.job.job_id, 10, "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")

            if self.job.mode == "url":
                result = self._process_url_mode()
            elif self.job.mode == "trends":
                result = self._process_trends_mode()
            elif self.job.mode == "ai":
                result = self._process_ai_mode()
            else:
                raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: {self.job.mode}")

            self.job_completed.emit(self.job.job_id, result)

        except Exception as e:
            self.job_failed.emit(self.job.job_id, str(e))

    def _process_url_mode(self) -> Dict:
        """–†–µ–∂–∏–º 1: –ù–∞—Ä–µ–∑–∫–∞ –≤–∏–¥–µ–æ –ø–æ URL"""
        try:
            if not SYSTEM_AVAILABLE or not self.extractor:
                return {"success": False, "error": "–°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}

            # –ü—Ä–æ–≥—Ä–µ—Å—Å
            def progress_callback(progress, message):
                self.progress_updated.emit(self.job.job_id, progress, message)

            url = self.job.input_data.get("url")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º URLProcessor –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            processor = URLProcessor()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤ –ø–æ—Ç–æ–∫–µ)
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
            self.progress_updated.emit(self.job.job_id, 20, "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ...")
            video_path = loop.run_until_complete(processor.download_video(url))
            
            if not video_path:
                return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ"}

            # –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—É—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            self.progress_updated.emit(self.job.job_id, 40, "–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
            result = loop.run_until_complete(
                self.extractor.create_perfect_viral_content(
                    video_path=video_path,
                    target_platforms=["tiktok", "instagram_reels", "youtube_shorts"],
                    use_trend_analysis=True
                )
            )
            
            loop.close()
            return {"success": True, "result": result}

        except Exception as e:
            return {"success": False, "error": str(e)}

    def _process_trends_mode(self) -> Dict:
        """–†–µ–∂–∏–º 2: –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""
        try:
            if not SYSTEM_AVAILABLE or not self.extractor:
                return {"success": False, "error": "–°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}

            # –ü—Ä–æ–≥—Ä–µ—Å—Å
            def progress_callback(progress, message):
                self.progress_updated.emit(self.job.job_id, progress, message)

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã
            self.progress_updated.emit(self.job.job_id, 30, "–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤...")
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –≤–∏–¥–µ–æ
            # –î–ª—è –¥–µ–º–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            return {"success": True, "message": "–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω"}

        except Exception as e:
            return {"success": False, "error": str(e)}

    def _process_ai_mode(self) -> Dict:
        """–†–µ–∂–∏–º 3: AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ"""
        try:
            if not SYSTEM_AVAILABLE or not self.extractor:
                return {"success": False, "error": "–°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}

            # –ü—Ä–æ–≥—Ä–µ—Å—Å
            def progress_callback(progress, message):
                self.progress_updated.emit(self.job.job_id, progress, message)

            # AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
            self.progress_updated.emit(self.job.job_id, 50, "AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            # –î–ª—è –¥–µ–º–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            return {"success": True, "message": "AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"}

        except Exception as e:
            return {"success": False, "error": str(e)}


class ViralContentGUI(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    def __init__(self):
        super().__init__()
        self.jobs = {}  # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.setup_ui()
        self.setup_connections()
        self.apply_modern_style()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle("üî• –í–∏—Ä—É—Å–Ω–∞—è –ö–æ–Ω—Ç–µ–Ω—Ç-–ú–∞—à–∏–Ω–∞ 2025")
        self.setGeometry(100, 100, 1400, 900)
        self.setMinimumSize(1200, 800)

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        # –ì–ª–∞–≤–Ω–∞—è –∫–æ–º–ø–æ–Ω–æ–≤–∫–∞
        main_layout = QHBoxLayout(central_widget)

        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–Ω–µ–ª–∏
        self.create_sidebar()
        self.create_main_content()
        self.create_status_panel()

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–∞–≤–Ω—ã–π layout
        main_layout.addWidget(self.sidebar, 1)
        main_layout.addWidget(self.main_content, 3)
        main_layout.addWidget(self.status_panel, 1)

    def create_sidebar(self):
        """–°–æ–∑–¥–∞–µ—Ç –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å —Å —Ä–µ–∂–∏–º–∞–º–∏"""
        self.sidebar = QFrame()
        self.sidebar.setFrameStyle(QFrame.Shape.StyledPanel)
        sidebar_layout = QVBoxLayout(self.sidebar)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("üî• –†–ï–ñ–ò–ú–´ –†–ê–ë–û–¢–´")
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title.setFont(QFont("Arial", 14, QFont.Weight.Bold))
        sidebar_layout.addWidget(title)

        # –ö–Ω–æ–ø–∫–∏ —Ä–µ–∂–∏–º–æ–≤
        self.mode_buttons = {}

        modes = [
            ("url", "üì∫ –ù–ê–†–ï–ó–ö–ê –ü–û URL", "–í—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É ‚Üí –ø–æ–ª—É—á–∏ –∫–ª–∏–ø—ã"),
            ("trends", "üî• –ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–û–í", "–ù–∞–π–¥–∏ —Ç–æ–ø ‚Üí –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–π ‚Üí –æ–ø—É–±–ª–∏–∫—É–π"),
            ("ai", "ü§ñ AI –ì–ï–ù–ï–†–ê–¶–ò–Ø", "–ê–Ω–∞–ª–∏–∑ ‚Üí AI —Å–æ–∑–¥–∞–Ω–∏–µ ‚Üí –ø—É–±–ª–∏–∫–∞—Ü–∏—è"),
        ]

        for mode_id, title, description in modes:
            btn = QPushButton(title)
            btn.setMinimumHeight(80)
            btn.setFont(QFont("Arial", 12, QFont.Weight.Bold))
            btn.clicked.connect(lambda checked, m=mode_id: self.switch_mode(m))
            self.mode_buttons[mode_id] = btn
            sidebar_layout.addWidget(btn)

            desc_label = QLabel(description)
            desc_label.setWordWrap(True)
            desc_label.setFont(QFont("Arial", 9))
            desc_label.setStyleSheet("color: #666; padding: 5px;")
            sidebar_layout.addWidget(desc_label)

        sidebar_layout.addStretch()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_btn = QPushButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        settings_btn.clicked.connect(self.show_settings)
        sidebar_layout.addWidget(settings_btn)

    def create_main_content(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –æ–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        self.main_content = QFrame()
        self.main_content.setFrameStyle(QFrame.Shape.StyledPanel)
        main_layout = QVBoxLayout(self.main_content)

        # –°—Ç–µ–∫ –≤–∏–¥–∂–µ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
        self.mode_stack = QStackedWidget()
        main_layout.addWidget(self.mode_stack)

        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∂–∏–º–∞
        self.create_url_mode_widget()
        self.create_trends_mode_widget()
        self.create_ai_mode_widget()

        # –û–±–ª–∞—Å—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.create_progress_area()
        main_layout.addWidget(self.progress_area)

    def create_url_mode_widget(self):
        """–í–∏–¥–∂–µ—Ç —Ä–µ–∂–∏–º–∞ –Ω–∞—Ä–µ–∑–∫–∏ –ø–æ URL"""
        widget = QWidget()
        layout = QVBoxLayout(widget)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∂–∏–º–∞
        title = QLabel("üì∫ –†–ï–ñ–ò–ú –ù–ê–†–ï–ó–ö–ò –ü–û URL")
        title.setFont(QFont("Arial", 16, QFont.Weight.Bold))
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(title)

        # –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞
        form_group = QGroupBox("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—Ä–µ–∑–∫–∏")
        form_layout = QVBoxLayout(form_group)

        # URL –≤–≤–æ–¥
        url_layout = QHBoxLayout()
        url_layout.addWidget(QLabel("YouTube URL:"))
        self.url_input = QLineEdit()
        self.url_input.setPlaceholderText("–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ...")
        url_layout.addWidget(self.url_input)
        form_layout.addLayout(url_layout)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞—Ä–µ–∑–∫–∏
        settings_layout = QGridLayout()

        settings_layout.addWidget(QLabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–ø–æ–≤:"), 0, 0)
        self.clips_count_spin = QSpinBox()
        self.clips_count_spin.setRange(1, 10)
        self.clips_count_spin.setValue(5)
        settings_layout.addWidget(self.clips_count_spin, 0, 1)

        settings_layout.addWidget(QLabel("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–ª–∏–ø–∞ (—Å–µ–∫):"), 1, 0)
        self.clip_duration_spin = QSpinBox()
        self.clip_duration_spin.setRange(15, 180)
        self.clip_duration_spin.setValue(60)
        settings_layout.addWidget(self.clip_duration_spin, 1, 1)

        form_layout.addLayout(settings_layout)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
        self.url_start_btn = QPushButton("üöÄ –ù–ê–ß–ê–¢–¨ –ù–ê–†–ï–ó–ö–£")
        self.url_start_btn.setMinimumHeight(50)
        self.url_start_btn.setFont(QFont("Arial", 12, QFont.Weight.Bold))
        self.url_start_btn.clicked.connect(self.start_url_processing)
        form_layout.addWidget(self.url_start_btn)

        layout.addWidget(form_group)
        layout.addStretch()

        self.mode_stack.addWidget(widget)

    def create_trends_mode_widget(self):
        """–í–∏–¥–∂–µ—Ç —Ä–µ–∂–∏–º–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤"""
        widget = QWidget()
        layout = QVBoxLayout(widget)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∂–∏–º–∞
        title = QLabel("üî• –†–ï–ñ–ò–ú –ê–ù–ê–õ–ò–ó–ê –¢–†–ï–ù–î–û–í")
        title.setFont(QFont("Arial", 16, QFont.Weight.Bold))
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(title)

        # –§–æ—Ä–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        form_group = QGroupBox("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")
        form_layout = QVBoxLayout(form_group)

        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç—Ä–µ–Ω–¥–æ–≤
        cat_layout = QHBoxLayout()
        cat_layout.addWidget(QLabel("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:"))
        self.category_combo = QComboBox()
        self.category_combo.addItems(
            [
                "gaming",
                "entertainment",
                "music",
                "sports",
                "technology",
                "comedy",
                "lifestyle",
                "education",
            ]
        )
        cat_layout.addWidget(self.category_combo)
        form_layout.addLayout(cat_layout)

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        videos_layout = QHBoxLayout()
        videos_layout.addWidget(QLabel("–í–∏–¥–µ–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:"))
        self.trends_videos_spin = QSpinBox()
        self.trends_videos_spin.setRange(1, 10)
        self.trends_videos_spin.setValue(3)
        videos_layout.addWidget(self.trends_videos_spin)
        form_layout.addLayout(videos_layout)

        # –û–ø—Ü–∏–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
        mod_group = QGroupBox("–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        mod_layout = QVBoxLayout(mod_group)

        self.add_subtitles_cb = QCheckBox("–î–æ–±–∞–≤–∏—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã")
        self.add_subtitles_cb.setChecked(True)
        mod_layout.addWidget(self.add_subtitles_cb)

        self.change_music_cb = QCheckBox("–ò–∑–º–µ–Ω–∏—Ç—å –º—É–∑—ã–∫—É")
        self.change_music_cb.setChecked(True)
        mod_layout.addWidget(self.change_music_cb)

        self.add_effects_cb = QCheckBox("–î–æ–±–∞–≤–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã")
        mod_layout.addWidget(self.add_effects_cb)

        form_layout.addWidget(mod_group)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
        self.trends_start_btn = QPushButton("üî• –ó–ê–ü–£–°–¢–ò–¢–¨ –ê–ù–ê–õ–ò–ó")
        self.trends_start_btn.setMinimumHeight(50)
        self.trends_start_btn.setFont(QFont("Arial", 12, QFont.Weight.Bold))
        self.trends_start_btn.clicked.connect(self.start_trends_processing)
        form_layout.addWidget(self.trends_start_btn)

        layout.addWidget(form_group)
        layout.addStretch()

        self.mode_stack.addWidget(widget)

    def create_ai_mode_widget(self):
        """–í–∏–¥–∂–µ—Ç —Ä–µ–∂–∏–º–∞ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        widget = QWidget()
        layout = QVBoxLayout(widget)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∂–∏–º–∞
        title = QLabel("ü§ñ –†–ï–ñ–ò–ú AI –ì–ï–ù–ï–†–ê–¶–ò–ò")
        title.setFont(QFont("Arial", 16, QFont.Weight.Bold))
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(title)

        # –§–æ—Ä–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ AI
        form_group = QGroupBox("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        form_layout = QVBoxLayout(form_group)

        # –¢–µ–º–∞—Ç–∏–∫–∞
        theme_layout = QHBoxLayout()
        theme_layout.addWidget(QLabel("–¢–µ–º–∞—Ç–∏–∫–∞:"))
        self.ai_theme_combo = QComboBox()
        self.ai_theme_combo.addItems(
            [
                "mind_blowing_facts",
                "mystery_stories",
                "life_hacks",
                "motivational_stories",
                "science_facts",
                "history_secrets",
                "future_predictions",
                "amazing_nature",
                "space_facts",
            ]
        )
        theme_layout.addWidget(self.ai_theme_combo)
        form_layout.addLayout(theme_layout)

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ
        ai_videos_layout = QHBoxLayout()
        ai_videos_layout.addWidget(QLabel("–í–∏–¥–µ–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:"))
        self.ai_videos_spin = QSpinBox()
        self.ai_videos_spin.setRange(1, 5)
        self.ai_videos_spin.setValue(1)
        ai_videos_layout.addWidget(self.ai_videos_spin)
        form_layout.addLayout(ai_videos_layout)

        # AI —Å–µ—Ä–≤–∏—Å—ã
        ai_group = QGroupBox("AI –°–µ—Ä–≤–∏—Å—ã")
        ai_layout = QVBoxLayout(ai_group)

        self.runway_cb = QCheckBox("RunwayML (–≤–∏–¥–µ–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è)")
        self.runway_cb.setChecked(True)
        ai_layout.addWidget(self.runway_cb)

        self.leonardo_cb = QCheckBox("Leonardo AI (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)")
        ai_layout.addWidget(self.leonardo_cb)

        self.openai_cb = QCheckBox("OpenAI (—Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏ –≥–æ–ª–æ—Å)")
        self.openai_cb.setChecked(True)
        ai_layout.addWidget(self.openai_cb)

        form_layout.addWidget(ai_group)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
        self.ai_start_btn = QPushButton("ü§ñ –ó–ê–ü–£–°–¢–ò–¢–¨ AI")
        self.ai_start_btn.setMinimumHeight(50)
        self.ai_start_btn.setFont(QFont("Arial", 12, QFont.Weight.Bold))
        self.ai_start_btn.clicked.connect(self.start_ai_processing)
        form_layout.addWidget(self.ai_start_btn)

        layout.addWidget(form_group)
        layout.addStretch()

        self.mode_stack.addWidget(widget)

    def create_progress_area(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±–ª–∞—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.progress_area = QGroupBox("üîÑ –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        layout = QVBoxLayout(self.progress_area)

        # –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        self.main_progress = QProgressBar()
        self.main_progress.setVisible(False)
        layout.addWidget(self.main_progress)

        # –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
        self.status_text = QLabel("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.status_text.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(self.status_text)

        # –õ–æ–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.activity_log = QTextEdit()
        self.activity_log.setMaximumHeight(150)
        self.activity_log.setReadOnly(True)
        layout.addWidget(self.activity_log)

    def create_status_panel(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        self.status_panel = QFrame()
        self.status_panel.setFrameStyle(QFrame.Shape.StyledPanel)
        layout = QVBoxLayout(self.status_panel)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title.setFont(QFont("Arial", 14, QFont.Weight.Bold))
        layout.addWidget(title)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_group = QGroupBox("–°–µ–≥–æ–¥–Ω—è")
        stats_layout = QVBoxLayout(stats_group)

        self.videos_created_label = QLabel("–°–æ–∑–¥–∞–Ω–æ –≤–∏–¥–µ–æ: 0")
        stats_layout.addWidget(self.videos_created_label)

        self.videos_uploaded_label = QLabel("–ó–∞–≥—Ä—É–∂–µ–Ω–æ: 0")
        stats_layout.addWidget(self.videos_uploaded_label)

        self.success_rate_label = QLabel("–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: 0%")
        stats_layout.addWidget(self.success_rate_label)

        layout.addWidget(stats_group)

        # –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞–Ω–∏–π
        history_group = QGroupBox("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞–Ω–∏–π")
        history_layout = QVBoxLayout(history_group)

        self.jobs_list = QListWidget()
        history_layout.addWidget(self.jobs_list)

        layout.addWidget(history_group)

        layout.addStretch()

        # –°—Å—ã–ª–∫–∏
        links_group = QGroupBox("üîó –°—Å—ã–ª–∫–∏")
        links_layout = QVBoxLayout(links_group)

        youtube_btn = QPushButton("üì∫ YouTube Studio")
        youtube_btn.clicked.connect(
            lambda: QDesktopServices.openUrl(QUrl("https://studio.youtube.com"))
        )
        links_layout.addWidget(youtube_btn)

        analytics_btn = QPushButton("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
        links_layout.addWidget(analytics_btn)

        layout.addWidget(links_group)

    def setup_connections(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å–∏–≥–Ω–∞–ª–æ–≤"""
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.switch_mode("url")

    def apply_modern_style(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å Material Design"""
        style = """
        QMainWindow {
            background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                stop:0 #1e3c72, stop:1 #2a5298);
        }

        QFrame {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 10px;
            margin: 5px;
        }

        QGroupBox {
            font-weight: bold;
            border: 2px solid #cccccc;
            border-radius: 8px;
            margin-top: 10px;
            padding-top: 10px;
        }

        QGroupBox::title {
            subcontrol-origin: margin;
            left: 10px;
            padding: 0 5px 0 5px;
        }

        QPushButton {
            background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                stop:0 #4CAF50, stop:1 #45a049);
            color: white;
            border: none;
            padding: 10px;
            border-radius: 8px;
            font-weight: bold;
        }

        QPushButton:hover {
            background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                stop:0 #45a049, stop:1 #3d8b40);
        }

        QPushButton:pressed {
            background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                stop:0 #3d8b40, stop:1 #2e7d32);
        }

        QLineEdit, QComboBox, QSpinBox {
            border: 2px solid #ddd;
            border-radius: 5px;
            padding: 8px;
            font-size: 12px;
        }

        QLineEdit:focus, QComboBox:focus, QSpinBox:focus {
            border-color: #4CAF50;
        }

        QProgressBar {
            border: 2px solid #ddd;
            border-radius: 8px;
            text-align: center;
            font-weight: bold;
        }

        QProgressBar::chunk {
            background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                stop:0 #4CAF50, stop:1 #8BC34A);
            border-radius: 6px;
        }

        QTextEdit {
            border: 2px solid #ddd;
            border-radius: 5px;
            padding: 5px;
        }

        QListWidget {
            border: 2px solid #ddd;
            border-radius: 5px;
            padding: 5px;
        }

        QCheckBox::indicator {
            width: 18px;
            height: 18px;
            border-radius: 9px;
            border: 2px solid #ddd;
        }

        QCheckBox::indicator:checked {
            background: #4CAF50;
            border-color: #4CAF50;
        }
        """

        self.setStyleSheet(style)

    def switch_mode(self, mode: str):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        for mode_id, btn in self.mode_buttons.items():
            if mode_id == mode:
                btn.setStyleSheet(
                    """
                    QPushButton {
                        background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                            stop:0 #FF5722, stop:1 #E64A19);
                    }
                """
                )
            else:
                btn.setStyleSheet("")

        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∏–¥–∂–µ—Ç
        mode_indices = {"url": 0, "trends": 1, "ai": 2}
        self.mode_stack.setCurrentIndex(mode_indices[mode])

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        mode_names = {
            "url": "–†–µ–∂–∏–º –Ω–∞—Ä–µ–∑–∫–∏ –ø–æ URL",
            "trends": "–†–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤",
            "ai": "–†–µ–∂–∏–º AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
        }
        self.log_activity(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞: {mode_names[mode]}")

    def start_url_processing(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ä–µ–∂–∏–º–µ URL"""
        url = self.url_input.text().strip()
        if not url:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ YouTube URL!")
            return

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        job = ProcessingJob(
            job_id=f"url_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            mode="url",
            status="pending",
            input_data={
                "url": url,
                "clips_count": self.clips_count_spin.value(),
                "clip_duration": self.clip_duration_spin.value(),
            },
        )

        self.start_processing_job(job)

    def start_trends_processing(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ä–µ–∂–∏–º–µ —Ç—Ä–µ–Ω–¥–æ–≤"""
        job = ProcessingJob(
            job_id=f"trends_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            mode="trends",
            status="pending",
            input_data={
                "category": self.category_combo.currentText(),
                "videos_count": self.trends_videos_spin.value(),
                "add_subtitles": self.add_subtitles_cb.isChecked(),
                "change_music": self.change_music_cb.isChecked(),
                "add_effects": self.add_effects_cb.isChecked(),
            },
        )

        self.start_processing_job(job)

    def start_ai_processing(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ä–µ–∂–∏–º–µ AI"""
        job = ProcessingJob(
            job_id=f"ai_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            mode="ai",
            status="pending",
            input_data={
                "theme": self.ai_theme_combo.currentText(),
                "videos_count": self.ai_videos_spin.value(),
                "use_runway": self.runway_cb.isChecked(),
                "use_leonardo": self.leonardo_cb.isChecked(),
                "use_openai": self.openai_cb.isChecked(),
            },
        )

        self.start_processing_job(job)

    def start_processing_job(self, job: ProcessingJob):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        self.jobs[job.job_id] = job

        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        self.main_progress.setVisible(True)
        self.main_progress.setValue(0)
        self.status_text.setText(f"–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ({job.mode})...")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        item = QListWidgetItem(f"üîÑ {job.job_id}")
        self.jobs_list.addItem(item)

        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫
        thread = ProcessingThread(job)
        thread.progress_updated.connect(self.on_progress_updated)
        thread.job_completed.connect(self.on_job_completed)
        thread.job_failed.connect(self.on_job_failed)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Ç–æ–∫
        job.thread = thread
        thread.start()

        self.log_activity(f"üöÄ –ó–∞–ø—É—â–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞: {job.job_id}")

    @pyqtSlot(str, int, str)
    def on_progress_updated(self, job_id: str, progress: int, message: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if job_id in self.jobs:
            job = self.jobs[job_id]
            job.progress = progress

            self.main_progress.setValue(progress)
            self.status_text.setText(message)
            self.log_activity(f"üìä {job_id}: {message} ({progress}%)")

    @pyqtSlot(str, dict)
    def on_job_completed(self, job_id: str, result: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        if job_id in self.jobs:
            job = self.jobs[job_id]
            job.status = "completed"
            job.result = result

            self.main_progress.setValue(100)
            self.status_text.setText("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.update_statistics(result)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.show_completion_dialog(job, result)

            self.log_activity(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {job_id}")

    @pyqtSlot(str, str)
    def on_job_failed(self, job_id: str, error: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∑–∞–¥–∞—á–∏"""
        if job_id in self.jobs:
            job = self.jobs[job_id]
            job.status = "failed"
            job.error = error

            self.main_progress.setVisible(False)
            self.status_text.setText("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n{error}")

            self.log_activity(f"‚ùå –û—à–∏–±–∫–∞ {job_id}: {error}")

    def update_statistics(self, result: dict):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ (—ç—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        videos_created = result.get("clips_created", 0) or result.get(
            "ai_videos_generated", 0
        )
        videos_uploaded = result.get("clips_uploaded", 0) or result.get(
            "videos_uploaded", 0
        )

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.videos_created_label.setText(f"–°–æ–∑–¥–∞–Ω–æ –≤–∏–¥–µ–æ: {videos_created}")
        self.videos_uploaded_label.setText(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {videos_uploaded}")

    def show_completion_dialog(self, job: ProcessingJob, result: dict):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
        msg = QMessageBox()
        msg.setWindowTitle("üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        msg.setIcon(QMessageBox.Icon.Information)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if job.mode == "url":
            text = f"""
            üì∫ –û–±—Ä–∞–±–æ—Ç–∫–∞ URL –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

            üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:
            ‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –∫–ª–∏–ø–æ–≤: {result.get('clips_created', 0)}
            ‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ YouTube: {result.get('clips_uploaded', 0)}
            ‚Ä¢ –ò—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ: {result.get('original_url', 'N/A')}
            """
        elif job.mode == "trends":
            text = f"""
            üî• –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!

            üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:
            ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –≤–∏–¥–µ–æ: {result.get('trending_videos_found', 0)}
            ‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –∫–ª–∏–ø–æ–≤: {result.get('clips_created', 0)}
            ‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ YouTube: {result.get('clips_uploaded', 0)}
            """
        elif job.mode == "ai":
            text = f"""
            ü§ñ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

            üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:
            ‚Ä¢ –°–æ–∑–¥–∞–Ω–æ AI –≤–∏–¥–µ–æ: {result.get('ai_videos_generated', 0)}
            ‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ YouTube: {result.get('videos_uploaded', 0)}
            ‚Ä¢ –¢–µ–º–∞—Ç–∏–∫–∞: {job.input_data.get('theme', 'N/A')}
            """

        msg.setText(text)
        msg.exec()

    def log_activity(self, message: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {message}"
        self.activity_log.append(log_entry)

        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –¥–æ –∫–æ–Ω—Ü–∞
        scrollbar = self.activity_log.verticalScrollBar()
        scrollbar.setValue(scrollbar.maximum())

    def show_settings(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        QMessageBox.information(
            self,
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            "üîß –û–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö!\n\n"
            "–ü–æ–∫–∞ —á—Ç–æ –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –∫–∞–∂–¥–æ–º —Ä–µ–∂–∏–º–µ.",
        )


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app = QApplication(sys.argv)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    app.setApplicationName("–í–∏—Ä—É—Å–Ω–∞—è –ö–æ–Ω—Ç–µ–Ω—Ç-–ú–∞—à–∏–Ω–∞ 2025")
    app.setApplicationVersion("2025.1.0")

    # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    window = ViralContentGUI()
    window.show()

    # –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    window.log_activity("üöÄ –í–∏—Ä—É—Å–Ω–∞—è –ö–æ–Ω—Ç–µ–Ω—Ç-–ú–∞—à–∏–Ω–∞ 2025 –∑–∞–ø—É—â–µ–Ω–∞!")
    window.log_activity(
        "üí° –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏ –Ω–∞—á–∏–Ω–∞–π—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤–∏—Ä—É—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç!"
    )

    sys.exit(app.exec())


if __name__ == "__main__":
    main()
