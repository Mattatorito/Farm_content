#!/usr/bin/env python3
"""
üî• FARM CONTENT - –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ –°–û–ó–î–ê–ù–ò–Ø –í–ò–†–£–°–ù–û–ì–û –ö–û–ù–¢–ï–ù–¢–ê üî•

–ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ª–∏–ø–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
–Ω–∞ –æ—Å–Ω–æ–≤–µ AI-–∞–Ω–∞–ª–∏–∑–∞ Instagram Reel –ø—Ä–∏–º–µ—Ä–∞.
"""

import asyncio
import sys
from pathlib import Path
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / "src"))

try:
    from farm_content.utils import ViralClipExtractor
    from farm_content.core import get_logger
    SYSTEM_AVAILABLE = True
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    SYSTEM_AVAILABLE = False


class FarmContentApp:
    """–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Farm Content."""
    
    def __init__(self):
        self.extractor = ViralClipExtractor() if SYSTEM_AVAILABLE else None
        self.logger = get_logger("FarmContentApp") if SYSTEM_AVAILABLE else None
    
    def show_banner(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–Ω–Ω–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        
        print("üî•" + "="*80 + "üî•")
        print("üé¨                   FARM CONTENT - –í–ò–†–£–°–ù–ê–Ø –ö–û–ù–¢–ï–ù–¢-–ú–ê–®–ò–ù–ê 2025                   üé¨")
        print("ü§ñ                        AI-–°–∏—Å—Ç–µ–º–∞ –°–æ–∑–¥–∞–Ω–∏—è –ó–∞–ª–∏–ø–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ö–æ–Ω—Ç–µ–Ω—Ç–∞                        ü§ñ")
        print("‚≠ê                    –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ Instagram Reel –ø—Ä–∏–º–µ—Ä–∞                    ‚≠ê")
        print("üî•" + "="*80 + "üî•")
        print()
        print("üí° –ö–û–ù–¶–ï–ü–¶–ò–Ø: –õ—é–±–æ–µ –≤–∏–¥–µ–æ ‚Üí –í–∏—Ä—É—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
        print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ó–∞–ª–∏–ø–∞—Ç–µ–ª—å–Ω—ã–µ HD –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤—ã–µ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        print("‚ö° –°–ö–û–†–û–°–¢–¨: –û—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ –≥–æ—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞ –º–∏–Ω—É—Ç—ã")
        print()
    
    async def run_automatic_creation(self, video_path: Path = None):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
        
        if not SYSTEM_AVAILABLE:
            print("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É.")
            return False
        
        print("üöÄ –ó–ê–ü–£–°–ö –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –°–ò–°–¢–ï–ú–´...")
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ
        if video_path is None:
            video_path = self.find_input_video()
        
        if not video_path or not video_path.exists():
            print("üìπ –í—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã...")
            await self.demonstrate_capabilities()
            return True
        
        print(f"üìπ –ù–∞–π–¥–µ–Ω–æ –≤—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ: {video_path}")
        print(f"üìè –†–∞–∑–º–µ—Ä: {video_path.stat().st_size / (1024*1024):.1f} MB")
        print()
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            await self.show_processing_steps()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            print("üé¨ –°–û–ó–î–ê–ù–ò–ï –ò–î–ï–ê–õ–¨–ù–û–ì–û –í–ò–†–£–°–ù–û–ì–û –ö–û–ù–¢–ï–ù–¢–ê...")
            start_time = time.time()
            
            results = await self.extractor.create_perfect_viral_content(
                video_path=video_path,
                target_platforms=["tiktok", "instagram_reels", "youtube_shorts"],
                use_trend_analysis=True,
                add_text_overlays=True,
                intensity=0.9  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–ª–∏–ø–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            )
            
            processing_time = time.time() - start_time
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await self.show_results(results, processing_time)
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
            return False
    
    def find_input_video(self) -> Path:
        """–ü–æ–∏—Å–∫ –≤—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ."""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–º–µ–Ω–∞
        possible_names = [
            "input_video.mp4",
            "test_video.mp4", 
            "source_video.mp4",
            "video.mp4",
            "sample.mp4"
        ]
        
        for name in possible_names:
            path = Path(name)
            if path.exists():
                return path
        
        # –ò—â–µ–º –ª—é–±–æ–π MP4 –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        mp4_files = list(Path(".").glob("*.mp4"))
        if mp4_files:
            return mp4_files[0]
        
        return None
    
    async def show_processing_steps(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —à–∞–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
        
        steps = [
            "üß† –ó–∞–ø—É—Å–∫ AI-–∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ...",
            "üîç –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤...",
            "üéØ –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ —Ç—Ä–µ–Ω–¥—ã...",
            "üé® –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤...",
            "üì± –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–¥ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã...",
            "üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤...",
            "üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö..."
        ]
        
        print("‚öôÔ∏è –≠–¢–ê–ü–´ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –û–ë–†–ê–ë–û–¢–ö–ò:")
        for i, step in enumerate(steps, 1):
            print(f"   {i}. {step}")
            await asyncio.sleep(0.5)  # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        print("   ‚úÖ –í—Å–µ —ç—Ç–∞–ø—ã –≥–æ—Ç–æ–≤—ã –∫ –∑–∞–ø—É—Å–∫—É!")
        print()
    
    async def show_results(self, results: dict, processing_time: float):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
        
        print()
        print("üéâ" + "="*70 + "üéâ")
        print("üèÜ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–û–ó–î–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("üéâ" + "="*70 + "üéâ")
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        metrics = results.get('performance_metrics', {})
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò:")
        print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è: {processing_time:.1f} —Å–µ–∫")
        print(f"   üé¨ –°–æ–∑–¥–∞–Ω–æ –≤–∏–¥–µ–æ: {metrics.get('total_content_pieces', 0)}")
        print(f"   üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º: {metrics.get('platforms_optimized', 0)}")
        print(f"   ü§ñ AI-—Å–∏—Å—Ç–µ–º: {len(metrics.get('ai_systems_used', []))}")
        
        # –£–ª—É—á—à–µ–Ω–∏—è
        improvements = metrics.get('estimated_improvements', {})
        if improvements:
            print(f"\nüìà –ü–†–ò–†–û–°–¢ –í–ò–†–£–°–ù–û–°–¢–ò:")
            total = 0
            for platform, improvement in improvements.items():
                print(f"   üì± {platform}: +{improvement:.1%}")
                total += improvement
            avg = total / len(improvements)
            print(f"   üéØ –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏—Ä–æ—Å—Ç: +{avg:.1%}")
        
        # –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        platform_content = results.get('platform_content', {})
        print(f"\nüìÇ –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´:")
        
        for platform, content in platform_content.items():
            main_versions = content.get('main_versions', [])
            enhanced_versions = content.get('enhanced_versions', [])
            
            total_files = len(main_versions) + len(enhanced_versions)
            print(f"   üì± {platform.upper()}: {total_files} —Ñ–∞–π–ª–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —Ñ–∞–π–ª—ã
            all_files = main_versions + enhanced_versions
            for file_path in all_files[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
                file_name = Path(file_path).name
                print(f"      üé¨ {file_name}")
            
            if len(all_files) > 2:
                print(f"      ... –∏ –µ—â—ë {len(all_files) - 2}")
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = results.get('final_metadata', {})
        if metadata:
            print(f"\nüìù –ü–†–ò–ú–ï–†–´ –ú–ï–¢–ê–î–ê–ù–ù–´–•:")
            for platform, meta in list(metadata.items())[:2]:
                title = meta.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')[:50]
                hashtags = meta.get('hashtags', [])[:3]
                
                print(f"   üì± {platform}:")
                print(f"      üìã {title}...")
                print(f"      üè∑Ô∏è  {', '.join(hashtags)}...")
        
        print(f"\nüéØ –ö–û–ù–¢–ï–ù–¢ –ì–û–¢–û–í –ö –ü–£–ë–õ–ò–ö–ê–¶–ò–ò!")
        print(f"üí° –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø–æ–¥ –∫–∞–∂–¥—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É")
    
    async def demonstrate_capabilities(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ."""
        
        print("üé≠ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô –°–ò–°–¢–ï–ú–´:")
        print()
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        fake_steps = [
            ("üß† AI-–∞–Ω–∞–ª–∏–∑", "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏: 8.5/10, –≠–º–æ—Ü–∏–∏: –≤—ã—Å–æ–∫–∏–µ, –í–∏—Ä—É—Å–Ω–æ—Å—Ç—å: 7.2/10"),
            ("üîç –¢—Ä–µ–Ω–¥-–∞–Ω–∞–ª–∏–∑", "–ù–∞–π–¥–µ–Ω—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏: neon_aesthetics, dramatic_contrast"),
            ("üé® –≠—Ñ—Ñ–µ–∫—Ç—ã", "–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Ü–≤–µ—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è +20%, –∫–æ–Ω—Ç—Ä–∞—Å—Ç +15%"),
            ("üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã", "–°–æ–∑–¥–∞–Ω—ã –≤–µ—Ä—Å–∏–∏: TikTok (9:16), Instagram (9:16), YouTube (9:16)"),
            ("üìù –¢–µ–∫—Å—Ç—ã", "–î–æ–±–∞–≤–ª–µ–Ω—ã –≤–∏—Ä—É—Å–Ω—ã–µ –æ–≤–µ—Ä–ª–µ–∏: '–¢–´ –ù–ï –ü–û–í–ï–†–ò–®–¨!', '–°–ú–û–¢–†–ò –î–û –ö–û–ù–¶–ê'"),
            ("üìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ", "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏, —Ö–µ—à—Ç–µ–≥–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è")
        ]
        
        for step, description in fake_steps:
            print(f"   {step}: {description}")
            await asyncio.sleep(0.8)
        
        print()
        print("üéâ –†–ï–ó–£–õ–¨–¢–ê–¢ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò:")
        print("   üé¨ –°–æ–∑–¥–∞–Ω–æ –±—ã: 6 –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ HD –∫–∞—á–µ—Å—Ç–≤–∞")
        print("   üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: TikTok, Instagram Reels, YouTube Shorts")
        print("   üìà –û–∂–∏–¥–∞–µ–º—ã–π –ø—Ä–∏—Ä–æ—Å—Ç: +25% –≤–∏—Ä—É—Å–Ω–æ—Å—Ç–∏")
        print("   ‚è±Ô∏è  –í—Ä–µ–º—è: ~30-60 —Å–µ–∫—É–Ω–¥")
        print()
        
    def show_usage_guide(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é."""
        
        print("üìñ –ö–ê–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –°–ò–°–¢–ï–ú–£:")
        print()
        print("1Ô∏è‚É£ –ü–û–î–ì–û–¢–û–í–ö–ê:")
        print("   ‚Ä¢ –ü–æ–º–µ—Å—Ç–∏—Ç–µ MP4 —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º")
        print("   ‚Ä¢ –ù–∞–∑–æ–≤–∏—Ç–µ –µ–≥–æ 'input_video.mp4' (–∏–ª–∏ –ª—é–±–æ–µ –∏–º—è)")
        print("   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω")
        print()
        print("2Ô∏è‚É£ –ó–ê–ü–£–°–ö:")
        print("   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main_app.py")
        print("   ‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥:")
        print("     from farm_content.utils import ViralClipExtractor")
        print("     results = await extractor.create_perfect_viral_content(...)")
        print()
        print("3Ô∏è‚É£ –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print("   ‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–µ –≤–∏–¥–µ–æ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º")
        print("   ‚Ä¢ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–∑–∞–≥–æ–ª–æ–≤–∫–∏, –æ–ø–∏—Å–∞–Ω–∏—è, —Ö–µ—à—Ç–µ–≥–∏)")
        print("   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        print()
        print("üéØ –í–°–Å –ü–û–õ–ù–û–°–¢–¨–Æ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò!")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    
    app = FarmContentApp()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä
    app.show_banner()
    
    if not SYSTEM_AVAILABLE:
        print("‚ùå –°–ò–°–¢–ï–ú–ê –ù–ï–î–û–°–¢–£–ü–ù–ê")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –º–æ–¥—É–ª–µ–π: pip install -r requirements.txt")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
    success = await app.run_automatic_creation()
    
    if success:
        print()
        app.show_usage_guide()
    
    print("\nüî• FARM CONTENT - –†–ï–í–û–õ–Æ–¶–ò–Ø –í –°–û–ó–î–ê–ù–ò–ò –í–ò–†–£–°–ù–û–ì–û –ö–û–ù–¢–ï–ù–¢–ê! üî•")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)