#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
‚úÇÔ∏è –ú–û–î–£–õ–¨ –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –¢–†–ï–ù–î–û–í–´–• –ö–õ–ò–ü–û–í
====================================

–ë–∞–∑–æ–≤—ã–π –º–æ–¥—É–ª—å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–ø–æ–≤ –∏–∑ –≤–∏–¥–µ–æ.
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –Ω–∞—Ä–µ–∑–∫–∏ –≤–∏–¥–µ–æ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–∏—Ä—É—Å–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã.
"""

import json
import logging
import os
import random
import sys
import tempfile
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional, Tuple

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
try:
    from moviepy.audio.fx import volumex
    from moviepy.video.fx import Crop, FadeIn, FadeOut, Resize
    from moviepy.video.io.VideoFileClip import VideoFileClip

    MOVIEPY_AVAILABLE = True
except ImportError:
    MOVIEPY_AVAILABLE = False
    VideoFileClip = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class TrendingClipExtractor:
    """–ò–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –∫–ª–∏–ø–æ–≤ –∏–∑ –≤–∏–¥–µ–æ"""

    def __init__(self):
        self.project_root = Path(__file__).parent
        self.clips_dir = self.project_root / "clips"
        self.clips_dir.mkdir(exist_ok=True)

        logger.info("üîß TrendingClipExtractor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def extract_clips(self, video_path: str, settings: Dict) -> List[Dict]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª–∏–ø—ã –∏–∑ –≤–∏–¥–µ–æ

        Args:
            video_path: –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—É
            settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
                - clips_count: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–ø–æ–≤
                - clip_duration: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–ª–∏–ø–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                - analysis_mode: 'smart', 'uniform', 'random'
                - quality: –∫–∞—á–µ—Å—Ç–≤–æ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ

        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–ø–∞—Ö
        """
        try:
            if not MOVIEPY_AVAILABLE:
                logger.error("‚ùå MoviePy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –Ω–∞—Ä–µ–∑–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞")
                return []

            logger.info(f"üé¨ –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª–∏–ø–æ–≤ –∏–∑ {video_path}")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
            video = VideoFileClip(video_path)
            video_duration = video.duration

            logger.info(f"üìπ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ: {video_duration:.1f} —Å–µ–∫—É–Ω–¥")

            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—Ä–µ–∑–∫–∏
            clips_count = settings.get("clips_count", 3)
            clip_duration = settings.get("clip_duration", 60)
            analysis_mode = settings.get("analysis_mode", "smart")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
            segments = self._find_best_segments(
                video_duration, clips_count, clip_duration, analysis_mode
            )

            clips_info = []

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–ø—ã
            for i, (start_time, end_time) in enumerate(segments):
                clip_info = self._create_clip(
                    video, start_time, end_time, i + 1, settings
                )

                if clip_info:
                    clips_info.append(clip_info)
                    logger.info(f"‚úÖ –ö–ª–∏–ø {i+1}/{clips_count} —Å–æ–∑–¥–∞–Ω")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–ø {i+1}")

            video.close()
            logger.info(f"üéâ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –°–æ–∑–¥–∞–Ω–æ {len(clips_info)} –∫–ª–∏–ø–æ–≤")

            return clips_info

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∫–ª–∏–ø–æ–≤: {e}")
            return []

    def _find_best_segments(
        self, duration: float, count: int, clip_duration: int, mode: str
    ) -> List[Tuple[float, float]]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ª—É—á—à–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è –Ω–∞—Ä–µ–∑–∫–∏"""

        segments = []

        if mode == "uniform":
            # –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
            step = duration / count
            for i in range(count):
                start = i * step
                end = min(start + clip_duration, duration)
                if end - start >= 10:  # –ú–∏–Ω–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥
                    segments.append((start, end))

        elif mode == "random":
            # –°–ª—É—á–∞–π–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
            for _ in range(count):
                max_start = duration - clip_duration
                if max_start > 0:
                    start = random.uniform(0, max_start)
                    end = min(start + clip_duration, duration)
                    segments.append((start, end))

        else:  # smart mode
            # –£–º–Ω–∞—è –Ω–∞—Ä–µ–∑–∫–∞ - –∏–∑–±–µ–≥–∞–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü
            useful_duration = max(
                duration * 0.8, duration - 60
            )  # –ò—Å–∫–ª—é—á–∞–µ–º –∏–Ω—Ç—Ä–æ/–∞—É—Ç—Ä–æ
            start_offset = duration * 0.1

            step = useful_duration / count
            for i in range(count):
                start = start_offset + i * step
                end = min(start + clip_duration, duration - 30)
                if end - start >= 15:  # –ú–∏–Ω–∏–º—É–º 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è shorts
                    segments.append((start, end))

        return segments

    def _create_clip(
        self, video: VideoFileClip, start: float, end: float, index: int, settings: Dict
    ) -> Optional[Dict]:
        """–°–æ–∑–¥–∞–µ—Ç –æ–¥–∏–Ω –∫–ª–∏–ø –∏–∑ –≤–∏–¥–µ–æ"""

        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç
            clip = video.subclip(start, end)

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
            clip = self._apply_effects(clip, settings)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"clip_{timestamp}_{index}.mp4"
            output_path = self.clips_dir / filename

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–ø
            clip.write_videofile(
                str(output_path),
                codec="libx264",
                audio_codec="aac",
                temp_audiofile="temp-audio.m4a",
                remove_temp=True,
                verbose=False,
                logger=None,
            )

            clip.close()

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–ø–µ
            return {
                "path": str(output_path),
                "filename": filename,
                "start_time": start,
                "end_time": end,
                "duration": end - start,
                "size_mb": os.path.getsize(output_path) / (1024 * 1024),
                "created_at": datetime.now().isoformat(),
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–ø–∞ {index}: {e}")
            return None

    def _apply_effects(self, clip: VideoFileClip, settings: Dict) -> VideoFileClip:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç—ã –∫ –∫–ª–∏–ø—É"""

        try:
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (9:16)
            if settings.get("mobile_format", True):
                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
                w, h = clip.size

                # –ï—Å–ª–∏ –≤–∏–¥–µ–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ, –¥–µ–ª–∞–µ–º –∫—Ä–æ–ø
                if w > h:
                    new_height = h
                    new_width = int(h * 9 / 16)

                    if new_width <= w:
                        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫—Ä–æ–ø
                        x_center = w / 2
                        x1 = x_center - new_width / 2
                        x2 = x_center + new_width / 2

                        clip = clip.crop(x1=x1, x2=x2)

                # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                target_height = 1920
                target_width = 1080

                clip = clip.resize(height=target_height)

                # –ï—Å–ª–∏ —à–∏—Ä–∏–Ω–∞ –±–æ–ª—å—à–µ —Ü–µ–ª–µ–≤–æ–π, –∫—Ä–æ–ø–∏–º
                if clip.w > target_width:
                    clip = clip.crop(width=target_width)

            # –î–æ–±–∞–≤–ª—è–µ–º fade —ç—Ñ—Ñ–µ–∫—Ç—ã
            if settings.get("add_fade", True):
                fade_duration = min(0.5, clip.duration / 4)
                clip = clip.fx(FadeIn, fade_duration).fx(FadeOut, fade_duration)

            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–≤—É–∫
            if settings.get("normalize_audio", True) and clip.audio is not None:
                clip = clip.fx(volumex, 1.2)

            return clip

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤: {e}")
            return clip

    def analyze_video_moments(self, video_path: str) -> List[Dict]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª—É—á—à–∏—Ö –º–æ–º–µ–Ω—Ç–æ–≤
        –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å AI –∞–Ω–∞–ª–∏–∑
        """

        try:
            if not MOVIEPY_AVAILABLE:
                return []

            video = VideoFileClip(video_path)
            duration = video.duration

            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –∑–≤—É–∫–∞
            moments = []

            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã –ø–æ 10 —Å–µ–∫—É–Ω–¥
            segment_duration = 10
            segments_count = int(duration / segment_duration)

            for i in range(segments_count):
                start = i * segment_duration
                end = min(start + segment_duration, duration)

                # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ—Å—Ç–∏" —Å–µ–≥–º–µ–Ω—Ç–∞
                score = random.uniform(0.3, 1.0)  # –ó–∞–≥–ª—É—à–∫–∞ - –≤ –±—É–¥—É—â–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑

                moments.append(
                    {
                        "start": start,
                        "end": end,
                        "score": score,
                        "reason": self._generate_reason(score),
                    }
                )

            video.close()

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ—Ü–µ–Ω–∫–µ
            moments.sort(key=lambda x: x["score"], reverse=True)

            return moments

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–æ–º–µ–Ω—Ç–æ–≤: {e}")
            return []

    def _generate_reason(self, score: float) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏—á–∏–Ω—É –≤—ã—Å–æ–∫–æ–π –æ—Ü–µ–Ω–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞"""

        if score > 0.8:
            reasons = [
                "–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∫–∞–¥—Ä–µ",
                "–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–≤—É–∫–∞",
                "–î–∏–Ω–∞–º–∏—á–Ω–∞—è —Å–º–µ–Ω–∞ —Å—Ü–µ–Ω",
                "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç",
            ]
        elif score > 0.6:
            reasons = [
                "–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –¥–∏–∞–ª–æ–≥",
                "–í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã",
                "–°–º–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏–∏",
            ]
        else:
            reasons = [
                "–°–ø–æ–∫–æ–π–Ω—ã–π –º–æ–º–µ–Ω—Ç",
                "–§–æ–Ω–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
                "–ü–µ—Ä–µ—Ö–æ–¥–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç",
                "–°—Ç–∞–±–∏–ª—å–Ω–∞—è —Å—Ü–µ–Ω–∞",
            ]

        return random.choice(reasons)

    def get_clip_metadata(self, clip_path: str) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–ª–∏–ø–∞"""

        try:
            if not MOVIEPY_AVAILABLE:
                return {}

            clip = VideoFileClip(clip_path)

            metadata = {
                "duration": clip.duration,
                "fps": clip.fps,
                "size": clip.size,
                "has_audio": clip.audio is not None,
                "file_size_mb": os.path.getsize(clip_path) / (1024 * 1024),
            }

            clip.close()
            return metadata

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
            return {}


def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TrendingClipExtractor")

    extractor = TrendingClipExtractor()

    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    test_settings = {
        "clips_count": 3,
        "clip_duration": 30,
        "analysis_mode": "smart",
        "mobile_format": True,
        "add_fade": True,
        "normalize_audio": True,
    }

    print("‚úÖ TrendingClipExtractor –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print(f"üìÅ –ö–ª–∏–ø—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤: {extractor.clips_dir}")


if __name__ == "__main__":
    main()
