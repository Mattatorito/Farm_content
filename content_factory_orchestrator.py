"""
üè≠ –ì–õ–ê–í–ù–´–ô –û–†–ö–ï–°–¢–†–ê–¢–û–† –ö–û–ù–¢–ï–ù–¢-–§–ê–ë–†–ò–ö–ò
=====================================

–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏ –≤ –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
–∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò.

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ —Å —Ä–∞–∑–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ AI-–≤–∏–¥–µ–æ, —Ç—Ä–µ–Ω–¥–æ–≤–æ–≥–æ –∏ –∫–∏–Ω–æ–∫–æ–Ω—Ç–µ–Ω—Ç–∞  
- –£–º–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ö–≤–∞—Ç–∞
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å YouTube, Instagram, TikTok —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ API
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫—É
"""

import asyncio
import json
import logging
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, field
import schedule
import time
from concurrent.futures import ThreadPoolExecutor
import threading

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from multi_account_system import MultiAccountManager, AccountConfig, ContentItem
from src.farm_content.utils.smart_scheduler import SmartScheduler, PublicationPlan
from src.farm_content.utils.platform_integrator import PlatformPublisher, PublicationRequest
from src.farm_content.utils.movie_clip_generator import MovieClipGenerator
from src.farm_content.utils.advanced_trend_analyzer import AdvancedTrendAnalyzer

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AI –º–æ–¥—É–ª–∏
from src.farm_content.ai_generator import AIVideoGenerator
from src.farm_content.trend_analyzer import TrendAnalyzer


@dataclass
class ProductionStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    videos_created_today: int = 0
    videos_published_today: int = 0
    total_views_today: int = 0
    total_engagement_today: int = 0
    successful_publications: int = 0
    failed_publications: int = 0
    average_viral_score: float = 0.0
    best_performing_time: str = ""
    platform_performance: Dict[str, Dict] = field(default_factory=dict)


@dataclass
class SystemHealth:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
    status: str = "healthy"  # healthy, degraded, critical, maintenance
    cpu_usage: float = 0.0
    memory_usage: float = 0.0
    api_quota_remaining: Dict[str, int] = field(default_factory=dict)
    active_tasks: int = 0
    queue_size: int = 0
    last_error: str = ""
    uptime: float = 0.0


class ContentFactoryOrchestrator:
    """–ì–ª–∞–≤–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç-—Ñ–∞–±—Ä–∏–∫–∏"""
    
    def __init__(self, config_path: str = "config/factory_config.json"):
        self.logger = self.setup_logging()
        self.config_path = Path(config_path)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.config = self.load_config()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.account_manager = MultiAccountManager(self.config.get('accounts_config', 'config/accounts.json'))
        self.scheduler = SmartScheduler(self.config.get('analytics_data_path', 'data/analytics/'))
        self.publisher = PlatformPublisher(self.config.get('platform_credentials', 'config/platform_credentials.json'))
        
        # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã
        try:
            from src.farm_content.services.viral_content_service import ViralContentIntegrator
            self.viral_integrator = ViralContentIntegrator()
            self.logger.info("‚úÖ –í–∏—Ä—É—Å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except ImportError as e:
            self.logger.warning(f"–í–∏—Ä—É—Å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.viral_integrator = None
        
        # –†–µ–∑–µ—Ä–≤–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã
        self.ai_generator = None  # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        self.movie_generator = None  # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏  
        self.trend_analyzer = None  # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        self.system_health = SystemHealth()
        self.production_stats = ProductionStats()
        self.is_running = False
        self.start_time = datetime.now()
        
        # –û—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á
        self.content_queue = asyncio.Queue()
        self.publication_queue = asyncio.Queue()
        
        # –ü—É–ª—ã –ø–æ—Ç–æ–∫–æ–≤
        self.ai_executor = ThreadPoolExecutor(max_workers=2, thread_name_prefix="AI_Gen")
        self.video_executor = ThreadPoolExecutor(max_workers=3, thread_name_prefix="Video_Proc")
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
        self.setup_scheduled_tasks()
        
        self.logger.info("üè≠ –ö–æ–Ω—Ç–µ–Ω—Ç-—Ñ–∞–±—Ä–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def setup_logging(self) -> logging.Logger:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s | %(name)s | %(levelname)s | %(message)s',
            handlers=[
                logging.FileHandler('logs/factory.log', encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        
        return logging.getLogger("ContentFactory")
    
    def load_config(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ñ–∞–±—Ä–∏–∫–∏"""
        
        if not self.config_path.exists():
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            default_config = {
                "factory_settings": {
                    "max_concurrent_productions": 5,
                    "max_daily_publications": 50,
                    "auto_scaling_enabled": True,
                    "maintenance_window": "04:00-05:00",
                    "quality_threshold": 0.7,
                    "viral_score_threshold": 0.8
                },
                "content_production": {
                    "ai_videos_per_day": 10,
                    "trend_videos_per_day": 15, 
                    "movie_clips_per_day": 8,
                    "max_video_duration": 60,
                    "min_quality_score": 0.75,
                    "content_categories": ["entertainment", "education", "lifestyle", "technology"]
                },
                "publishing_strategy": {
                    "optimal_times_only": True,
                    "avoid_competition": True,
                    "cross_platform_delay_minutes": 30,
                    "retry_failed_publications": True,
                    "max_retry_attempts": 3
                },
                "monitoring": {
                    "performance_check_interval": 300,  # 5 –º–∏–Ω—É—Ç
                    "health_check_interval": 60,       # 1 –º–∏–Ω—É—Ç–∞  
                    "analytics_update_interval": 3600, # 1 —á–∞—Å
                    "backup_interval": 21600           # 6 —á–∞—Å–æ–≤
                },
                "paths": {
                    "accounts_config": "config/accounts.json",
                    "platform_credentials": "config/platform_credentials.json",
                    "analytics_data_path": "data/analytics/",
                    "content_output_path": "generated_viral_content/",
                    "backup_path": "backups/"
                }
            }
            
            self.config_path.parent.mkdir(parents=True, exist_ok=True)
            with open(self.config_path, 'w', encoding='utf-8') as f:
                json.dump(default_config, f, ensure_ascii=False, indent=2)
            
            return default_config
        
        try:
            with open(self.config_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return {}
    
    def setup_scheduled_tasks(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
        
        # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        schedule.every().day.at("06:00").do(self.daily_content_planning)
        schedule.every().day.at("23:30").do(self.daily_analytics_report)
        schedule.every().day.at("02:00").do(self.system_maintenance)
        
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
        schedule.every(30).minutes.do(self.check_publication_queue)
        schedule.every(1).hours.do(self.update_trending_analysis)
        schedule.every(6).hours.do(self.backup_system_data)
        
        # –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
        
        self.logger.info("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    
    async def start_factory(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–Ω—Ç-—Ñ–∞–±—Ä–∏–∫–∏"""
        
        if self.is_running:
            self.logger.warning("–§–∞–±—Ä–∏–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return
        
        self.is_running = True
        self.start_time = datetime.now()
        
        self.logger.info("üöÄ –ó–ê–ü–£–°–ö –ö–û–ù–¢–ï–ù–¢-–§–ê–ë–†–ò–ö–ò")
        print("=" * 50)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
            await self.system_readiness_check()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
            tasks = [
                self.content_production_loop(),
                self.publication_processing_loop(),
                self.system_monitoring_loop(),
                self.scheduled_tasks_loop(),
                self.performance_optimization_loop()
            ]
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            await asyncio.gather(*tasks, return_exceptions=True)
            
        except Exception as e:
            self.logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ñ–∞–±—Ä–∏–∫–∏: {e}")
            await self.emergency_shutdown()
    
    async def system_readiness_check(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∫ –∑–∞–ø—É—Å–∫—É"""
        
        self.logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥—É–ª–µ–π
        checks = {
            "–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤": self.account_manager is not None,
            "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫": self.scheduler is not None,
            "–ü—É–±–ª–∏–∫–∞—Ç–æ—Ä": self.publisher is not None,
            "AI –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä": self.ai_generator is not None,
            "–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç—Ä–µ–Ω–¥–æ–≤": self.trend_analyzer is not None,
            "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–ª–∏–ø–æ–≤": self.movie_generator is not None,
        }
        
        failed_checks = [name for name, status in checks.items() if not status]
        
        if failed_checks:
            raise Exception(f"–ù–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–µ –º–æ–¥—É–ª–∏: {', '.join(failed_checks)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        required_paths = [
            Path("logs/"),
            Path("data/analytics/"),
            Path("generated_viral_content/"),
            Path("ready_videos/"),
            Path("config/")
        ]
        
        for path in required_paths:
            path.mkdir(parents=True, exist_ok=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–æ—Ç—ã API (—Å–∏–º—É–ª—è—Ü–∏—è)
        self.system_health.api_quota_remaining = {
            "youtube": 10000,
            "instagram": 5000, 
            "tiktok": 3000
        }
        
        self.system_health.status = "healthy"
        self.logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
    
    async def content_production_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        
        self.logger.info("üè≠ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
        
        while self.is_running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                daily_plan = await self.create_daily_production_plan()
                
                for production_task in daily_plan:
                    if not self.is_running:
                        break
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
                    if self.system_health.active_tasks >= self.config.get('factory_settings', {}).get('max_concurrent_productions', 5):
                        await asyncio.sleep(30)  # –ñ–¥–µ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
                        continue
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    asyncio.create_task(self.produce_content(production_task))
                
                # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å –ø–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –ø–ª–∞–Ω
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: {e}")
                await asyncio.sleep(60)
    
    async def create_daily_production_plan(self) -> List[Dict]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞"""
        
        plan = []
        config = self.config.get('content_production', {})
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –∏ –∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        accounts = await self.account_manager.get_all_accounts()
        
        for account_id, account in accounts.items():
            account_type = account.content_type
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
            if account_type == "ai_video":
                daily_quota = config.get('ai_videos_per_day', 10)
                content_specs = {
                    'type': 'ai_video',
                    'duration': (30, 60),
                    'quality': 'high',
                    'themes': ['motivational', 'educational', 'entertainment']
                }
            
            elif account_type == "trend_short":
                daily_quota = config.get('trend_videos_per_day', 15)
                content_specs = {
                    'type': 'trend_short', 
                    'duration': (15, 30),
                    'quality': 'viral',
                    'platforms': ['youtube', 'tiktok', 'instagram']
                }
            
            elif account_type == "movie_clip":
                daily_quota = config.get('movie_clips_per_day', 8)
                content_specs = {
                    'type': 'movie_clip',
                    'duration': (20, 45),
                    'quality': 'cinematic',
                    'genres': ['action', 'drama', 'comedy', 'thriller']
                }
            
            else:
                continue
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
            for i in range(daily_quota):
                task = {
                    'id': f"{account_id}_{account_type}_{i}_{datetime.now().strftime('%Y%m%d')}",
                    'account_id': account_id,
                    'content_type': account_type,
                    'specs': content_specs,
                    'priority': 1.0,
                    'created_at': datetime.now()
                }
                
                plan.append(task)
        
        self.logger.info(f"üìã –°–æ–∑–¥–∞–Ω –ø–ª–∞–Ω –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {len(plan)} –∑–∞–¥–∞–Ω–∏–π")
        return plan
    
    async def produce_content(self, task: Dict):
        """–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        
        self.system_health.active_tasks += 1
        task_id = task['id']
        content_type = task['content_type']
        
        try:
            self.logger.info(f"üé¨ –ù–∞—á–∞–ª–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: {task_id}")
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
            if content_type == "ai_video":
                content_item = await self.produce_ai_video(task)
            elif content_type == "trend_short": 
                content_item = await self.produce_trend_short(task)
            elif content_type == "movie_clip":
                content_item = await self.produce_movie_clip(task)
            else:
                raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content_type}")
            
            if content_item:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
                await self.publication_queue.put(content_item)
                self.production_stats.videos_created_today += 1
                
                self.logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {task_id}")
            else:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç: {task_id}")
        
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ {task_id}: {e}")
        
        finally:
            self.system_health.active_tasks -= 1
    
    async def produce_ai_video(self, task: Dict) -> Optional[ContentItem]:
        """–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ AI-–≤–∏–¥–µ–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
        
        try:
            if self.viral_integrator:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –≤–∏—Ä—É—Å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
                self.logger.info(f"ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ AI-–≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é –≤–∏—Ä—É—Å–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: {task['id']}")
                
                content_item = await self.viral_integrator.create_content_for_account(
                    account_type="ai_video",
                    account_id=task['account_id'],
                    custom_requirements={
                        "template": "motivation_viral",  # –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è AI
                        "platform": "youtube",
                        "quality_level": "ultra"
                    }
                )
                
                if content_item:
                    # –û–±–Ω–æ–≤–ª—è–µ–º ID –∑–∞–¥–∞—á–∏
                    content_item.content_id = task['id']
                    self.logger.info(f"‚úÖ AI-–≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ: {content_item.title[:50]}...")
                    return content_item
                else:
                    self.logger.error("–í–∏—Ä—É—Å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ —Å–º–æ–≥ —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç")
            
            # –†–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
            return await self.create_fallback_content(task, "ai_video")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è AI-–≤–∏–¥–µ–æ: {e}")
            return await self.create_fallback_content(task, "ai_video")
    
    async def produce_trend_short(self, task: Dict) -> Optional[ContentItem]:
        """–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Ç—Ä–µ–Ω–¥–æ–≤–æ–≥–æ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –≤–∏–¥–µ–æ"""
        
        try:
            if self.viral_integrator:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –≤–∏—Ä—É—Å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ç—Ä–µ–Ω–¥–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                self.logger.info(f"üìà –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ: {task['id']}")
                
                content_item = await self.viral_integrator.create_content_for_account(
                    account_type="trend_short", 
                    account_id=task['account_id'],
                    custom_requirements={
                        "template": "facts_viral",  # –§–∞–∫—Ç—ã —Ö–æ—Ä–æ—à–æ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è —Ç—Ä–µ–Ω–¥–æ–≤
                        "platform": "tiktok",
                        "quality_level": "high"
                    }
                )
                
                if content_item:
                    # –û–±–Ω–æ–≤–ª—è–µ–º ID –∑–∞–¥–∞—á–∏
                    content_item.content_id = task['id']
                    self.logger.info(f"‚úÖ –¢—Ä–µ–Ω–¥–æ–≤–æ–µ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ: {content_item.title[:50]}...")
                    return content_item
                else:
                    self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–¥–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
            
            # –†–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
            return await self.create_fallback_content(task, "trend_short")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ: {e}")
            return await self.create_fallback_content(task, "trend_short")
    
    async def produce_movie_clip(self, task: Dict) -> Optional[ContentItem]:
        """–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∫–ª–∏–ø–∞ –∏–∑ —Ñ–∏–ª—å–º–∞"""
        
        try:
            if self.viral_integrator:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–ø–æ–≤ –≤ —Å—Ç–∏–ª–µ –ø—Ä–∏–º–µ—Ä–æ–≤
                self.logger.info(f"üé¨ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∏–Ω–æ–∫–ª–∏–ø–∞: {task['id']}")
                
                content_item = await self.viral_integrator.create_content_for_account(
                    account_type="movie_clip",
                    account_id=task['account_id'],
                    custom_requirements={
                        "template": "money_viral",  # –ë–∏–∑–Ω–µ—Å –∫–æ–Ω—Ç–µ–Ω—Ç —Ö–æ—Ä–æ—à–æ –∏–¥–µ—Ç –¥–ª—è –∫–ª–∏–ø–æ–≤
                        "platform": "instagram", 
                        "quality_level": "ultra"
                    }
                )
                
                if content_item:
                    # –û–±–Ω–æ–≤–ª—è–µ–º ID –∑–∞–¥–∞—á–∏
                    content_item.content_id = task['id']
                    self.logger.info(f"‚úÖ –ö–∏–Ω–æ–∫–ª–∏–ø —Å–æ–∑–¥–∞–Ω: {content_item.title[:50]}...")
                    return content_item
                else:
                    self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∏–Ω–æ–∫–ª–∏–ø")
            
            # –†–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
            return await self.create_fallback_content(task, "movie_clip")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–ø–∞: {e}")
            return await self.create_fallback_content(task, "movie_clip")
    
    async def create_fallback_content(self, task: Dict, content_type: str) -> Optional[ContentItem]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—Ä–∏ —Å–±–æ—è—Ö –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
        
        try:
            self.logger.info(f"üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {task['id']}")
            
            # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
            content_config = {
                "ai_video": {
                    "title": f"ü§ñ AI –∫–æ–Ω—Ç–µ–Ω—Ç #{task['id'][-6:]}",
                    "description": "–ù–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º!\n\n#AI #Viral #Tech",
                    "tags": ["AI", "tech", "viral", "content"],
                    "duration": 30
                },
                "trend_short": {
                    "title": f"üî• –¢—Ä–µ–Ω–¥–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç #{task['id'][-6:]}",
                    "description": "–°–∞–º—ã–µ –≥–æ—Ä—è—á–∏–µ —Ç—Ä–µ–Ω–¥—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n\n#Trending #Viral #Hot",
                    "tags": ["trending", "viral", "hot", "content"],
                    "duration": 25
                },
                "movie_clip": {
                    "title": f"üé¨ –ö–∏–Ω–æ–∫–ª–∏–ø #{task['id'][-6:]}",
                    "description": "–õ—É—á—à–∏–µ –º–æ–º–µ–Ω—Ç—ã –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤!\n\n#Movies #Cinema #Viral",
                    "tags": ["movies", "cinema", "viral", "clips"],
                    "duration": 35
                }
            }
            
            config = content_config.get(content_type, content_config["ai_video"])
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç-–æ–±—ä–µ–∫—Ç
            content_item = ContentItem(
                content_id=task['id'],
                account_id=task['account_id'],
                content_type=content_type,
                file_path=f"generated_viral_content/{task['id']}.mp4",
                title=config["title"],
                description=config["description"],
                tags=config["tags"],
                duration=config["duration"],
                quality_score=0.7,  # –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                created_at=datetime.now(),
                metadata={"is_fallback": True, "reason": "Main generator unavailable"}
            )
            
            self.logger.info(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {content_item.title}")
            return content_item
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
            return None
    
    async def publication_processing_loop(self):
        """–¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
        
        self.logger.info("üì§ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
        
        while self.is_running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                content_item = await asyncio.wait_for(
                    self.publication_queue.get(), 
                    timeout=30.0
                )
                
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                publication_plan = await self.schedule_optimal_publication(content_item)
                
                if publication_plan:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é
                    await self.execute_publication(content_item, publication_plan)
                
            except asyncio.TimeoutError:
                # –¢–∞–π–º-–∞—É—Ç - –Ω–µ—Ç –Ω–æ–≤—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π
                continue
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {e}")
                await asyncio.sleep(10)
    
    async def schedule_optimal_publication(self, content_item: ContentItem) -> Optional[PublicationPlan]:
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
            account = await self.account_manager.get_account(content_item.account_id)
            if not account:
                self.logger.error(f"–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {content_item.account_id}")
                return None
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
            plan = await self.scheduler.calculate_optimal_time(
                content_type=content_item.content_type,
                platform=account.platforms[0],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
                account_timezone="Europe/Moscow",
                target_audience="RU",
                content_priority=content_item.quality_score
            )
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
            plan.content_id = content_item.content_id
            plan.account_id = content_item.account_id
            
            return plan
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            return None
    
    async def execute_publication(self, content_item: ContentItem, plan: PublicationPlan):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        
        try:
            # –ñ–¥–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            now = datetime.now()
            if plan.scheduled_time > now:
                wait_seconds = (plan.scheduled_time - now).total_seconds()
                if wait_seconds > 0 and wait_seconds < 3600:  # –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 1 —á–∞—Å
                    self.logger.info(f"‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {wait_seconds:.0f} —Å–µ–∫")
                    await asyncio.sleep(wait_seconds)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
            pub_request = PublicationRequest(
                platform=plan.platform,
                account_id=content_item.account_id,
                video_path=content_item.file_path,
                title=content_item.title,
                description=content_item.description,
                tags=content_item.tags,
                privacy_status="public"
            )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é
            result = await self.publisher.publish_content(content_item.account_id, pub_request)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if result.success:
                self.production_stats.successful_publications += 1
                self.production_stats.videos_published_today += 1
                self.logger.info(f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {content_item.content_id} -> {result.video_url}")
            else:
                self.production_stats.failed_publications += 1
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {result.error_message}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            await self.save_publication_result(content_item, plan, result)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            self.production_stats.failed_publications += 1
    
    async def system_monitoring_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã"""
        
        self.logger.info("üìä –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã")
        
        while self.is_running:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
                await self.update_system_health()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
                if self.system_health.status == "critical":
                    await self.handle_critical_situation()
                elif self.system_health.status == "degraded":
                    await self.handle_degraded_performance()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                await self.update_production_stats()
                
                # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
                if datetime.now().minute % 10 == 0:  # –ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
                    self.print_status_report()
                
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(30)
    
    async def update_system_health(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        
        import psutil
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
        self.system_health.cpu_usage = psutil.cpu_percent()
        self.system_health.memory_usage = psutil.virtual_memory().percent
        self.system_health.uptime = (datetime.now() - self.start_time).total_seconds()
        self.system_health.queue_size = self.publication_queue.qsize()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if self.system_health.cpu_usage > 90 or self.system_health.memory_usage > 90:
            self.system_health.status = "critical"
        elif self.system_health.cpu_usage > 70 or self.system_health.memory_usage > 70:
            self.system_health.status = "degraded"
        else:
            self.system_health.status = "healthy"
    
    def print_status_report(self):
        """–í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏"""
        
        uptime_hours = self.system_health.uptime / 3600
        
        print(f"\nüè≠ –°–¢–ê–¢–£–° –ö–û–ù–¢–ï–ù–¢-–§–ê–ë–†–ò–ö–ò")
        print(f"‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_hours:.1f} —á–∞—Å–æ–≤")
        print(f"üé¨ –°–æ–∑–¥–∞–Ω–æ –≤–∏–¥–µ–æ: {self.production_stats.videos_created_today}")
        print(f"üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {self.production_stats.videos_published_today}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {self.production_stats.successful_publications}")
        print(f"‚ùå –û—à–∏–±–∫–∏: {self.production_stats.failed_publications}")
        print(f"üíª CPU: {self.system_health.cpu_usage:.1f}%")
        print(f"üß† RAM: {self.system_health.memory_usage:.1f}%")
        print(f"üìã –û—á–µ—Ä–µ–¥—å: {self.system_health.queue_size}")
        print(f"‚öôÔ∏è –°—Ç–∞—Ç—É—Å: {self.system_health.status.upper()}")
    
    async def scheduled_tasks_loop(self):
        """–¶–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
        
        while self.is_running:
            try:
                schedule.run_pending()
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {e}")
                await asyncio.sleep(60)
    
    async def performance_optimization_loop(self):
        """–¶–∏–∫–ª –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        
        while self.is_running:
            try:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
                await asyncio.sleep(1800)
                
                if not self.is_running:
                    break
                
                # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –Ω–∞–≥—Ä—É–∑–∫—É
                await self.optimize_system_load()
                
                # –û—á–∏—â–∞–µ–º –∫—ç—à–∏
                await self.cleanup_caches()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
                await self.check_disk_space()
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
                await asyncio.sleep(300)
    
    async def daily_content_planning(self):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        
        self.logger.info("üìÖ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
        
        # –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.production_stats.videos_created_today = 0
        self.production_stats.videos_published_today = 0
        self.production_stats.successful_publications = 0
        self.production_stats.failed_publications = 0
        
        # –ê–Ω–∞–ª–∏–∑ –≤—á–µ—Ä–∞—à–Ω–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–ª–∞–Ω–æ–≤
        # (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑)
        
        self.logger.info("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    async def daily_analytics_report(self):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç"""
        
        report = {
            "date": datetime.now().strftime("%Y-%m-%d"),
            "production_stats": self.production_stats.__dict__,
            "system_health": self.system_health.__dict__,
            "performance_summary": {
                "success_rate": self.calculate_success_rate(),
                "average_production_time": "N/A",  # –ë—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å—Å—è
                "top_performing_accounts": [],      # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω—è—Ç—å—Å—è
                "recommendations": []               # –ë—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_path = Path(f"data/analytics/daily_report_{datetime.now().strftime('%Y%m%d')}.json")
        report_path.parent.mkdir(parents=True, exist_ok=True)
        
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        self.logger.info(f"üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
    
    def calculate_success_rate(self) -> float:
        """–†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏"""
        total = self.production_stats.successful_publications + self.production_stats.failed_publications
        if total == 0:
            return 0.0
        return (self.production_stats.successful_publications / total) * 100
    
    async def stop_factory(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç-—Ñ–∞–±—Ä–∏–∫–∏"""
        
        self.logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç-—Ñ–∞–±—Ä–∏–∫–∏...")
        
        self.is_running = False
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        while self.system_health.active_tasks > 0:
            self.logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è {self.system_health.active_tasks} –∑–∞–¥–∞—á...")
            await asyncio.sleep(2)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª—ã –ø–æ—Ç–æ–∫–æ–≤
        self.ai_executor.shutdown(wait=True)
        self.video_executor.shutdown(wait=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        await self.daily_analytics_report()
        
        self.logger.info("‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç-—Ñ–∞–±—Ä–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    async def emergency_shutdown(self):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ"""
        
        self.logger.critical("üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï –°–ò–°–¢–ï–ú–´")
        
        self.is_running = False
        self.system_health.status = "critical"
        self.system_health.last_error = "Emergency shutdown initiated"
        
        # –ë—ã—Å—Ç—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        try:
            await self.daily_analytics_report()
        except:
            pass
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        import os
        os._exit(1)


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def save_publication_result(self, content_item: ContentItem, plan: PublicationPlan, result):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    
    result_data = {
        "content_id": content_item.content_id,
        "account_id": content_item.account_id,
        "platform": plan.platform,
        "scheduled_time": plan.scheduled_time.isoformat(),
        "published_time": datetime.now().isoformat(),
        "success": result.success,
        "video_url": result.video_url,
        "error_message": result.error_message,
        "expected_performance": plan.expected_performance,
        "content_metadata": {
            "type": content_item.content_type,
            "duration": content_item.duration,
            "quality_score": content_item.quality_score,
            "tags": content_item.tags
        }
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results_file = Path("data/analytics/publication_results.jsonl")
    results_file.parent.mkdir(parents=True, exist_ok=True)
    
    with open(results_file, 'a', encoding='utf-8') as f:
        f.write(json.dumps(result_data, ensure_ascii=False) + '\n')


async def optimize_system_load(self):
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∑–∫–∏
    if self.system_health.cpu_usage > 80:
        # –°–Ω–∏–∂–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á
        max_tasks = max(2, self.config.get('factory_settings', {}).get('max_concurrent_productions', 5) - 2)
        self.config['factory_settings']['max_concurrent_productions'] = max_tasks
        self.logger.info(f"‚ö° –°–Ω–∏–∂–µ–Ω–∞ –Ω–∞–≥—Ä—É–∑–∫–∞: –º–∞–∫—Å–∏–º—É–º {max_tasks} –∑–∞–¥–∞—á")
    
    elif self.system_health.cpu_usage < 50 and self.system_health.memory_usage < 60:
        # –ú–æ–∂–µ–º —É–≤–µ–ª–∏—á–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É
        max_tasks = min(8, self.config.get('factory_settings', {}).get('max_concurrent_productions', 5) + 1)
        self.config['factory_settings']['max_concurrent_productions'] = max_tasks
        self.logger.info(f"üöÄ –£–≤–µ–ª–∏—á–µ–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –º–∞–∫—Å–∏–º—É–º {max_tasks} –∑–∞–¥–∞—á")


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    
    print("üè≠ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–û–ù–¢–ï–ù–¢-–§–ê–ë–†–ò–ö–ò")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É
    factory = ContentFactoryOrchestrator()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É
        await factory.start_factory()
        
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        await factory.stop_factory()
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await factory.emergency_shutdown()


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Windows
    if hasattr(asyncio, 'WindowsProactorEventLoopPolicy'):
        asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
    
    asyncio.run(main())