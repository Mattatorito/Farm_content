#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üì§ –ú–û–î–£–õ–¨ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –ó–ê–ì–†–£–ó–ö–ò –ù–ê YOUTUBE
==========================================

–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –Ω–∞ YouTube —á–µ—Ä–µ–∑ YouTube Data API v3.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏, –ø—Ä–µ–≤—å—é –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–ª—è Shorts.
"""

import json
import logging
import os
import pickle
import random
import sys
import time
from datetime import datetime, timedelta
from pathlib import Path
from typing import Any, Dict, List, Optional
from urllib.parse import urlencode

# HTTP –∏ API –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import requests

# Google API –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
try:
    from google.auth.transport.requests import Request
    from google.oauth2.credentials import Credentials
    from google_auth_oauthlib.flow import InstalledAppFlow
    from googleapiclient.discovery import build
    from googleapiclient.errors import HttpError
    from googleapiclient.http import MediaFileUpload

    GOOGLE_API_AVAILABLE = True
except ImportError:
    GOOGLE_API_AVAILABLE = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class YouTubeAutoUploader:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–≥—Ä—É–∑—á–∏–∫ –≤–∏–¥–µ–æ –Ω–∞ YouTube"""

    # –°–∫–æ–ø—ã –¥–ª—è YouTube API
    SCOPES = [
        "https://www.googleapis.com/auth/youtube.upload",
        "https://www.googleapis.com/auth/youtube",
    ]

    def __init__(self):
        self.project_root = Path(__file__).parent
        self.config_dir = self.project_root / "config"
        self.credentials_file = self.config_dir / "client_secrets.json"
        self.token_file = self.config_dir / "youtube_token.pickle"

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
        self.service = None
        self.authenticated = False

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.config = self._load_config()

        logger.info("üîß YouTubeAutoUploader –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _load_config(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        try:
            config_path = self.config_dir / "youtube_upload_config.json"
            if config_path.exists():
                with open(config_path, "r", encoding="utf-8") as f:
                    return json.load(f)
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return {
            "default_privacy": "public",
            "default_category": "24",  # Entertainment
            "shorts_tags": ["shorts", "viral", "—Ç—Ä–µ–Ω–¥—ã"],
            "auto_thumbnail": True,
            "max_retries": 3,
            "retry_delay": 5,
        }

    def authenticate(self) -> bool:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å YouTube API"""

        if not GOOGLE_API_AVAILABLE:
            logger.error("‚ùå Google API –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return False

        try:
            creds = None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
            if self.token_file.exists():
                with open(self.token_file, "rb") as token:
                    creds = pickle.load(token)

            # –ï—Å–ª–∏ –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if not creds or not creds.valid:
                if creds and creds.expired and creds.refresh_token:
                    creds.refresh(Request())
                else:
                    if not self.credentials_file.exists():
                        logger.error(
                            f"‚ùå –§–∞–π–ª credentials –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.credentials_file}"
                        )
                        return False

                    flow = InstalledAppFlow.from_client_secrets_file(
                        str(self.credentials_file), self.SCOPES
                    )
                    creds = flow.run_local_server(port=0)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                with open(self.token_file, "wb") as token:
                    pickle.dump(creds, token)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
            self.service = build("youtube", "v3", credentials=creds)
            self.authenticated = True

            logger.info("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å YouTube API —É—Å–ø–µ—à–Ω–∞")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return False

    def upload_video(self, video_path: str, metadata: Dict) -> Optional[Dict]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–∏–¥–µ–æ –Ω–∞ YouTube

        Args:
            video_path: –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—É
            metadata: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
                - title: –ó–∞–≥–æ–ª–æ–≤–æ–∫
                - description: –û–ø–∏—Å–∞–Ω–∏–µ
                - tags: –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤
                - category_id: ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                - privacy: public/unlisted/private
                - is_shorts: True –¥–ª—è Shorts

        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º –≤–∏–¥–µ–æ –∏–ª–∏ None
        """

        if not self.authenticated:
            logger.error("‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ YouTube API")
            return None

        if not Path(video_path).exists():
            logger.error(f"‚ùå –í–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {video_path}")
            return None

        try:
            logger.info(f"üì§ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É: {Path(video_path).name}")

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            upload_metadata = self._prepare_metadata(metadata)

            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–≥—Ä—É–∑–∫–∏
            media = MediaFileUpload(
                video_path,
                chunksize=-1,  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–µ–ª–∏–∫–æ–º
                resumable=True,
                mimetype="video/*",
            )

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            request = self.service.videos().insert(
                part="snippet,status", body=upload_metadata, media_body=media
            )

            response = self._execute_upload(request)

            if response:
                logger.info(f"‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ! ID: {response['id']}")

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Shorts
                if metadata.get("is_shorts", False):
                    self._optimize_for_shorts(response["id"])

                return {
                    "video_id": response["id"],
                    "url": f"https://youtu.be/{response['id']}",
                    "title": upload_metadata["snippet"]["title"],
                    "upload_time": datetime.now().isoformat(),
                    "status": "uploaded",
                }
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ")
                return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return None

    def _prepare_metadata(self, metadata: Dict) -> Dict:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏"""

        # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        title = metadata.get(
            "title", f'Shorts Video {datetime.now().strftime("%Y%m%d_%H%M%S")}'
        )
        description = metadata.get("description", "")
        tags = metadata.get("tags", [])

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–µ–≥–∏ –¥–ª—è Shorts
        if metadata.get("is_shorts", False):
            tags.extend(self.config.get("shorts_tags", []))
            if "#Shorts" not in description:
                description += "\n\n#Shorts #Viral #Trending"

        # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –ª–∏–º–∏—Ç–æ–≤ YouTube
        title = title[:100]  # –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤
        description = description[:5000]  # –ú–∞–∫—Å–∏–º—É–º 5000 —Å–∏–º–≤–æ–ª–æ–≤
        tags = tags[:500]  # –ú–∞–∫—Å–∏–º—É–º 500 —Ç–µ–≥–æ–≤, –∫–∞–∂–¥—ã–π –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤

        return {
            "snippet": {
                "title": title,
                "description": description,
                "tags": [tag[:30] for tag in tags[:500]],
                "categoryId": metadata.get(
                    "category_id", self.config.get("default_category", "24")
                ),
            },
            "status": {
                "privacyStatus": metadata.get(
                    "privacy", self.config.get("default_privacy", "public")
                ),
                "selfDeclaredMadeForKids": False,
            },
        }

    def _execute_upload(self, request) -> Optional[Dict]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""

        max_retries = self.config.get("max_retries", 3)
        retry_delay = self.config.get("retry_delay", 5)

        for attempt in range(max_retries):
            try:
                response = request.execute()
                return response

            except HttpError as e:
                if e.resp.status in [500, 502, 503, 504]:
                    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ - –ø–æ–≤—Ç–æ—Ä—è–µ–º
                    logger.warning(
                        f"‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}"
                    )
                    if attempt < max_retries - 1:
                        time.sleep(
                            retry_delay * (2**attempt)
                        )  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                        continue
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
                    break

            except Exception as e:
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                break

        return None

    def _optimize_for_shorts(self, video_id: str):
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è YouTube Shorts"""

        try:
            # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:
            # - –£—Å—Ç–∞–Ω–æ–≤–∫—É –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–µ–≤—å—é
            # - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø–ª–µ–π–ª–∏—Å—Ç Shorts
            # - –ù–∞—Å—Ç—Ä–æ–π–∫—É –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏
            # - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ –∫–æ–Ω—Ü–µ–≤—ã—Ö –∑–∞—Å—Ç–∞–≤–æ–∫

            logger.info(f"üéØ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è Shorts: {video_id}")

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è Shorts: {e}")

    def get_video_info(self, video_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º –≤–∏–¥–µ–æ"""

        if not self.authenticated:
            return None

        try:
            request = self.service.videos().list(
                part="snippet,statistics,status", id=video_id
            )
            response = request.execute()

            if response["items"]:
                video = response["items"][0]
                return {
                    "id": video["id"],
                    "title": video["snippet"]["title"],
                    "description": video["snippet"]["description"],
                    "published_at": video["snippet"]["publishedAt"],
                    "view_count": video["statistics"].get("viewCount", 0),
                    "like_count": video["statistics"].get("likeCount", 0),
                    "privacy": video["status"]["privacyStatus"],
                }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")

        return None

    def batch_upload(self, videos_data: List[Dict]) -> List[Dict]:
        """–ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∏–¥–µ–æ"""

        results = []
        total_videos = len(videos_data)

        logger.info(f"üì§ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É {total_videos} –≤–∏–¥–µ–æ")

        for i, video_data in enumerate(videos_data, 1):
            logger.info(f"üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ {i}/{total_videos}")

            result = self.upload_video(
                video_data["path"], video_data.get("metadata", {})
            )

            if result:
                result.update({"batch_index": i, "original_path": video_data["path"]})
                results.append(result)
            else:
                results.append(
                    {
                        "batch_index": i,
                        "original_path": video_data["path"],
                        "status": "failed",
                        "error": "Upload failed",
                    }
                )

            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–≥—Ä—É–∑–∫–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
            if i < total_videos:
                delay = random.uniform(2, 5)
                logger.info(f"‚è≥ –ü–∞—É–∑–∞ {delay:.1f} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–≥—Ä—É–∑–∫–æ–π")
                time.sleep(delay)

        logger.info(
            f"üéâ –ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø–µ—à–Ω–æ: {len([r for r in results if r.get('status') != 'failed'])}/{total_videos}"
        )

        return results

    def generate_viral_metadata(
        self, video_info: Dict, viral_score: float = 0.0
    ) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏—Ä—É—Å–Ω–æ—Å—Ç–∏"""

        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        title = video_info.get("title", "–í–∏—Ä—É—Å–Ω–æ–µ –≤–∏–¥–µ–æ")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ø–ª—è—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        viral_prefixes = [
            "–¢–û–ü 3",
            "–≠–¢–û –í–ó–û–†–í–ï–¢ –ò–ù–¢–ï–†–ù–ï–¢!",
            "–í–´ –ù–ï –ü–û–í–ï–†–ò–¢–ï!",
            "–®–û–ö–ò–†–£–Æ–©–ê–Ø –ü–†–ê–í–î–ê!",
            "–ù–ò–ö–¢–û –ù–ï –ó–ù–ê–õ –≠–¢–û–ì–û!",
            "–ì–ï–ù–ò–ê–õ–¨–ù–´–ô –õ–ê–ô–§–•–ê–ö!",
            "–°–ï–ö–†–ï–¢ –†–ê–°–ö–†–´–¢!",
        ]

        if viral_score > 7:
            prefix = random.choice(viral_prefixes)
            title = f"{prefix} {title}"

        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        description = self._generate_viral_description(video_info, viral_score)

        # –¢–µ–≥–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
        tags = self._generate_viral_tags(video_info, viral_score)

        return {
            "title": title[:100],
            "description": description[:5000],
            "tags": tags,
            "category_id": "24",  # Entertainment
            "privacy": "public",
            "is_shorts": True,
        }

    def _generate_viral_description(self, video_info: Dict, viral_score: float) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∏—Ä—É—Å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"""

        base_description = video_info.get("description", "")

        viral_elements = [
            "\n\nüî• –ü–û–î–ü–ò–®–ò–°–¨ –î–õ–Ø –ù–û–í–´–• –í–ò–†–£–°–ù–´–• –í–ò–î–ï–û!",
            "\nüëç –õ–ê–ô–ö –µ—Å–ª–∏ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!",
            "\nüí¨ –ö–û–ú–ú–ï–ù–¢–ò–†–£–ô —á—Ç–æ –¥—É–º–∞–µ—à—å!",
            "\nüì¢ –ü–û–î–ï–õ–ò–°–¨ —Å –¥—Ä—É–∑—å—è–º–∏!",
            "\n\n#Shorts #Viral #Trending #–¢–û–ü #–•–∞–π–ø",
        ]

        if viral_score > 5:
            description = base_description
            for element in viral_elements:
                description += element
        else:
            description = base_description + "\n\n#Shorts"

        return description

    def _generate_viral_tags(self, video_info: Dict, viral_score: float) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∏—Ä—É—Å–Ω—ã–µ —Ç–µ–≥–∏"""

        base_tags = [
            "shorts",
            "viral",
            "—Ç—Ä–µ–Ω–¥—ã",
            "—Ç–æ–ø",
            "—Ö–∞–π–ø",
            "–ø–æ–ø—É–ª—è—Ä–Ω–æ–µ",
            "–≤–∏—Ä—É—Å–Ω–æ–µ",
            "–ª—É—á—à–µ–µ",
            "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ",
        ]

        if viral_score > 7:
            viral_tags = [
                "–º–µ–≥–∞ –≤–∏—Ä—É—Å",
                "–≤–∑—Ä—ã–≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞",
                "—à–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç",
                "–Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ",
                "—Ñ–µ–Ω–æ–º–µ–Ω",
                "—Å–µ–Ω—Å–∞—Ü–∏—è",
            ]
            base_tags.extend(viral_tags)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ
        original_tags = video_info.get("tags", [])
        if isinstance(original_tags, list):
            base_tags.extend(original_tags[:10])  # –ú–∞–∫—Å–∏–º—É–º 10 –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤

        return list(set(base_tags))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã

    def check_api_quota(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å—Ç–∞–≤—à—É—é—Å—è –∫–≤–æ—Ç—É API"""

        # YouTube API –∫–≤–æ—Ç–∞: 10,000 –µ–¥–∏–Ω–∏—Ü –≤ –¥–µ–Ω—å
        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ: ~1,600 –µ–¥–∏–Ω–∏—Ü
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: 1-5 –µ–¥–∏–Ω–∏—Ü

        return {
            "daily_limit": 10000,
            "estimated_uploads_remaining": 6,  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
            "current_usage_percent": 25,
            "reset_time": "24:00:00",
        }


def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ YouTubeAutoUploader")

    uploader = YouTubeAutoUploader()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Google API
    if not GOOGLE_API_AVAILABLE:
        print("‚ùå Google API –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        print(
            "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client"
        )
        return

    print("‚úÖ YouTubeAutoUploader –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print(f"üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {uploader.config_dir}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª credentials
    if not uploader.credentials_file.exists():
        print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª credentials: {uploader.credentials_file}")
        print(
            "üìù –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤ Google Cloud Console –∏ —Å–∫–∞—á–∞–π—Ç–µ client_secrets.json"
        )

    # –ü—Ä–∏–º–µ—Ä –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    example_metadata = uploader.generate_viral_metadata(
        {"title": "–¢–µ—Å—Ç –≤–∏–¥–µ–æ", "description": "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ"},
        viral_score=8.5,
    )

    print("\nüìã –ü—Ä–∏–º–µ—Ä –≤–∏—Ä—É—Å–Ω—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:")
    print(json.dumps(example_metadata, indent=2, ensure_ascii=False))


if __name__ == "__main__":
    main()
