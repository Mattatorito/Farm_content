#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üé¨ –ü–†–û–°–¢–û–ô –ì–ï–ù–ï–†–ê–¢–û–† –ö–õ–ò–ü–û–í –ò–ó –§–ò–õ–¨–ú–û–í
–°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–µ–æ —Å —Ü–∏—Ç–∞—Ç–∞–º–∏ –∏–∑ —Ñ–∏–ª—å–º–æ–≤ –∏ —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏
"""

import asyncio
import sys
import os
from pathlib import Path
import logging
import random

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
current_dir = Path(__file__).parent
src_path = current_dir / "src"
sys.path.insert(0, str(src_path))
sys.path.insert(0, str(current_dir))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)s | %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

logger = logging.getLogger(__name__)

# –ë–∞–∑–∞ —Ü–∏—Ç–∞—Ç –∏–∑ —Ñ–∏–ª—å–º–æ–≤
MOVIE_QUOTES = [
    {
        "movie": "–ñ–ï–õ–ï–ó–ù–´–ô –ß–ï–õ–û–í–ï–ö",
        "character": "–¢–æ–Ω–∏ –°—Ç–∞—Ä–∫",
        "quote": "–Ø - –ñ–µ–ª–µ–∑–Ω—ã–π —á–µ–ª–æ–≤–µ–∫",
        "theme": "#–¢–ï–•–ù–û–õ–û–ì–ò–ò #–ì–ï–†–û–ô #MARVEL",
        "color": "red"
    },
    {
        "movie": "–¢–ï–ú–ù–´–ô –†–´–¶–ê–†–¨",
        "character": "–î–∂–æ–∫–µ—Ä", 
        "quote": "–ü–æ—á–µ–º—É —Ç–∞–∫ —Å–µ—Ä—å–µ–∑–Ω–æ?",
        "theme": "#–ü–°–ò–•–û–õ–û–ì–ò–Ø #–•–ê–û–° #DC",
        "color": "purple"
    },
    {
        "movie": "–í–û–õ–ö –° –£–û–õ–õ-–°–¢–†–ò–¢",
        "character": "–î–∂–æ—Ä–¥–∞–Ω –ë–µ–ª—Ñ–æ—Ä—Ç",
        "quote": "–ü—Ä–æ–¥–∞–π –º–Ω–µ —ç—Ç—É —Ä—É—á–∫—É",
        "theme": "#–î–ï–ù–¨–ì–ò #–ë–ò–ó–ù–ï–° #–ü–†–û–î–ê–ñ–ò",
        "color": "green"
    },
    {
        "movie": "–ú–ê–¢–†–ò–¶–ê",
        "character": "–ú–æ—Ä—Ñ–µ—É—Å",
        "quote": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–∞–ª—å–Ω—ã–π –º–∏—Ä",
        "theme": "#–†–ï–ê–õ–¨–ù–û–°–¢–¨ #–í–´–ë–û–† #–§–ò–õ–û–°–û–§–ò–Ø",
        "color": "lime"
    },
    {
        "movie": "–ö–†–ï–°–¢–ù–´–ô –û–¢–ï–¶",
        "character": "–î–æ–Ω –ö–æ—Ä–ª–µ–æ–Ω–µ",
        "quote": "–°–µ–º—å—è - —ç—Ç–æ –≤—Å–µ",
        "theme": "#–°–ï–ú–¨–Ø #–í–õ–ê–°–¢–¨ #–ö–õ–ê–°–°–ò–ö–ê",
        "color": "gold"
    },
    {
        "movie": "–§–û–†–†–ï–°–¢ –ì–ê–ú–ü",
        "character": "–§–æ—Ä—Ä–µ—Å—Ç –ì–∞–º–ø",
        "quote": "–ñ–∏–∑–Ω—å –∫–∞–∫ –∫–æ—Ä–æ–±–∫–∞ —à–æ–∫–æ–ª–∞–¥–æ–∫",
        "theme": "#–ú–£–î–†–û–°–¢–¨ #–ñ–ò–ó–ù–¨ #–ú–û–¢–ò–í–ê–¶–ò–Ø",
        "color": "brown"
    },
    {
        "movie": "–¢–ï–†–ú–ò–ù–ê–¢–û–†",
        "character": "–¢–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä",
        "quote": "–Ø –≤–µ—Ä–Ω—É—Å—å",
        "theme": "#–§–ê–ù–¢–ê–°–¢–ò–ö–ê #–ë–û–ï–í–ò–ö #–ö–£–õ–¨–¢",
        "color": "silver"
    },
    {
        "movie": "–ó–í–ï–ó–î–ù–´–ï –í–û–ô–ù–´",
        "character": "–î–∞—Ä—Ç –í–µ–π–¥–µ—Ä",
        "quote": "–î–∞ –ø—Ä–µ–±—É–¥–µ—Ç —Å —Ç–æ–±–æ–π –°–∏–ª–∞",
        "theme": "#–°–ò–õ–ê #–ö–û–°–ú–û–° #–≠–ü–ò–ö",
        "color": "blue"
    }
]

def create_simple_movie_clip():
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –∫–ª–∏–ø –∏–∑ —Ñ–∏–ª—å–º–∞ —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏
    """
    try:
        logger.info("üé¨ –°–æ–∑–¥–∞–µ–º –∫–ª–∏–ø –∏–∑ —Ñ–∏–ª—å–º–∞ —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏...")
        
        from moviepy.editor import (
            TextClip, ColorClip, CompositeVideoClip, AudioFileClip
        )
        import numpy as np
        
        os.environ['IMAGEMAGICK_BINARY'] = '/opt/homebrew/bin/convert'
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É
        quote_data = random.choice(MOVIE_QUOTES)
        logger.info(f"üé≠ –§–∏–ª—å–º: {quote_data['movie']}")
        logger.info(f"üë§ –ü–µ—Ä—Å–æ–Ω–∞–∂: {quote_data['character']}")
        logger.info(f"üí¨ –¶–∏—Ç–∞—Ç–∞: {quote_data['quote']}")
        
        duration = 15
        
        # –§–æ–Ω (—Ç–µ–º–Ω—ã–π –¥–ª—è –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ—Å—Ç–∏)
        background = ColorClip(size=(1080, 1920), color=(20, 20, 30), duration=duration)
        
        # –ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ —Å–Ω–∏–∑—É –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤
        subtitle_bg = ColorClip(size=(1080, 400), color=(0, 0, 0), duration=duration)
        subtitle_bg = subtitle_bg.set_opacity(0.8).set_position(('center', 1400))
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ (–≤–≤–µ—Ä—Ö—É)
        title = TextClip(
            quote_data['movie'],
            fontsize=70,
            color='white',
            font='Arial-Bold'
        ).set_position(('center', 100)).set_duration(duration)
        
        # –ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        character = TextClip(
            quote_data['character'],
            fontsize=50,
            color='yellow',
            font='Arial-Bold'
        ).set_position(('center', 200)).set_duration(duration)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ (—Å—É–±—Ç–∏—Ç—Ä—ã)
        main_quote = TextClip(
            f'"{quote_data["quote"]}"',
            fontsize=80,
            color='white',
            font='Arial-Bold',
            size=(950, None),
            method='caption',
            align='center'
        ).set_position(('center', 1450)).set_duration(10).set_start(3)
        
        # –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ö–µ—à—Ç–µ–≥–∏
        hashtags = TextClip(
            quote_data['theme'],
            fontsize=35,
            color='cyan',
            font='Arial-Bold'
        ).set_position(('center', 1700)).set_duration(duration)
        
        # –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
        cta = TextClip(
            "üëç –õ–ê–ô–ö –ï–°–õ–ò –£–ó–ù–ê–õ!\nüîî –ü–û–î–ü–ò–®–ò–°–¨ –ù–ê –ë–û–õ–¨–®–ï!",
            fontsize=50,
            color='red',
            font='Arial-Bold',
            size=(800, None),
            method='caption',
            align='center'
        ).set_position(('center', 800)).set_duration(6).set_start(9)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        context = TextClip(
            "–õ–ï–ì–ï–ù–î–ê–†–ù–ê–Ø –¶–ò–¢–ê–¢–ê",
            fontsize=40,
            color='orange',
            font='Arial-Bold'
        ).set_position(('center', 300)).set_duration(duration)
        
        logger.info("üé¨ –°–æ–±–∏—Ä–∞–µ–º –∫–ª–∏–ø...")
        
        # –ö–æ–º–ø–æ–∑–∏—Ü–∏—è
        elements = [
            background,
            subtitle_bg,
            title,
            character,
            context,
            main_quote,
            hashtags,
            cta
        ]
        
        final_clip = CompositeVideoClip(elements)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–≤—É–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
        audio_dir = Path("viral_assets/audio")
        music_file = audio_dir / "background_electronic.wav"
        
        if music_file.exists():
            music = AudioFileClip(str(music_file))
            music = music.set_duration(duration).volumex(0.3)
            final_clip = final_clip.set_audio(music)
            logger.info("üéµ –î–æ–±–∞–≤–ª–µ–Ω–∞ –º—É–∑—ã–∫–∞")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        output_dir = Path("ready_videos")
        output_dir.mkdir(exist_ok=True)
        
        from datetime import datetime
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        movie_safe = quote_data['movie'].replace(' ', '_').replace('-', '_')
        output_path = output_dir / f"MOVIE_{movie_safe}_{timestamp}.mp4"
        
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º: {output_path}")
        
        final_clip.write_videofile(
            str(output_path),
            fps=24,
            codec='libx264',
            bitrate="5000k",
            audio_codec='aac' if music_file.exists() else None,
            verbose=False,
            logger=None,
            temp_audiofile='temp-audio.m4a' if music_file.exists() else None,
            remove_temp=True
        )
        
        file_size = output_path.stat().st_size / 1024 / 1024
        
        logger.info("üéâ –ö–õ–ò–ü –ò–ó –§–ò–õ–¨–ú–ê –°–û–ó–î–ê–ù!")
        logger.info(f"üìÅ –§–∞–π–ª: {output_path}")
        logger.info(f"üìè –†–∞–∑–º–µ—Ä: {file_size:.1f} MB")
        
        return str(output_path)
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return None

def create_multiple_movie_clips(count=3):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–ø–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤
    """
    logger.info(f"üé¨ –°–æ–∑–¥–∞–µ–º {count} –∫–ª–∏–ø–æ–≤ –∏–∑ —Ñ–∏–ª—å–º–æ–≤...")
    
    results = []
    used_movies = []
    
    for i in range(count):
        # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å–º, –∫–æ—Ç–æ—Ä—ã–π –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏
        available_quotes = [q for q in MOVIE_QUOTES if q['movie'] not in used_movies]
        
        if not available_quotes:
            logger.warning(f"‚ö†Ô∏è –ë–æ–ª—å—à–µ —Ñ–∏–ª—å–º–æ–≤ –Ω–µ—Ç, —Å–æ–∑–¥–∞–Ω–æ {i} –∫–ª–∏–ø–æ–≤")
            break
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –º–µ–Ω—è–µ–º –≤—ã–±–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö –∫–ª–∏–ø–æ–≤
        selected_quote = random.choice(available_quotes)
        used_movies.append(selected_quote['movie'])
        
        # –ü–æ–¥–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä
        original_choice = random.choice
        def fixed_choice(lst):
            if lst == MOVIE_QUOTES:
                return selected_quote
            return original_choice(lst)
        
        random.choice = fixed_choice
        
        logger.info(f"üìπ –°–æ–∑–¥–∞–µ–º –∫–ª–∏–ø {i+1}/{count}: {selected_quote['movie']}")
        
        result = create_simple_movie_clip()
        if result:
            results.append(result)
            logger.info(f"‚úÖ –ö–ª–∏–ø {i+1} –≥–æ—Ç–æ–≤")
        else:
            logger.warning(f"‚ö†Ô∏è –ö–ª–∏–ø {i+1} –Ω–µ —Å–æ–∑–¥–∞–Ω")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        random.choice = original_choice
    
    return results

def create_movie_compilation_simple():
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é –∫–æ–º–ø–∏–ª—è—Ü–∏—é —Ü–∏—Ç–∞—Ç –∏–∑ —Ñ–∏–ª—å–º–æ–≤
    """
    try:
        logger.info("üé¨ –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∏–ª—è—Ü–∏—é —Ü–∏—Ç–∞—Ç –∏–∑ —Ñ–∏–ª—å–º–æ–≤...")
        
        from moviepy.editor import (
            TextClip, ColorClip, CompositeVideoClip, 
            concatenate_videoclips, AudioFileClip
        )
        
        # –í—ã–±–∏—Ä–∞–µ–º 4 —Ä–∞–∑–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã
        selected_quotes = random.sample(MOVIE_QUOTES, min(4, len(MOVIE_QUOTES)))
        clips = []
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
        intro_bg = ColorClip(size=(1080, 1920), color=(10, 10, 20), duration=4)
        
        intro_text = TextClip(
            "–¢–û–ü –¶–ò–¢–ê–¢–´\n–ò–ó –§–ò–õ–¨–ú–û–í üé¨\n\n–£–ó–ù–ê–ï–®–¨ –í–°–ï?",
            fontsize=90,
            color='gold',
            font='Arial-Bold',
            size=(900, None),
            method='caption',
            align='center'
        ).set_position('center').set_duration(4)
        
        intro = CompositeVideoClip([intro_bg, intro_text])
        clips.append(intro)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–ø—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Ü–∏—Ç–∞—Ç—ã
        for i, quote_data in enumerate(selected_quotes):
            logger.info(f"üé≠ –î–æ–±–∞–≤–ª—è–µ–º: {quote_data['movie']}")
            
            clip_duration = 6
            
            # –§–æ–Ω –¥–ª—è –∫–ª–∏–ø–∞
            bg_colors = [(20, 20, 40), (40, 20, 20), (20, 40, 20), (40, 40, 20)]
            bg_color = bg_colors[i % len(bg_colors)]
            
            bg = ColorClip(size=(1080, 1920), color=bg_color, duration=clip_duration)
            
            # –ù–æ–º–µ—Ä —Ü–∏—Ç–∞—Ç—ã
            number = TextClip(
                f"#{i+1}",
                fontsize=120,
                color='red',
                font='Arial-Bold'
            ).set_position(('center', 100)).set_duration(clip_duration)
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞
            title = TextClip(
                quote_data['movie'],
                fontsize=60,
                color='white',
                font='Arial-Bold'
            ).set_position(('center', 250)).set_duration(clip_duration)
            
            # –ü–µ—Ä—Å–æ–Ω–∞–∂
            character = TextClip(
                quote_data['character'],
                fontsize=45,
                color='yellow',
                font='Arial-Bold'
            ).set_position(('center', 350)).set_duration(clip_duration)
            
            # –¶–∏—Ç–∞—Ç–∞
            quote = TextClip(
                f'"{quote_data["quote"]}"',
                fontsize=70,
                color='white',
                font='Arial-Bold',
                size=(900, None),
                method='caption',
                align='center'
            ).set_position('center').set_duration(clip_duration)
            
            # –¢–µ–º–∞
            theme = TextClip(
                quote_data['theme'],
                fontsize=35,
                color='cyan',
                font='Arial-Bold'
            ).set_position(('center', 1600)).set_duration(clip_duration)
            
            # –°–æ–±–∏—Ä–∞–µ–º –∫–ª–∏–ø
            clip = CompositeVideoClip([bg, number, title, character, quote, theme])
            clips.append(clip)
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑—ã–≤
        outro_bg = ColorClip(size=(1080, 1920), color=(20, 10, 30), duration=3)
        
        outro_text = TextClip(
            "–ü–û–ù–†–ê–í–ò–õ–û–°–¨?\n\nüëç –õ–ê–ô–ö! üîî –ü–û–î–ü–ò–°–ö–ê!\n\n–ë–û–õ–¨–®–ï –¶–ò–¢–ê–¢ –°–ö–û–†–û!",
            fontsize=75,
            color='lime',
            font='Arial-Bold',
            size=(900, None),
            method='caption',
            align='center'
        ).set_position('center').set_duration(3)
        
        outro = CompositeVideoClip([outro_bg, outro_text])
        clips.append(outro)
        
        # –°–æ–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–ª–∏–ø—ã
        final_compilation = concatenate_videoclips(clips, method="compose")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º—É–∑—ã–∫—É
        audio_dir = Path("viral_assets/audio")
        music_file = audio_dir / "background_electronic.wav"
        
        if music_file.exists():
            music = AudioFileClip(str(music_file))
            music = music.set_duration(final_compilation.duration).volumex(0.25)
            final_compilation = final_compilation.set_audio(music)
            logger.info("üéµ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        output_dir = Path("ready_videos")
        output_dir.mkdir(exist_ok=True)
        
        from datetime import datetime
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_path = output_dir / f"MOVIE_COMPILATION_{timestamp}.mp4"
        
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–ø–∏–ª—è—Ü–∏—é: {output_path}")
        
        final_compilation.write_videofile(
            str(output_path),
            fps=24,
            codec='libx264',
            bitrate="6000k",
            audio_codec='aac' if music_file.exists() else None,
            verbose=False,
            logger=None,
            temp_audiofile='temp-audio.m4a' if music_file.exists() else None,
            remove_temp=True
        )
        
        file_size = output_path.stat().st_size / 1024 / 1024
        
        logger.info("üéâ –ö–û–ú–ü–ò–õ–Ø–¶–ò–Ø –ì–û–¢–û–í–ê!")
        logger.info(f"üìÅ –§–∞–π–ª: {output_path}")
        logger.info(f"üìè –†–∞–∑–º–µ—Ä: {file_size:.1f} MB")
        logger.info(f"üé¨ –¶–∏—Ç–∞—Ç: {len(selected_quotes)}")
        
        return str(output_path)
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return None

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    print("üé¨" + "="*70)
    print("         –ì–ï–ù–ï–†–ê–¢–û–† –ö–õ–ò–ü–û–í –ò–ó –§–ò–õ–¨–ú–û–í")
    print("        (—Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö)")
    print("="*74)
    
    print("\nüé≠ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–ª—å–º—ã:")
    for i, quote in enumerate(MOVIE_QUOTES[:5], 1):
        print(f"{i}. {quote['movie']} - \"{quote['quote']}\"")
    print("   ... –∏ –¥—Ä—É–≥–∏–µ")
    
    print(f"\nüé¨ –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:")
    print("1. –°–æ–∑–¥–∞—Ç—å –æ–¥–∏–Ω —Å–ª—É—á–∞–π–Ω—ã–π –∫–ª–∏–ø")
    print("2. –°–æ–∑–¥–∞—Ç—å 3 —Ä–∞–∑–Ω—ã—Ö –∫–ª–∏–ø–∞")
    print("3. –°–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–∏–ª—è—Ü–∏—é —Ü–∏—Ç–∞—Ç")
    print("4. –°–æ–∑–¥–∞—Ç—å –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã")
    
    choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-4): ").strip()
    
    results = []
    
    if choice == "1":
        logger.info("üé≤ –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∫–ª–∏–ø...")
        result = create_simple_movie_clip()
        if result:
            results.append(result)
            
    elif choice == "2":
        logger.info("üé≠ –°–æ–∑–¥–∞–µ–º 3 –∫–ª–∏–ø–∞...")
        results = create_multiple_movie_clips(3)
        
    elif choice == "3":
        logger.info("üìΩÔ∏è –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∏–ª—è—Ü–∏—é...")
        result = create_movie_compilation_simple()
        if result:
            results.append(result)
            
    elif choice == "4":
        logger.info("üé¨ –°–æ–∑–¥–∞–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã...")
        
        # –û–¥–∏–Ω —Å–ª—É—á–∞–π–Ω—ã–π –∫–ª–∏–ø
        result1 = create_simple_movie_clip()
        if result1:
            results.append(result1)
        
        # –ù–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–ø–æ–≤
        results.extend(create_multiple_movie_clips(3))
        
        # –ö–æ–º–ø–∏–ª—è—Ü–∏—è
        result2 = create_movie_compilation_simple()
        if result2:
            results.append(result2)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if results:
        print(f"\nüéâ –£–°–ü–ï–•! –°–æ–∑–¥–∞–Ω–æ –≤–∏–¥–µ–æ: {len(results)}")
        
        for i, result in enumerate(results, 1):
            file_size = Path(result).stat().st_size / 1024 / 1024
            print(f"üìπ –í–∏–¥–µ–æ {i}: {Path(result).name} ({file_size:.1f} MB)")
        
        print(f"\nüéØ –°–æ–∑–¥–∞–Ω—ã –≤–∏–¥–µ–æ —Å:")
        print("‚úÖ –¶–∏—Ç–∞—Ç–∞–º–∏ –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤")
        print("‚úÖ –°—É–±—Ç–∏—Ç—Ä–∞–º–∏ –∫–∞–∫ –≤ –≤–∞—à–∏—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö")  
        print("‚úÖ –ò–º–µ–Ω–∞–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ —Ñ–∏–ª—å–º–æ–≤")
        print("‚úÖ –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ö–µ—à—Ç–µ–≥–∞–º–∏")
        print("‚úÖ –ü—Ä–∏–∑—ã–≤–∞–º–∏ –∫ –¥–µ–π—Å—Ç–≤–∏—é")
        print("‚úÖ –ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º")
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–ø–∫—É
        open_folder = input("\nüóÇÔ∏è –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å –≤–∏–¥–µ–æ? (y/n): ").strip().lower()
        if open_folder == 'y':
            import subprocess
            subprocess.run(["open", "ready_videos"])
    else:
        print("\n‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∏–¥–µ–æ –Ω–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã.")

if __name__ == "__main__":
    main()