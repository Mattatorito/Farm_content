#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üé¨ –§–ò–ù–ê–õ–¨–ù–´–ô –ì–ï–ù–ï–†–ê–¢–û–† –í–ò–†–£–°–ù–û–ì–û –í–ò–î–ï–û
–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏, –∑–≤—É–∫–æ–º –∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import asyncio
import sys
import os
from pathlib import Path
import logging
import random

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
current_dir = Path(__file__).parent
src_path = current_dir / "src"
sys.path.insert(0, str(src_path))
sys.path.insert(0, str(current_dir))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)s | %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

logger = logging.getLogger(__name__)

def create_complete_viral_video():
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –≤–∏—Ä—É—Å–Ω–æ–µ –≤–∏–¥–µ–æ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏, –∑–≤—É–∫–æ–º –∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
    """
    try:
        logger.info("üé¨ –°–æ–∑–¥–∞–µ–º –ü–û–õ–ù–û–¶–ï–ù–ù–û–ï –≤–∏—Ä—É—Å–Ω–æ–µ –≤–∏–¥–µ–æ...")
        
        from moviepy.editor import (
            TextClip, ImageClip, CompositeVideoClip, 
            AudioFileClip, vfx, ColorClip
        )
        import numpy as np
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –∫ ImageMagick
        os.environ['IMAGEMAGICK_BINARY'] = '/opt/homebrew/bin/convert'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
        backgrounds_dir = Path("viral_assets/backgrounds")
        audio_dir = Path("viral_assets/audio")
        
        if not backgrounds_dir.exists() or not list(backgrounds_dir.glob("*.jpg")):
            logger.error("‚ùå –§–æ–Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return None
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
        background_files = list(backgrounds_dir.glob("*.jpg"))
        background_path = str(random.choice(background_files))
        
        logger.info(f"üé® –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ–Ω: {Path(background_path).name}")
        
        # –°–û–ó–î–ê–ï–ú –§–û–ù–û–í–û–ï –í–ò–î–ï–û –° –≠–§–§–ï–ö–¢–ê–ú–ò
        logger.info("üé® –°–æ–∑–¥–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ñ–æ–Ω...")
        
        background = ImageClip(background_path, duration=30)
        background = background.resize((1080, 1920))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π –∑—É–º + –ª–µ–≥–∫–æ–µ –ø–æ–∫–∞—á–∏–≤–∞–Ω–∏–µ
        background = background.resize(lambda t: 1 + 0.05*np.sin(t*0.3))
        background = background.set_position(lambda t: (np.sin(t*0.2)*20, np.cos(t*0.15)*15))
        
        # –¶–≤–µ—Ç–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã
        color_overlay = ColorClip(size=(1080, 1920), color=(255, 100, 0))  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
        color_overlay = color_overlay.set_opacity(0.15).set_duration(30)
        
        # –ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
        dark_overlay = ColorClip(size=(1080, 1920), color=(0, 0, 0))
        dark_overlay = dark_overlay.set_opacity(0.3).set_duration(30)
        
        logger.info("üìù –°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç...")
        
        # –¢–ï–ö–°–¢–û–í–´–ï –≠–õ–ï–ú–ï–ù–¢–´ –° –ú–û–©–ù–´–ú–ò –≠–§–§–ï–ö–¢–ê–ú–ò
        texts = []
        
        # 1. –í–ó–†–´–í–ù–û–ô –•–£–ö (0-4 —Å–µ–∫)
        hook = TextClip(
            "üí• –®–û–ö! üí•\n–ú–ò–õ–õ–ò–ê–†–î–ï–†–´\n–°–ö–†–´–í–ê–õ–ò –≠–¢–û!",
            fontsize=95,
            color='red',
            font='Arial-Bold',
            size=(900, None),
            method='caption',
            align='center',
            stroke_color='white',
            stroke_width=4
        ).set_position('center').set_duration(4).set_start(0)
        
        # –í–∑—Ä—ã–≤–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç + –ø—É–ª—å—Å–∞—Ü–∏—è
        hook = hook.resize(lambda t: 0.3 + 1.2*np.exp(-3*t) + 0.1*np.sin(15*t))
        hook = hook.crossfadein(0.5)
        texts.append(hook)
        
        # 2. –ò–ù–¢–†–ò–ì–ê (4-10 —Å–µ–∫)
        mystery = TextClip(
            "–°–ï–ö–†–ï–¢–ù–ê–Ø\n–§–û–†–ú–£–õ–ê –£–°–ü–ï–•–ê\n–ò–ó–ú–ï–ù–ò–¢ –í–°–Å!",
            fontsize=85,
            color='yellow',
            font='Arial-Bold',
            size=(850, None),
            method='caption',
            align='center',
            stroke_color='black',
            stroke_width=3
        ).set_position('center').set_duration(6).set_start(4)
        
        # –≠—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–∏—è + –ø–æ–∫–∞—á–∏–≤–∞–Ω–∏–µ
        mystery = mystery.set_position(lambda t: ('center', 'center') if t > 1 else (-800 + 800*t, 'center'))
        mystery = mystery.resize(lambda t: 1 + 0.05*np.sin(8*t))
        texts.append(mystery)
        
        # 3. –†–ê–°–ö–†–´–¢–ò–ï (10-18 —Å–µ–∫)
        reveal = TextClip(
            "–¢–û–õ–¨–ö–û 1% –õ–Æ–î–ï–ô\n–ó–ù–ê–Æ–¢ –≠–¢–û–¢ –¢–†–Æ–ö!\n\nüî• –°–ú–û–¢–†–ò –í–ù–ò–ú–ê–¢–ï–õ–¨–ù–û üî•",
            fontsize=75,
            color='lime',
            font='Arial-Bold',
            size=(800, None),
            method='caption',
            align='center',
            stroke_color='darkgreen',
            stroke_width=3
        ).set_position('center').set_duration(8).set_start(10)
        
        # –ó—É–º + –≤—Ä–∞—â–µ–Ω–∏–µ
        reveal = reveal.resize(lambda t: 0.5 + 0.7*t if t < 1 else 1.2 - 0.2*np.sin(5*t))
        reveal = reveal.rotate(lambda t: 5*np.sin(t*2))
        texts.append(reveal)
        
        # 4. –ü–†–ò–ó–´–í –ö –î–ï–ô–°–¢–í–ò–Æ (18-25 —Å–µ–∫)
        cta = TextClip(
            "–ü–û–î–ü–ò–®–ò–°–¨ –ü–†–Ø–ú–û –°–ï–ô–ß–ê–°!\n\nüëÜ –ù–ï –£–ü–£–°–¢–ò –®–ê–ù–°! üëÜ\n\n–¢–û–õ–¨–ö–û –°–ï–ì–û–î–ù–Ø!",
            fontsize=70,
            color='red',
            font='Arial-Bold',
            size=(900, None),
            method='caption',
            align='center',
            stroke_color='white',
            stroke_width=4
        ).set_position('center').set_duration(7).set_start(18)
        
        # –ú–æ—â–Ω–∞—è –ø—É–ª—å—Å–∞—Ü–∏—è
        cta = cta.resize(lambda t: 1 + 0.2*np.sin(12*t))
        texts.append(cta)
        
        # 5. –§–ò–ù–ê–õ–¨–ù–´–ô –ü–†–ò–ó–´–í (25-30 —Å–µ–∫)
        final = TextClip(
            "üöÄ –°–¢–ê–ù–¨ –ú–ò–õ–õ–ò–û–ù–ï–†–û–ú! üöÄ",
            fontsize=90,
            color='gold',
            font='Arial-Bold',
            stroke_color='black',
            stroke_width=4
        ).set_position('center').set_duration(5).set_start(25)
        
        # –†–∞–¥—É–∂–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç (—Å–º–µ–Ω–∞ —Ü–≤–µ—Ç–æ–≤)
        colors = ['red', 'orange', 'yellow', 'lime', 'cyan', 'magenta']
        final = final.resize(lambda t: 1 + 0.3*np.sin(10*t))
        texts.append(final)
        
        logger.info("üéµ –î–æ–±–∞–≤–ª—è–µ–º –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã...")
        
        # –î–û–ë–ê–í–õ–Ø–ï–ú –ó–í–£–ö –ï–°–õ–ò –î–û–°–¢–£–ü–ï–ù
        audio_clips = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–≤—É–∫–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        audio_files = {
            "impact": audio_dir / "impact.wav",
            "swoosh": audio_dir / "swoosh.wav", 
            "glitch": audio_dir / "glitch.wav",
            "music": audio_dir / "background_electronic.wav"
        }
        
        # –§–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞
        if audio_files["music"].exists():
            bg_music = AudioFileClip(str(audio_files["music"]))
            bg_music = bg_music.set_duration(30).volumex(0.3)  # –¢–∏—Ö–∞—è —Ñ–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞
            audio_clips.append(bg_music)
            logger.info("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞")
        
        # –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –≤ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
        if audio_files["impact"].exists():
            # –£–¥–∞—Ä –≤ –Ω–∞—á–∞–ª–µ
            impact1 = AudioFileClip(str(audio_files["impact"])).set_start(0).volumex(0.8)
            # –£–¥–∞—Ä –ø—Ä–∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏
            impact2 = AudioFileClip(str(audio_files["impact"])).set_start(10).volumex(0.6)
            audio_clips.extend([impact1, impact2])
            logger.info("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —É–¥–∞—Ä–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã")
        
        if audio_files["swoosh"].exists():
            # –°–≤—É—à –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞—Ö
            swoosh1 = AudioFileClip(str(audio_files["swoosh"])).set_start(4).volumex(0.5)
            swoosh2 = AudioFileClip(str(audio_files["swoosh"])).set_start(18).volumex(0.5)
            audio_clips.extend([swoosh1, swoosh2])
            logger.info("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –ø–µ—Ä–µ—Ö–æ–¥–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã")
        
        logger.info("üé¨ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –°–£–ü–ï–† –≤–∏–¥–µ–æ...")
        
        # –°–û–ó–î–ê–ï–ú –§–ò–ù–ê–õ–¨–ù–£–Æ –ö–û–ú–ü–û–ó–ò–¶–ò–Æ
        video_elements = [background, color_overlay, dark_overlay] + texts
        
        final_video = CompositeVideoClip(video_elements)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–≤—É–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
        if audio_clips:
            from moviepy.editor import CompositeAudioClip
            final_audio = CompositeAudioClip(audio_clips)
            final_video = final_video.set_audio(final_audio)
            logger.info("‚úÖ –ó–≤—É–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ –≤–∏–¥–µ–æ")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        final_video = final_video.fx(vfx.fadein, 1).fx(vfx.fadeout, 1)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        output_dir = Path("ready_videos")
        output_dir.mkdir(exist_ok=True)
        
        from datetime import datetime
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_path = output_dir / f"FINAL_VIRAL_{timestamp}.mp4"
        
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–ù–ê–õ–¨–ù–û–ï –≤–∏–¥–µ–æ: {output_path}")
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        final_video.write_videofile(
            str(output_path),
            fps=30,
            codec='libx264',
            bitrate="12000k",  # –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô –±–∏—Ç—Ä–µ–π—Ç
            audio_codec='aac',
            verbose=False,
            logger=None,
            preset='slow',  # –õ—É—á—à–µ–µ —Å–∂–∞—Ç–∏–µ
            temp_audiofile='temp-audio.m4a',
            remove_temp=True
        )
        
        file_size = output_path.stat().st_size / 1024 / 1024
        
        logger.info("üéâüéâüéâ –§–ò–ù–ê–õ–¨–ù–û–ï –í–ò–î–ï–û –°–û–ó–î–ê–ù–û! üéâüéâüéâ")
        logger.info(f"üìÅ –§–∞–π–ª: {output_path}")
        logger.info(f"üìè –†–∞–∑–º–µ—Ä: {file_size:.1f} MB")
        logger.info(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 30 —Å–µ–∫—É–Ω–¥")
        logger.info(f"üéØ –ö–∞—á–µ—Å—Ç–≤–æ: –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ï (12000k –±–∏—Ç—Ä–µ–π—Ç)")
        logger.info(f"üéµ –ó–≤—É–∫: {'–î–ê' if audio_clips else '–ù–ï–¢'}")
        logger.info(f"‚ú® –≠—Ñ—Ñ–µ–∫—Ç—ã: –ê–Ω–∏–º–∞—Ü–∏—è, –∑—É–º, –ø—É–ª—å—Å–∞—Ü–∏—è, –ø–µ—Ä–µ—Ö–æ–¥—ã")
        
        return str(output_path)
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ: {str(e)}")
        import traceback
        traceback.print_exc()
        return None

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    print("üé¨" + "="*80)
    print("              –§–ò–ù–ê–õ–¨–ù–´–ô –ì–ï–ù–ï–†–ê–¢–û–† –í–ò–†–£–°–ù–û–ì–û –í–ò–î–ï–û")
    print("                (–ö–ê–ö –í –í–ê–®–ò–• –ü–†–ò–ú–ï–†–ê–•)")
    print("="*84)
    
    print("\nüéØ –≠—Ç–æ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞—Å—Ç –≤–∏–¥–µ–æ –¢–û–ß–ù–û –∫–∞–∫ –≤ –≤–∞—à–∏—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö:")
    print("‚úÖ –ö—Ä–∞—Å–∏–≤—ã–µ —Ñ–æ–Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    print("‚úÖ –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏")
    print("‚úÖ –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏ –º—É–∑—ã–∫–∞")
    print("‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –∏ –∑—É–º—ã")
    print("‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (12k –±–∏—Ç—Ä–µ–π—Ç)")
    print("‚úÖ –í–∏—Ä—É—Å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –ø—Ä–∏–∑—ã–≤—ã")
    
    input("\nüöÄ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –§–ò–ù–ê–õ–¨–ù–û–ì–û –≤–∏–¥–µ–æ...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
    logger.info("üìÇ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤...")
    
    backgrounds_dir = Path("viral_assets/backgrounds")
    audio_dir = Path("viral_assets/audio")
    
    if not backgrounds_dir.exists() or not list(backgrounds_dir.glob("*.jpg")):
        logger.warning("‚ö†Ô∏è –§–æ–Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Å–æ–∑–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        sys.path.append('.')
        try:
            from advanced_viral_generator import download_background_images
            download_background_images()
        except:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–æ–Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
    
    if not audio_dir.exists() or not list(audio_dir.glob("*.wav")):
        logger.warning("‚ö†Ô∏è –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –°–æ–∑–¥–∞–µ–º...")
        
        try:
            from audio_generator import generate_audio_effects, create_background_music
            generate_audio_effects()
            create_background_music()
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–≤—É–∫–∏: {e}")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ
    result = create_complete_viral_video()
    
    if result:
        print(f"\nüéâüéâüéâ –£–°–ü–ï–•! –§–ò–ù–ê–õ–¨–ù–û–ï –í–ò–î–ï–û –°–û–ó–î–ê–ù–û! üéâüéâüéâ")
        print(f"üìπ –ü—É—Ç—å: {result}")
        
        print(f"\nüéØ –≠–¢–û –í–ò–î–ï–û –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ë–õ–ò–ó–ö–û –ö –í–ê–®–ò–ú –ü–†–ò–ú–ï–†–ê–ú:")
        print(f"üî• –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ")
        print(f"üé® –ö—Ä–∞—Å–∏–≤—ã–µ —Ñ–æ–Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        print(f"‚ö° –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏ –∞–Ω–∏–º–∞—Ü–∏—è")
        print(f"üéµ –ó–≤—É–∫–æ–≤–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ")
        print(f"üì± –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π")
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–ø–∫—É
        open_folder = input("\nüóÇÔ∏è –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å –≤–∏–¥–µ–æ? (y/n): ").strip().lower()
        if open_folder == 'y':
            import subprocess
            subprocess.run(["open", "ready_videos"])
            
    else:
        print("\n‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")

if __name__ == "__main__":
    main()