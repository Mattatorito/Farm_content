#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üß™ –¢–ï–°–¢–û–í–´–ô –°–ö–†–ò–ü–¢ - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
==============================================

–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã.
"""

import asyncio
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))


def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    print("üîç –¢–ï–°–¢ –ò–ú–ü–û–†–¢–û–í:")
    print("-" * 40)

    tests = [
        (
            "TrendingClipExtractor",
            "from trending_clip_extractor import TrendingClipExtractor",
        ),
        (
            "YouTubeAutoUploader",
            "from youtube_auto_uploader import YouTubeAutoUploader",
        ),
        ("URLProcessor", "from modules.url_processor import URLProcessor"),
        ("TrendAnalyzer", "from modules.trend_analyzer import TrendAnalyzer"),
        ("AIVideoGenerator", "from modules.ai_generator import AIVideoGenerator"),
        ("ViralContentWeb", "from web_gui import ViralContentWeb"),
        ("ViralContentCLI", "from cli_app import ViralContentCLI"),
    ]

    results = {}

    for name, import_cmd in tests:
        try:
            exec(import_cmd)
            print(f"‚úÖ {name}")
            results[name] = True
        except Exception as e:
            print(f"‚ùå {name}: {e}")
            results[name] = False

    return results


def test_basic_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"""
    print("\nüõ†Ô∏è –¢–ï–°–¢ –ë–ê–ó–û–í–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò:")
    print("-" * 40)

    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º TrendingClipExtractor
        from trending_clip_extractor import TrendingClipExtractor

        extractor = TrendingClipExtractor()

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        segments = extractor._find_best_segments(120, 3, 30, "smart")
        assert len(segments) > 0, "–ù–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å–µ–≥–º–µ–Ω—Ç—ã"
        print(f"‚úÖ TrendingClipExtractor: {len(segments)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º YouTubeAutoUploader
        from youtube_auto_uploader import YouTubeAutoUploader

        uploader = YouTubeAutoUploader()

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        metadata = uploader.generate_viral_metadata({"title": "Test"}, 8.0)
        assert "title" in metadata, "–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã"
        print(f"‚úÖ YouTubeAutoUploader: –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º URLProcessor
        from modules.url_processor import URLProcessor

        processor = URLProcessor()
        print(f"‚úÖ URLProcessor: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º TrendAnalyzer
        from modules.trend_analyzer import TrendAnalyzer

        analyzer = TrendAnalyzer()
        print(f"‚úÖ TrendAnalyzer: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º AIVideoGenerator
        from modules.ai_generator import AIVideoGenerator

        generator = AIVideoGenerator()
        print(f"‚úÖ AIVideoGenerator: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return False


def test_web_interface():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    print("\nüåê –¢–ï–°–¢ –í–ï–ë-–ò–ù–¢–ï–†–§–ï–ô–°–ê:")
    print("-" * 40)

    try:
        from web_gui import ViralContentWeb

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = ViralContentWeb()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–æ—É—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
        assert hasattr(app.app, "url_map"), "–†–æ—É—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"

        print("‚úÖ ViralContentWeb: –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {app.processing_status}")
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {app.stats}")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
        return False


def test_cli_interface():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    print("\nüíª –¢–ï–°–¢ –ö–û–ù–°–û–õ–¨–ù–û–ì–û –ò–ù–¢–ï–†–§–ï–ô–°–ê:")
    print("-" * 40)

    try:
        from cli_app import ViralContentCLI

        cli = ViralContentCLI()
        assert hasattr(cli, "current_mode"), "CLI –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"

        print("‚úÖ ViralContentCLI: –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
        print(f"‚úÖ –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {cli.current_mode}")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ CLI: {e}")
        return False


async def test_async_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"""
    print("\n‚ö° –¢–ï–°–¢ –ê–°–ò–ù–•–†–û–ù–ù–´–• –§–£–ù–ö–¶–ò–ô:")
    print("-" * 40)

    try:
        from modules.ai_generator import AIVideoGenerator
        from modules.trend_analyzer import TrendAnalyzer
        from modules.url_processor import URLProcessor

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–æ async –º–µ—Ç–æ–¥—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        processor = URLProcessor()
        assert hasattr(processor, "process_url"), "process_url –Ω–µ –Ω–∞–π–¥–µ–Ω"

        analyzer = TrendAnalyzer()
        assert hasattr(
            analyzer, "analyze_and_process_trends"
        ), "analyze_and_process_trends –Ω–µ –Ω–∞–π–¥–µ–Ω"

        generator = AIVideoGenerator()
        assert hasattr(generator, "generate_ai_videos"), "generate_ai_videos –Ω–µ –Ω–∞–π–¥–µ–Ω"

        print("‚úÖ –í—Å–µ async –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ async —Ñ—É–Ω–∫—Ü–∏–π: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–ò–†–£–°–ù–û–ô –ö–û–ù–¢–ï–ù–¢-–ú–ê–®–ò–ù–´ 2025")
    print("=" * 60)

    results = {}

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã
    import_results = test_imports()
    results["imports"] = all(import_results.values())

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    results["basic"] = test_basic_functionality()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    results["web"] = test_web_interface()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º CLI
    results["cli"] = test_cli_interface()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º async —Ñ—É–Ω–∫—Ü–∏–∏
    results["async"] = asyncio.run(test_async_functionality())

    # –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\nüìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 60)

    total_tests = len(results)
    passed_tests = sum(results.values())

    for test_name, result in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name.upper():<15}: {status}")

    print("-" * 60)
    print(f"–ò–¢–û–ì–û: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")

    if passed_tests == total_tests:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–ê!")
        print("üöÄ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å: python3 main_launcher.py")
        return True
    else:
        print(f"\n‚ö†Ô∏è {total_tests - passed_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
