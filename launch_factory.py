#!/usr/bin/env python3
"""
üöÄ –ó–ê–ü–£–°–ö –ö–û–ù–¢–ï–ù–¢-–§–ê–ë–†–ò–ö–ò
========================

–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –≤—Å–µ—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö.

–ö–æ–º–∞–Ω–¥—ã:
    python launch_factory.py               # –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Ñ–∞–±—Ä–∏–∫–∏
    python launch_factory.py --demo        # –î–µ–º–æ —Ä–µ–∂–∏–º
    python launch_factory.py --test        # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    python launch_factory.py --setup       # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
    python launch_factory.py --status      # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
"""

import asyncio
import argparse
import sys
import os
from pathlib import Path
from datetime import datetime
import json
import logging

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from content_factory_orchestrator import ContentFactoryOrchestrator
from multi_account_system import MultiAccountManager
from src.farm_content.utils.smart_scheduler import SmartScheduler
from src.farm_content.utils.platform_integrator import PlatformPublisher


class FactoryLauncher:
    """–õ–∞—É–Ω—á–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç-—Ñ–∞–±—Ä–∏–∫–∏"""
    
    def __init__(self):
        self.logger = self.setup_logging()
        self.check_dependencies()
    
    def setup_logging(self) -> logging.Logger:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ª–æ–≥–æ–≤
        Path("logs").mkdir(exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s | %(levelname)s | %(message)s',
            handlers=[
                logging.FileHandler('logs/launcher.log', encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        
        return logging.getLogger("FactoryLauncher")
    
    def check_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        
        required_packages = [
            'moviepy', 'aiohttp', 'schedule', 'psutil', 'pytz', 
            'yt-dlp', 'PIL', 'requests', 'numpy'
        ]
        
        missing_packages = []
        
        for package in required_packages:
            try:
                __import__(package)
            except ImportError:
                missing_packages.append(package)
        
        if missing_packages:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
            print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements_updated.txt")
            sys.exit(1)
    
    async def setup_system(self):
        """–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        
        print("‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ê –ö–û–ù–¢–ï–ù–¢-–§–ê–ë–†–ò–ö–ò")
        print("=" * 40)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        directories = [
            "config", "logs", "data/analytics", "generated_viral_content",
            "ready_videos", "backups", "viral_assets/audio", 
            "viral_assets/effects", "viral_assets/fonts", "viral_assets/templates"
        ]
        
        for directory in directories:
            Path(directory).mkdir(parents=True, exist_ok=True)
            print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        await self.create_config_files()
        
        print("\n‚úÖ –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏ –≤ config/platform_credentials.json")
        print("2. –î–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ config/accounts.json")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python launch_factory.py")
    
    async def create_config_files(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        accounts_config = {
            "accounts": {
                "ai_master_account": {
                    "name": "AI Master Channel",
                    "content_type": "ai_video", 
                    "platforms": ["youtube", "tiktok"],
                    "target_audience": "RU",
                    "posting_schedule": "auto",
                    "quality_threshold": 0.8,
                    "daily_limit": 5,
                    "description": "–ö–∞–Ω–∞–ª —Å AI-–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"
                },
                "trend_hunter_1": {
                    "name": "Trend Hunter #1",
                    "content_type": "trend_short",
                    "platforms": ["instagram", "tiktok"],
                    "target_audience": "RU",
                    "posting_schedule": "peak_hours",
                    "quality_threshold": 0.7,
                    "daily_limit": 8,
                    "description": "–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ —Ç—Ä–µ–Ω–¥–∞–º–∏ –∏ –≤–∏—Ä—É—Å–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"
                },
                "trend_hunter_2": {
                    "name": "Trend Hunter #2", 
                    "content_type": "trend_short",
                    "platforms": ["youtube", "tiktok"],
                    "target_audience": "RU",
                    "posting_schedule": "optimal",
                    "quality_threshold": 0.75,
                    "daily_limit": 6,
                    "description": "–í—Ç–æ—Ä–æ–π –∫–∞–Ω–∞–ª —Ç—Ä–µ–Ω–¥–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
                },
                "cinema_clips": {
                    "name": "Cinema Clips Master",
                    "content_type": "movie_clip",
                    "platforms": ["youtube", "instagram"],
                    "target_audience": "RU", 
                    "posting_schedule": "evening_peak",
                    "quality_threshold": 0.85,
                    "daily_limit": 4,
                    "description": "–õ—É—á—à–∏–µ –º–æ–º–µ–Ω—Ç—ã –∏–∑ —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤"
                }
            }
        }
        
        with open("config/accounts.json", 'w', encoding='utf-8') as f:
            json.dump(accounts_config, f, ensure_ascii=False, indent=2)
        print("üìÑ –°–æ–∑–¥–∞–Ω config/accounts.json")
        
        # –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API –∫–ª—é—á–µ–π
        api_config = {
            "youtube_account_1": {
                "platform": "youtube",
                "account_id": "YOUR_YOUTUBE_CHANNEL_ID",
                "client_id": "YOUR_GOOGLE_CLIENT_ID.googleusercontent.com",
                "client_secret": "YOUR_GOOGLE_CLIENT_SECRET",
                "access_token": "YOUR_ACCESS_TOKEN",
                "refresh_token": "YOUR_REFRESH_TOKEN"
            },
            "instagram_account_1": {
                "platform": "instagram",
                "account_id": "YOUR_INSTAGRAM_ACCOUNT_ID", 
                "access_token": "YOUR_INSTAGRAM_ACCESS_TOKEN"
            },
            "tiktok_account_1": {
                "platform": "tiktok",
                "account_id": "YOUR_TIKTOK_ACCOUNT_ID",
                "client_id": "YOUR_TIKTOK_CLIENT_KEY",
                "client_secret": "YOUR_TIKTOK_CLIENT_SECRET", 
                "access_token": "YOUR_TIKTOK_ACCESS_TOKEN"
            }
        }
        
        with open("config/platform_credentials_example.json", 'w', encoding='utf-8') as f:
            json.dump(api_config, f, ensure_ascii=False, indent=2)
        print("üìÑ –°–æ–∑–¥–∞–Ω config/platform_credentials_example.json")
    
    async def test_system(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
        
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´")
        print("=" * 30)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        tests = [
            ("–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤", self.test_account_manager),
            ("–£–º–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫", self.test_scheduler),
            ("–ü–ª–∞—Ç—Ñ–æ—Ä–º –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä", self.test_platform_integrator),
            ("–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Ñ–∞–±—Ä–∏–∫–∏", self.test_orchestrator)
        ]
        
        results = {}
        
        for test_name, test_func in tests:
            print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {test_name}")
            try:
                result = await test_func()
                results[test_name] = result
                status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
                print(f"   {status}")
            except Exception as e:
                results[test_name] = False
                print(f"   ‚ùå –û–®–ò–ë–ö–ê: {e}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        passed_tests = sum(results.values())
        total_tests = len(results)
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}/{total_tests}")
        print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_tests - passed_tests}/{total_tests}")
        
        if passed_tests == total_tests:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        else:
            print("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
    
    async def test_account_manager(self) -> bool:
        """–¢–µ—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        try:
            manager = MultiAccountManager()
            accounts = await manager.get_all_accounts()
            return len(accounts) > 0
        except:
            return False
    
    async def test_scheduler(self) -> bool:
        """–¢–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            scheduler = SmartScheduler()
            plan = await scheduler.calculate_optimal_time(
                content_type="ai_video",
                platform="youtube"
            )
            return plan is not None
        except:
            return False
    
    async def test_platform_integrator(self) -> bool:
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º"""
        try:
            publisher = PlatformPublisher()
            return publisher.credentials_db is not None
        except:
            return False
    
    async def test_orchestrator(self) -> bool:
        """–¢–µ—Å—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            orchestrator = ContentFactoryOrchestrator()
            return orchestrator.config is not None
        except:
            return False
    
    async def show_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        
        print("üìä –°–¢–ê–¢–£–° –ö–û–ù–¢–ï–ù–¢-–§–ê–ë–†–ò–ö–ò")
        print("=" * 35)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_files = {
            "config/accounts.json": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤",
            "config/platform_credentials.json": "API –∫–ª—é—á–∏",
            "config/factory_config.json": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–±—Ä–∏–∫–∏"
        }
        
        print("\nüìÅ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–û–ù–ù–´–ï –§–ê–ô–õ–´:")
        for file_path, description in config_files.items():
            exists = Path(file_path).exists()
            status = "‚úÖ –ù–∞–π–¥–µ–Ω" if exists else "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            print(f"   {status} {description}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        directories = [
            "logs", "data/analytics", "generated_viral_content", 
            "ready_videos", "viral_assets"
        ]
        
        print("\nüìÇ –†–ê–ë–û–ß–ò–ï –î–ò–†–ï–ö–¢–û–†–ò–ò:")
        for directory in directories:
            exists = Path(directory).exists()
            status = "‚úÖ" if exists else "‚ùå"
            print(f"   {status} {directory}/")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        print("\nüì¶ –ö–õ–Æ–ß–ï–í–´–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ò:")
        key_packages = ['moviepy', 'aiohttp', 'schedule', 'yt-dlp', 'PIL']
        
        for package in key_packages:
            try:
                __import__(package)
                print(f"   ‚úÖ {package}")
            except ImportError:
                print(f"   ‚ùå {package} (–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)")
    
    async def run_demo(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º"""
        
        print("üé≠ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–ô –†–ï–ñ–ò–ú")
        print("=" * 30)
        print("–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç-—Ñ–∞–±—Ä–∏–∫–∏...")
        print("(–í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤)")
        
        # –î–µ–º–æ –Ω–æ–≤–æ–≥–æ –≤–∏—Ä—É—Å–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        print("\nüé¨ –î–µ–º–æ –≤–∏—Ä—É—Å–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ (–í –°–¢–ò–õ–ï –í–ê–®–ò–• –ü–†–ò–ú–ï–†–û–í):")
        try:
            from test_viral_generator import test_viral_video_styles
            await test_viral_video_styles()
        except Exception as e:
            print(f"‚ö†Ô∏è –î–µ–º–æ –≤–∏—Ä—É—Å–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {e}")
        
        # –î–µ–º–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        print("\n‚è∞ –î–µ–º–æ —É–º–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:")
        try:
            from src.farm_content.utils.smart_scheduler import demo_smart_scheduling
            await demo_smart_scheduling()
        except Exception as e:
            print(f"‚ö†Ô∏è –î–µ–º–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {e}")
        
        # –î–µ–º–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        print("\nüåê –î–µ–º–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º:")
        try:
            from src.farm_content.utils.platform_integrator import demo_platform_integration
            await demo_platform_integration()
        except Exception as e:
            print(f"‚ö†Ô∏è –î–µ–º–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {e}")
        
        print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    async def launch_factory(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç-—Ñ–∞–±—Ä–∏–∫–∏"""
        
        print("üè≠ –ó–ê–ü–£–°–ö –ö–û–ù–¢–ï–ù–¢-–§–ê–ë–†–ò–ö–ò")
        print("=" * 35)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
        ready = await self.check_readiness()
        if not ready:
            print("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É: python launch_factory.py --setup")
            return
        
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–æ–Ω—Ç–µ–Ω—Ç-—Ñ–∞–±—Ä–∏–∫–∞...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
            orchestrator = ContentFactoryOrchestrator()
            await orchestrator.start_factory()
            
        except KeyboardInterrupt:
            print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
            if 'orchestrator' in locals():
                await orchestrator.stop_factory()
        
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ñ–∞–±—Ä–∏–∫–∏: {e}")
    
    async def check_readiness(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –∑–∞–ø—É—Å–∫—É"""
        
        required_files = [
            "config/accounts.json",
            "config/platform_credentials.json"
        ]
        
        for file_path in required_files:
            if not Path(file_path).exists():
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {file_path}")
                return False
        
        return True
    
    async def test_viral_generator(self):
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤–∏—Ä—É—Å–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
        
        print("üé¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–ò–†–£–°–ù–û–ì–û –ì–ï–ù–ï–†–ê–¢–û–†–ê")
        print("=" * 45)
        print("–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Ç–æ—á–Ω–æ –≤ —Å—Ç–∏–ª–µ –≤–∞—à–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤!\n")
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç
            from test_viral_generator import main as test_main
            await test_main()
            
        except ImportError as e:
            print(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç –≤–∏—Ä—É—Å–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
            print("üì¶ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
            print("   pip install -r requirements_updated.txt")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")


def create_argument_parser():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"""
    
    parser = argparse.ArgumentParser(
        description="üè≠ –ö–æ–Ω—Ç–µ–Ω—Ç-–§–∞–±—Ä–∏–∫–∞ 2025 - –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    parser.add_argument(
        '--demo', 
        action='store_true',
        help='–ó–∞–ø—É—Å–∫ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ'
    )
    
    parser.add_argument(
        '--test',
        action='store_true', 
        help='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã'
    )
    
    parser.add_argument(
        '--setup',
        action='store_true',
        help='–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã'
    )
    
    parser.add_argument(
        '--status',
        action='store_true',
        help='–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã'
    )
    
    parser.add_argument(
        '--test-viral',
        action='store_true',
        help='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏—Ä—É—Å–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –≤ —Å—Ç–∏–ª–µ –ø—Ä–∏–º–µ—Ä–æ–≤'
    )
    
    return parser


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ë–∞–Ω–Ω–µ—Ä
    print("""
üè≠ –ö–û–ù–¢–ï–ù–¢-–§–ê–ë–†–ò–ö–ê 2025
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ 
–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞

ü§ñ AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ
üìà –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤  
üé¨ –ù–∞—Ä–µ–∑–∫–∞ —Ñ–∏–ª—å–º–æ–≤
üì± –ú—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
‚è∞ –£–º–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    """)
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    parser = create_argument_parser()
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –ª–∞—É–Ω—á–µ—Ä
    launcher = FactoryLauncher()
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
        if args.setup:
            await launcher.setup_system()
        elif args.test:
            await launcher.test_system()
        elif args.status:
            await launcher.show_status()
        elif args.demo:
            await launcher.run_demo()
        elif getattr(args, 'test_viral', False):  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º --test-viral
            await launcher.test_viral_generator()
        else:
            await launcher.launch_factory()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Windows
    if hasattr(asyncio, 'WindowsProactorEventLoopPolicy'):
        asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)