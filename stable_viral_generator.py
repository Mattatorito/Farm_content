#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üé¨ –ü–†–û–°–¢–û–ô –†–ê–ë–û–ß–ò–ô –ì–ï–ù–ï–†–ê–¢–û–† 
–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ —Å —Ñ–æ–Ω–∞–º–∏ –∏ –∑–≤—É–∫–æ–º –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö
"""

import asyncio
import sys
import os
from pathlib import Path
import logging
import random

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
current_dir = Path(__file__).parent
src_path = current_dir / "src"
sys.path.insert(0, str(src_path))
sys.path.insert(0, str(current_dir))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)s | %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

logger = logging.getLogger(__name__)

def create_stable_viral_video():
    """
    –°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ —Å —Ñ–æ–Ω–∞–º–∏ –∏ –∑–≤—É–∫–æ–º
    """
    try:
        logger.info("üé¨ –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –≤–∏—Ä—É—Å–Ω–æ–µ –≤–∏–¥–µ–æ...")
        
        from moviepy.editor import (
            TextClip, ImageClip, CompositeVideoClip, 
            AudioFileClip, ColorClip
        )
        import numpy as np
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –∫ ImageMagick
        os.environ['IMAGEMAGICK_BINARY'] = '/opt/homebrew/bin/convert'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
        backgrounds_dir = Path("viral_assets/backgrounds")
        audio_dir = Path("viral_assets/audio")
        
        if not backgrounds_dir.exists() or not list(backgrounds_dir.glob("*.jpg")):
            logger.error("‚ùå –§–æ–Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return None
            
        # –í—ã–±–∏—Ä–∞–µ–º —Ñ–æ–Ω
        background_files = list(backgrounds_dir.glob("*.jpg"))
        background_path = str(random.choice(background_files))
        
        logger.info(f"üé® –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ–Ω: {Path(background_path).name}")
        
        # 1. –°–û–ó–î–ê–ï–ú –§–û–ù–û–í–û–ï –í–ò–î–ï–û (—É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ)
        background = ImageClip(background_path, duration=20)
        background = background.resize((1080, 1920))
        
        # –ü—Ä–æ—Å—Ç–æ–π —ç—Ñ—Ñ–µ–∫—Ç –∑—É–º–∞ (–±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π)
        background = background.resize(lambda t: 1 + 0.02*t)
        
        # –ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        overlay = ColorClip(size=(1080, 1920), color=(0, 0, 0))
        overlay = overlay.set_opacity(0.4).set_duration(20)
        
        logger.info("üìù –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã...")
        
        # 2. –¢–ï–ö–°–¢–û–í–´–ï –ë–õ–û–ö–ò (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ, —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ)
        
        # –ë–ª–æ–∫ 1: –•—É–∫ (0-5 —Å–µ–∫)
        hook = TextClip(
            "–°–¢–û–ü! üî•\n\n–°–ï–ö–†–ï–¢\n–ú–ò–õ–õ–ò–û–ù–ï–†–û–í!",
            fontsize=110,
            color='red',
            font='Arial-Bold',
            size=(900, None),
            method='caption',
            align='center',
            stroke_color='white',
            stroke_width=3
        ).set_position('center').set_duration(5).set_start(0)
        
        # –ë–ª–æ–∫ 2: –ò–Ω—Ç—Ä–∏–≥–∞ (5-12 —Å–µ–∫)
        intrigue = TextClip(
            "99% –õ–Æ–î–ï–ô\n–ù–ï –ó–ù–ê–Æ–¢\n\n–≠–¢–û–ì–û –¢–†–Æ–ö–ê!",
            fontsize=85,
            color='yellow',
            font='Arial-Bold',
            size=(800, None),
            method='caption',
            align='center',
            stroke_color='black',
            stroke_width=2
        ).set_position('center').set_duration(7).set_start(5)
        
        # –ë–ª–æ–∫ 3: –ü—Ä–∏–∑—ã–≤ (12-20 —Å–µ–∫)
        cta = TextClip(
            "–°–ú–û–¢–†–ò\n–î–û –ö–û–ù–¶–ê!\n\nüëá –ü–û–î–ü–ò–®–ò–°–¨ üëá",
            fontsize=80,
            color='lime',
            font='Arial-Bold',
            size=(850, None),
            method='caption',
            align='center',
            stroke_color='darkgreen',
            stroke_width=2
        ).set_position('center').set_duration(8).set_start(12)
        
        logger.info("üéµ –î–æ–±–∞–≤–ª—è–µ–º –∑–≤—É–∫...")
        
        # 3. –ó–í–£–ö–û–í–û–ï –°–û–ü–†–û–í–û–ñ–î–ï–ù–ò–ï
        audio_clips = []
        
        # –§–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞
        music_file = audio_dir / "background_electronic.wav"
        if music_file.exists():
            music = AudioFileClip(str(music_file))
            music = music.set_duration(20).volumex(0.4)  # –¢–∏—à–µ
            audio_clips.append(music)
            logger.info("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –º—É–∑—ã–∫–∞")
        
        # –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        impact_file = audio_dir / "impact.wav"
        if impact_file.exists():
            # –£–¥–∞—Ä –≤ –Ω–∞—á–∞–ª–µ
            impact = AudioFileClip(str(impact_file)).set_start(0).volumex(0.7)
            audio_clips.append(impact)
            logger.info("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∑–≤—É–∫–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç")
        
        logger.info("üé¨ –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ...")
        
        # 4. –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–ë–û–†–ö–ê
        video_elements = [background, overlay, hook, intrigue, cta]
        final_video = CompositeVideoClip(video_elements)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–≤—É–∫
        if audio_clips:
            from moviepy.editor import CompositeAudioClip
            final_audio = CompositeAudioClip(audio_clips)
            final_video = final_video.set_audio(final_audio)
            logger.info("‚úÖ –ó–≤—É–∫ –¥–æ–±–∞–≤–ª–µ–Ω")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        output_dir = Path("ready_videos")
        output_dir.mkdir(exist_ok=True)
        
        from datetime import datetime
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_path = output_dir / f"STABLE_VIRAL_{timestamp}.mp4"
        
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ: {output_path}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        final_video.write_videofile(
            str(output_path),
            fps=30,
            codec='libx264',
            bitrate="6000k",
            audio_codec='aac' if audio_clips else None,
            verbose=False,
            logger=None,
            temp_audiofile='temp-audio.m4a' if audio_clips else None,
            remove_temp=True
        )
        
        file_size = output_path.stat().st_size / 1024 / 1024
        
        logger.info("üéâ –°–¢–ê–ë–ò–õ–¨–ù–û–ï –í–ò–î–ï–û –°–û–ó–î–ê–ù–û!")
        logger.info(f"üìÅ –§–∞–π–ª: {output_path}")
        logger.info(f"üìè –†–∞–∑–º–µ—Ä: {file_size:.1f} MB")
        logger.info(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 20 —Å–µ–∫—É–Ω–¥")
        logger.info(f"üéØ –ö–∞—á–µ—Å—Ç–≤–æ: –í—ã—Å–æ–∫–æ–µ (6000k)")
        logger.info(f"üéµ –ó–≤—É–∫: {'–î–ê' if audio_clips else '–ù–ï–¢'}")
        
        return str(output_path)
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞: {str(e)}")
        import traceback
        traceback.print_exc()
        return None

def create_multiple_viral_videos(count=3):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–Ω—ã—Ö –≤–∏—Ä—É—Å–Ω—ã—Ö –≤–∏–¥–µ–æ
    """
    logger.info(f"üé¨ –°–æ–∑–¥–∞–µ–º {count} —Ä–∞–∑–Ω—ã—Ö –≤–∏—Ä—É—Å–Ω—ã—Ö –≤–∏–¥–µ–æ...")
    
    # –†–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ–∫—Å—Ç–æ–≤
    video_variants = [
        {
            "hook": "üí• –®–û–ö! üí•\n\n–ú–ò–õ–õ–ò–ê–†–î–ï–†–´\n–°–ö–†–´–í–ê–õ–ò –≠–¢–û!",
            "intrigue": "–°–ï–ö–†–ï–¢–ù–ê–Ø\n–§–û–†–ú–£–õ–ê\n\n–£–°–ü–ï–•–ê!",
            "cta": "–°–ú–û–¢–†–ò\n–í–ù–ò–ú–ê–¢–ï–õ–¨–ù–û!\n\nüöÄ –ü–û–î–ü–ò–®–ò–°–¨! üöÄ"
        },
        {
            "hook": "–°–¢–û–ü! ‚ö°\n\n–¢–û–ü –°–ï–ö–†–ï–¢\n–ë–û–ì–ê–ß–ï–ô!",
            "intrigue": "–¢–û–õ–¨–ö–û 1%\n–ó–ù–ê–Æ–¢\n\n–≠–¢–û–¢ –¢–†–Æ–ö!",
            "cta": "–ù–ï –£–ü–£–°–¢–ò\n–®–ê–ù–°!\n\nüëÜ –õ–ê–ô–ö! üëÜ"
        },
        {
            "hook": "üî• –ë–û–ú–ë–ê! üî•\n\n–ì–õ–ê–í–ù–´–ô\n–°–ï–ö–†–ï–¢!",
            "intrigue": "–í–°–Ø –ü–†–ê–í–î–ê\n–û –î–ï–ù–¨–ì–ê–•\n\n–ó–î–ï–°–¨!",
            "cta": "–î–û–°–ú–û–¢–†–ò\n–î–û –ö–û–ù–¶–ê!\n\nüíé –°–û–•–†–ê–ù–ò! üíé"
        }
    ]
    
    results = []
    
    for i in range(min(count, len(video_variants))):
        logger.info(f"üìπ –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ {i+1}/{count}...")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∫–æ–¥, –Ω–æ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏
            result = create_variant_video(i, video_variants[i])
            if result:
                results.append(result)
                logger.info(f"‚úÖ –í–∏–¥–µ–æ {i+1} –≥–æ—Ç–æ–≤–æ: {result}")
            else:
                logger.warning(f"‚ö†Ô∏è –í–∏–¥–µ–æ {i+1} –Ω–µ —Å–æ–∑–¥–∞–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≤–∏–¥–µ–æ {i+1}: {e}")
    
    return results

def create_variant_video(index, texts):
    """
    –°–æ–∑–¥–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –≤–∏–¥–µ–æ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏
    """
    try:
        from moviepy.editor import (
            TextClip, ImageClip, CompositeVideoClip, 
            AudioFileClip, ColorClip
        )
        
        os.environ['IMAGEMAGICK_BINARY'] = '/opt/homebrew/bin/convert'
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ñ–æ–Ω
        backgrounds_dir = Path("viral_assets/backgrounds") 
        background_files = list(backgrounds_dir.glob("*.jpg"))
        if not background_files:
            return None
        
        background_path = str(background_files[index % len(background_files)])
        
        # –§–æ–Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ
        background = ImageClip(background_path, duration=18)
        background = background.resize((1080, 1920))
        background = background.resize(lambda t: 1 + 0.01*t)
        
        # –ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ
        overlay = ColorClip(size=(1080, 1920), color=(0, 0, 0))
        overlay = overlay.set_opacity(0.35).set_duration(18)
        
        # –¶–≤–µ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–µ–æ
        colors = [
            {"main": "red", "secondary": "yellow", "accent": "lime"},
            {"main": "orange", "secondary": "cyan", "accent": "magenta"},
            {"main": "purple", "secondary": "gold", "accent": "white"}
        ]
        
        color_scheme = colors[index % len(colors)]
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏
        hook = TextClip(
            texts["hook"],
            fontsize=100,
            color=color_scheme["main"],
            font='Arial-Bold',
            size=(900, None),
            method='caption',
            align='center',
            stroke_color='white',
            stroke_width=3
        ).set_position('center').set_duration(6).set_start(0)
        
        intrigue = TextClip(
            texts["intrigue"],
            fontsize=80,
            color=color_scheme["secondary"],
            font='Arial-Bold',
            size=(800, None),
            method='caption',
            align='center',
            stroke_color='black',
            stroke_width=2
        ).set_position('center').set_duration(6).set_start(6)
        
        cta = TextClip(
            texts["cta"],
            fontsize=75,
            color=color_scheme["accent"],
            font='Arial-Bold',
            size=(850, None),
            method='caption',
            align='center',
            stroke_color='darkblue',
            stroke_width=2
        ).set_position('center').set_duration(6).set_start(12)
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤–∏–¥–µ–æ
        video_elements = [background, overlay, hook, intrigue, cta]
        final_video = CompositeVideoClip(video_elements)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–≤—É–∫ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        audio_dir = Path("viral_assets/audio")
        music_file = audio_dir / "background_electronic.wav"
        
        if music_file.exists():
            music = AudioFileClip(str(music_file))
            music = music.set_duration(18).volumex(0.3)
            final_video = final_video.set_audio(music)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        output_dir = Path("ready_videos")
        output_dir.mkdir(exist_ok=True)
        
        from datetime import datetime
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_path = output_dir / f"VIRAL_VARIANT_{index+1}_{timestamp}.mp4"
        
        final_video.write_videofile(
            str(output_path),
            fps=30,
            codec='libx264', 
            bitrate="5000k",
            audio_codec='aac',
            verbose=False,
            logger=None,
            temp_audiofile='temp-audio.m4a',
            remove_temp=True
        )
        
        return str(output_path)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ {index}: {e}")
        return None

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    print("üé¨" + "="*70)
    print("        –°–¢–ê–ë–ò–õ–¨–ù–´–ô –ì–ï–ù–ï–†–ê–¢–û–† –í–ò–†–£–°–ù–û–ì–û –í–ò–î–ï–û")
    print("          (—Å —Ñ–æ–Ω–∞–º–∏ –∏ –∑–≤—É–∫–æ–º –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö)")
    print("="*74)
    
    print("\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:")
    print("1. –°–æ–∑–¥–∞—Ç—å –æ–¥–Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ")
    print("2. –°–æ–∑–¥–∞—Ç—å 3 —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞")
    print("3. –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã")
    
    choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ").strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
    logger.info("üìÇ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Å—É—Ä—Å—ã...")
    
    backgrounds_dir = Path("viral_assets/backgrounds")
    audio_dir = Path("viral_assets/audio")
    
    if not backgrounds_dir.exists() or not list(backgrounds_dir.glob("*.jpg")):
        logger.info("üì• –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        try:
            from advanced_viral_generator import download_background_images
            download_background_images()
        except:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–æ–Ω—ã")
            return
    
    if not audio_dir.exists() or not list(audio_dir.glob("*.wav")):
        logger.info("üéµ –°–æ–∑–¥–∞–µ–º –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã...")
        try:
            from audio_generator import generate_audio_effects, create_background_music
            generate_audio_effects()
            create_background_music()
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–≤—É–∫–∏: {e}")
    
    if choice == "3":
        logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ
    results = []
    
    if choice == "2":
        logger.info("üé¨ –°–æ–∑–¥–∞–µ–º 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤–∏–¥–µ–æ...")
        results = create_multiple_viral_videos(3)
    else:
        logger.info("üé¨ –°–æ–∑–¥–∞–µ–º –æ–¥–Ω–æ –≤–∏–¥–µ–æ...")
        result = create_stable_viral_video()
        if result:
            results.append(result)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if results:
        print(f"\nüéâ –£–°–ü–ï–•! –°–æ–∑–¥–∞–Ω–æ –≤–∏–¥–µ–æ: {len(results)}")
        
        for i, result in enumerate(results, 1):
            file_size = Path(result).stat().st_size / 1024 / 1024
            print(f"üìπ –í–∏–¥–µ–æ {i}: {Path(result).name} ({file_size:.1f} MB)")
        
        print(f"\nüéØ –í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω—ã —Å:")
        print("‚úÖ –ö—Ä–∞—Å–∏–≤—ã–º–∏ —Ñ–æ–Ω–æ–≤—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
        print("‚úÖ –í–∏—Ä—É—Å–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏")
        print("‚úÖ –ó–≤—É–∫–æ–≤—ã–º —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ–º")
        print("‚úÖ –í—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º")
        print("‚úÖ –°—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π")
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–ø–∫—É
        open_folder = input("\nüóÇÔ∏è –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å –≤–∏–¥–µ–æ? (y/n): ").strip().lower()
        if open_folder == 'y':
            import subprocess
            subprocess.run(["open", "ready_videos"])
    else:
        print("\n‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∏–¥–µ–æ –Ω–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã.")

if __name__ == "__main__":
    main()