#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
auto_publisher.py

–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –º—É–ª—å—Ç–∏–∞–∫–∫–∞—É–Ω—Ç-–ø—É–±–ª–∏–∫–∞—Ü–∏–π:
- –ê–∫–∫–∞—É–Ω—Ç 1: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ª–∏–ø–∞—Ç–µ–ª—å–Ω—ã—Ö AI-–≤–∏–¥–µ–æ –∏ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞
- –ê–∫–∫–∞—É–Ω—Ç—ã 2-3: –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–¥-–∞–¥–∞–ø—Ç–∞—Ü–∏–π
- –ê–∫–∫–∞—É–Ω—Ç 4: –Ω–∞—Ä–µ–∑–∫–∞ —Ñ–∏–ª—å–º–æ–≤/—Å–µ—Ä–∏–∞–ª–æ–≤ (—Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π/–ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª) –∏ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞

–í–∞–∂–Ω–æ: –º–æ–¥—É–ª—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç, —á—Ç–æ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞.
"""
from __future__ import annotations

import os
import json
import asyncio
from pathlib import Path
from typing import Dict, Any
from datetime import datetime

from src.farm_content.utils.trend_analyzer import TrendAnalyzer
from src.farm_content.utils.viral_generator import ViralContentGenerator
from src.farm_content.utils.smart_scheduler import SmartScheduler

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã/—Ä–µ–∑–∞–ª–∫–∏
from stable_viral_generator import create_stable_viral_video, create_multiple_viral_videos
from cinematic_movie_cuts import process_single

# –ó–∞–≥—Ä—É–∑—á–∏–∫ YouTube
from uploader.youtube_uploader import get_youtube_service, upload_video


CONFIG_ACCOUNTS = Path("config/accounts.json")
CONFIG_YT_UPLOAD = Path("config/youtube_upload_config.json")


def load_json(path: Path) -> Dict[str, Any]:
    with open(path, 'r', encoding='utf-8') as f:
        return json.load(f)


async def plan_publish_time(scheduler: SmartScheduler, content_type: str, platform: str, tz: str) -> datetime:
    plan = await scheduler.calculate_optimal_time(content_type=content_type, platform=platform, account_timezone=tz)
    return plan.scheduled_time


async def run_account_pipeline(account: Dict[str, Any], dry_run: bool = False) -> None:
    name = account.get('name', 'account')
    platform = account.get('platform', 'youtube')
    tz = account.get('timezone', 'Europe/Moscow')
    pipeline = account.get('pipeline', 'ai_video')

    print(f"\n=== ‚ñ∂Ô∏è –ê–∫–∫–∞—É–Ω—Ç: {name} | –ü–∞–π–ø–ª–∞–π–Ω: {pipeline} ===")

    scheduler = SmartScheduler()
    trends = TrendAnalyzer()
    meta = ViralContentGenerator()

    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è YouTube (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ dry-run)
    yt_cfg = account.get('youtube', {})
    if platform == 'youtube' and not dry_run:
        client_secrets = yt_cfg.get('client_secrets', 'config/client_secrets.json')
        token_file = yt_cfg.get('token_file', f"config/tokens/{name}_token.json")
        service = get_youtube_service(client_secrets, token_file)
    else:
        service = None

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞–π–ø–ª–∞–π–Ω
    video_path = None
    content_type = 'ai_video'

    if pipeline == 'ai_video':
        content_type = 'ai_video'
        video_path = create_stable_viral_video()
        analysis = {"content_type": "high_energy", "viral_score": 0.75, "duration": 20}
    elif pipeline == 'trend_shorts':
        content_type = 'trend_short'
        trends_data = await trends.analyze_current_trends(platforms=["youtube_shorts", "instagram"]) 
        # –ó–¥–µ—Å—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –≤–∞—à–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ–¥ —Ç—Ä–µ–Ω–¥—ã (–Ω–µ –ø–µ—Ä–µ–∑–∞–ª–∏–≤ —á—É–∂–∏—Ö –≤–∏–¥–µ–æ)
        video_path = create_stable_viral_video()  # –ó–∞–≥–ª—É—à–∫–∞: –≥–µ–Ω–µ—Ä–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–µ–Ω–¥-—Ä–æ–ª–∏–∫
        analysis = {"content_type": "high_energy", "viral_score": 0.7, "duration": 20, "trends": trends_data}
    elif pipeline == 'movie_cuts':
        content_type = 'movie_clip'
        # –û–∂–∏–¥–∞–µ–º, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ñ–∞–π–ª –≤ viral_assets/movie_clips/input.mp4 –∏ —Å—É–±—Ç–∏—Ç—Ä—ã
        src = account.get('movie_clip', {}).get('source', 'viral_assets/movie_clips/input.mp4')
        srt = account.get('movie_clip', {}).get('srt')
        video_path = process_single(src, srt_path=srt, add_bgm=True)
        analysis = {"content_type": "movie_clip", "viral_score": 0.6, "duration": 30}
    else:
        print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π pipeline: {pipeline}")
        return

    if not video_path:
        print("‚ö†Ô∏è –í–∏–¥–µ–æ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–≥—Ä—É–∑–∫—É.")
        return

    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    metadata = meta.generate_viral_metadata(analysis, platform="youtube_shorts", style="high_energy")
    title = metadata['title']
    description = metadata['description'] + "\n\n" + " ".join(metadata['hashtags'])
    tags = load_json(CONFIG_YT_UPLOAD).get('viral_tags', [])
    category_id = "24"

    # –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    publish_time = await plan_publish_time(scheduler, content_type, platform='youtube', tz=tz)
    print(f"üïí –ü–ª–∞–Ω –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è {name}: {publish_time}")

    if dry_run:
        print("[DRY-RUN] –ü—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–≥—Ä—É–∑–∫—É. –ò—Ç–æ–≥:")
        print(f"  ‚Ä¢ –§–∞–π–ª: {video_path}")
        print(f"  ‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
        print(f"  ‚Ä¢ –¢–µ–≥–∏: {tags[:8]}‚Ä¶ (–≤—Å–µ–≥–æ {len(tags)})")
        print(f"  ‚Ä¢ PublishAt: {publish_time}")
        return
    # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ YouTube (–º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å privacy_status –Ω–∞ 'public' –±–µ–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è)
    response = upload_video(
        service=service,
        file_path=video_path,
        title=title,
        description=description,
        tags=tags,
        category_id=category_id,
        privacy_status='private',
        publish_at=publish_time,
    )
    video_id = response.get('id')
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫ (—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º): https://youtube.com/shorts/{video_id}")


async def main():
    import argparse
    p = argparse.ArgumentParser(description="–ú—É–ª—å—Ç–∏–∞–∫–∫–∞—É–Ω—Ç –∞–≤—Ç–æ-–ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
    p.add_argument('--only', type=str, nargs='*', help='–ò–º–µ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ (–ø–æ account.name)')
    p.add_argument('--dry-run', action='store_true', help='–ù–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –Ω–∞ YouTube, —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç—å –∏ —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å')
    args = p.parse_args()

    cfg = load_json(CONFIG_ACCOUNTS)
    accounts = cfg.get('youtube_accounts', [])
    if not accounts:
        print("–î–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ config/accounts.json")
        return

    if args.only:
        accounts = [a for a in accounts if a.get('name') in set(args.only)]
        if not accounts:
            print("–ù–µ—Ç —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É --only")
            return

    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏
    for acc in accounts:
        try:
            await run_account_pipeline(acc, dry_run=args.dry_run)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {acc.get('name')}: {e}")


if __name__ == '__main__':
    asyncio.run(main())
