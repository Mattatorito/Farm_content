#!/usr/bin/env python3
"""
üè≠ –ú–ù–û–ì–û–ê–ö–ö–ê–£–ù–¢–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –§–ê–ë–†–ò–ö–ò –ö–û–ù–¢–ï–ù–¢–ê
===========================================

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏:
‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç 1: AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ª–∏–ø–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ
‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç—ã 2-3: –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ YouTube/Instagram + –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥
‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç 4: –ù–∞—Ä–µ–∑–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤
‚Ä¢ –£–º–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
"""

import asyncio
import json
import logging
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional
from dataclasses import dataclass, field
import random

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
import sys
sys.path.append(str(Path(__file__).parent / "src"))

try:
    from farm_content.utils import ViralClipExtractor
    from farm_content.services.url_processor import URLProcessor
    from farm_content.core import get_logger
    SYSTEM_AVAILABLE = True
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    SYSTEM_AVAILABLE = False


@dataclass
class AccountConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    id: str
    name: str
    type: str  # "ai_generation", "trend_analysis", "movie_clips"
    platforms: List[str]  # ["youtube", "instagram", "tiktok"]
    theme: str  # "gaming", "lifestyle", "movies", "facts"
    credentials: Dict
    schedule: Dict  # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
    target_audience: str  # "RU", "EN", "Global"
    content_settings: Dict = field(default_factory=dict)
    stats: Dict = field(default_factory=dict)


@dataclass
class ContentItem:
    """–≠–ª–µ–º–µ–Ω—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    id: str
    account_id: str
    content_type: str  # "ai_video", "trend_short", "movie_clip"
    file_path: str
    metadata: Dict
    platforms: List[str]
    scheduled_time: datetime
    status: str = "pending"  # "pending", "processing", "published", "failed"
    created_at: datetime = field(default_factory=datetime.now)


class MultiAccountManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –º–Ω–æ–≥–æ–∞–∫–∫–∞—É–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self, config_path: str = "config/accounts_config.json"):
        self.config_path = Path(config_path)
        self.accounts: Dict[str, AccountConfig] = {}
        self.content_queue: List[ContentItem] = []
        self.extractor = ViralClipExtractor() if SYSTEM_AVAILABLE else None
        self.url_processor = URLProcessor() if SYSTEM_AVAILABLE else None
        self.logger = get_logger("MultiAccountManager")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        self.load_accounts_config()
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
        self.scheduler_running = False
    
    def load_accounts_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        if self.config_path.exists():
            with open(self.config_path, 'r', encoding='utf-8') as f:
                config_data = json.load(f)
                
            for account_data in config_data.get('accounts', []):
                account = AccountConfig(**account_data)
                self.accounts[account.id] = account
                
            self.logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        else:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.create_default_config()
    
    def create_default_config(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        default_accounts = [
            {
                "id": "ai_viral_account",
                "name": "AI –í–∏—Ä—É—Å–Ω—ã–π –ö–æ–Ω—Ç–µ–Ω—Ç",
                "type": "ai_generation",
                "platforms": ["youtube", "instagram", "tiktok"],
                "theme": "mind_blowing_facts",
                "credentials": {
                    "youtube": {"channel_id": "", "api_key": ""},
                    "instagram": {"username": "", "password": ""},
                    "tiktok": {"username": "", "password": ""}
                },
                "schedule": {
                    "posts_per_day": 3,
                    "optimal_times": ["09:00", "15:00", "21:00"],
                    "timezone": "Europe/Moscow"
                },
                "target_audience": "RU",
                "content_settings": {
                    "video_duration": 60,
                    "use_ai_voice": True,
                    "add_subtitles": True,
                    "themes": ["—Ñ–∞–∫—Ç—ã", "–Ω–∞—É–∫–∞", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–∫–æ—Å–º–æ—Å"]
                }
            },
            {
                "id": "trends_youtube_1",
                "name": "YouTube –¢—Ä–µ–Ω–¥—ã #1",
                "type": "trend_analysis", 
                "platforms": ["youtube"],
                "theme": "gaming",
                "credentials": {
                    "youtube": {"channel_id": "", "api_key": ""}
                },
                "schedule": {
                    "posts_per_day": 5,
                    "optimal_times": ["10:00", "13:00", "16:00", "19:00", "22:00"],
                    "timezone": "Europe/Moscow"
                },
                "target_audience": "RU",
                "content_settings": {
                    "trending_categories": ["gaming", "entertainment"],
                    "min_views_threshold": 100000,
                    "reprocess_popular": True
                }
            },
            {
                "id": "trends_youtube_2", 
                "name": "YouTube –¢—Ä–µ–Ω–¥—ã #2",
                "type": "trend_analysis",
                "platforms": ["youtube"],
                "theme": "lifestyle",
                "credentials": {
                    "youtube": {"channel_id": "", "api_key": ""}
                },
                "schedule": {
                    "posts_per_day": 4,
                    "optimal_times": ["11:00", "14:00", "17:00", "20:00"],
                    "timezone": "Europe/Moscow"
                },
                "target_audience": "RU",
                "content_settings": {
                    "trending_categories": ["lifestyle", "travel", "food"],
                    "min_views_threshold": 50000,
                    "add_trending_hashtags": True
                }
            },
            {
                "id": "movie_clips_account",
                "name": "–ö–∏–Ω–æ–∫–ª–∏–ø—ã",
                "type": "movie_clips", 
                "platforms": ["instagram", "tiktok"],
                "theme": "movies",
                "credentials": {
                    "instagram": {"username": "", "password": ""},
                    "tiktok": {"username": "", "password": ""}
                },
                "schedule": {
                    "posts_per_day": 6,
                    "optimal_times": ["12:00", "15:00", "18:00", "20:00", "22:00", "00:00"],
                    "timezone": "Europe/Moscow"
                },
                "target_audience": "RU",
                "content_settings": {
                    "movie_sources": ["popular_movies", "trending_series"],
                    "clip_duration": 45,
                    "add_dramatic_effects": True,
                    "target_emotions": ["suspense", "drama", "action"]
                }
            }
        ]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_data = {"accounts": default_accounts}
        self.config_path.parent.mkdir(exist_ok=True)
        
        with open(self.config_path, 'w', encoding='utf-8') as f:
            json.dump(config_data, f, ensure_ascii=False, indent=2)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.load_accounts_config()
        self.logger.info("–°–æ–∑–¥–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    async def start_content_factory(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–∞–±—Ä–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        self.logger.info("üè≠ –ó–∞–ø—É—Å–∫ –º–Ω–æ–≥–æ–∞–∫–∫–∞—É–Ω—Ç–Ω–æ–π —Ñ–∞–±—Ä–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        
        if not SYSTEM_AVAILABLE:
            self.logger.error("–°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
        tasks = []
        
        # 1. AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        ai_accounts = [acc for acc in self.accounts.values() if acc.type == "ai_generation"]
        for account in ai_accounts:
            task = asyncio.create_task(self.run_ai_generation(account))
            tasks.append(task)
        
        # 2. –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        trend_accounts = [acc for acc in self.accounts.values() if acc.type == "trend_analysis"]
        for account in trend_accounts:
            task = asyncio.create_task(self.run_trend_analysis(account))
            tasks.append(task)
        
        # 3. –ù–∞—Ä–µ–∑–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –∫–∏–Ω–æ–∞–∫–∫–∞—É–Ω—Ç–æ–≤
        movie_accounts = [acc for acc in self.accounts.values() if acc.type == "movie_clips"]
        for account in movie_accounts:
            task = asyncio.create_task(self.run_movie_clipping(account))
            tasks.append(task)
        
        # 4. –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
        scheduler_task = asyncio.create_task(self.run_publishing_scheduler())
        tasks.append(scheduler_task)
        
        # 5. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        timing_task = asyncio.create_task(self.optimize_posting_times())
        tasks.append(timing_task)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        self.logger.info(f"–ó–∞–ø—É—â–µ–Ω–æ {len(tasks)} –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        await asyncio.gather(*tasks)
    
    async def run_ai_generation(self, account: AccountConfig):
        """–ó–∞–ø—É—Å–∫ AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        self.logger.info(f"ü§ñ –ó–∞–ø—É—Å–∫ AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.name}")
        
        while True:
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
                posts_per_day = account.schedule.get("posts_per_day", 3)
                interval_hours = 24 / posts_per_day
                
                # –°–æ–∑–¥–∞–µ–º AI –≤–∏–¥–µ–æ
                content_item = await self.generate_ai_video(account)
                if content_item:
                    self.content_queue.append(content_item)
                    self.logger.info(f"–°–æ–∑–¥–∞–Ω–æ AI –≤–∏–¥–µ–æ –¥–ª—è {account.name}: {content_item.id}")
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                await asyncio.sleep(interval_hours * 3600)
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è {account.name}: {e}")
                await asyncio.sleep(1800)  # –ñ–¥–µ–º 30 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def run_trend_analysis(self, account: AccountConfig):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        self.logger.info(f"üìà –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.name}")
        
        while True:
            try:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
                content_items = await self.analyze_and_download_trends(account)
                
                for item in content_items:
                    self.content_queue.append(item)
                    self.logger.info(f"–ù–∞–π–¥–µ–Ω —Ç—Ä–µ–Ω–¥–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è {account.name}: {item.id}")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
                await asyncio.sleep(7200)
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤ –¥–ª—è {account.name}: {e}")
                await asyncio.sleep(3600)  # –ñ–¥–µ–º —á–∞—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def run_movie_clipping(self, account: AccountConfig):
        """–ó–∞–ø—É—Å–∫ –Ω–∞—Ä–µ–∑–∫–∏ —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        self.logger.info(f"üé¨ –ó–∞–ø—É—Å–∫ –Ω–∞—Ä–µ–∑–∫–∏ —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.name}")
        
        while True:
            try:
                # –ù–∞—Ä–µ–∑–∞–µ–º —Ñ–∏–ª—å–º—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
                content_items = await self.create_movie_clips(account)
                
                for item in content_items:
                    self.content_queue.append(item)
                    self.logger.info(f"–°–æ–∑–¥–∞–Ω –∫–ª–∏–ø –∏–∑ —Ñ–∏–ª—å–º–∞ –¥–ª—è {account.name}: {item.id}")
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–ø—ã –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞
                await asyncio.sleep(14400)
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Ä–µ–∑–∫–∏ —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è {account.name}: {e}")
                await asyncio.sleep(1800)
    
    async def generate_ai_video(self, account: AccountConfig) -> Optional[ContentItem]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI –≤–∏–¥–µ–æ"""
        try:
            settings = account.content_settings
            theme = random.choice(settings.get("themes", ["—Ñ–∞–∫—Ç—ã"]))
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
            content_id = f"ai_{account.id}_{int(datetime.now().timestamp())}"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ AI
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AI-—Å–µ—Ä–≤–∏—Å–∞–º–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            
            video_path = f"ready_videos/ai_generated_{content_id}.mp4"
            
            # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata = {
                "title": f"üî• {theme.upper()}: –ù–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –≤–∑–æ—Ä–≤—É—Ç —Ç–≤–æ–π –º–æ–∑–≥!",
                "description": f"–¢–æ–ø —Ñ–∞–∫—Ç–æ–≤ –ø—Ä–æ {theme} –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±—è —É–¥–∏–≤—è—Ç! #—Ñ–∞–∫—Ç—ã #{theme} #–≤–∏—Ä—É—Å–Ω–æ–µ",
                "hashtags": [f"#{theme}", "#—Ñ–∞–∫—Ç—ã", "#–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "#shorts", "#–≤–∏—Ä—É—Å–Ω–æ–µ"],
                "duration": settings.get("video_duration", 60),
                "quality": "1080p",
                "has_audio": settings.get("use_ai_voice", True),
                "has_subtitles": settings.get("add_subtitles", True)
            }
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            scheduled_time = self.calculate_optimal_time(account)
            
            content_item = ContentItem(
                id=content_id,
                account_id=account.id,
                content_type="ai_video",
                file_path=video_path,
                metadata=metadata,
                platforms=account.platforms,
                scheduled_time=scheduled_time
            )
            
            return content_item
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI –≤–∏–¥–µ–æ: {e}")
            return None
    
    async def analyze_and_download_trends(self, account: AccountConfig) -> List[ContentItem]:
        """–ê–Ω–∞–ª–∏–∑ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        content_items = []
        
        try:
            settings = account.content_settings
            categories = settings.get("trending_categories", ["gaming"])
            min_views = settings.get("min_views_threshold", 100000)
            
            # –ò—â–µ–º —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ –≤–∏–¥–µ–æ
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å YouTube API –∏ Instagram API
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            
            for category in categories:
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Ç—Ä–µ–Ω–¥–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ
                content_id = f"trend_{account.id}_{category}_{int(datetime.now().timestamp())}"
                
                video_path = f"ready_videos/trend_{content_id}.mp4"
                
                metadata = {
                    "title": f"üî• –¢–û–ü {category.upper()} 2025! –≠—Ç–æ –í–ó–û–†–í–Å–¢ —Ç–≤–æ–π —Ñ–∏–¥!",
                    "description": f"–°–∞–º—ã–µ –≤–∏—Ä—É—Å–Ω—ã–µ {category} –≤–∏–¥–µ–æ! #—Ç—Ä–µ–Ω–¥—ã #{category} #shorts",
                    "hashtags": [f"#{category}", "#—Ç—Ä–µ–Ω–¥—ã", "#–≤–∏—Ä—É—Å–Ω–æ–µ", "#—Ç–æ–ø", "#shorts"],
                    "original_url": f"https://youtube.com/shorts/example_{category}",
                    "original_views": min_views + random.randint(0, 500000),
                    "category": category,
                    "reprocessed": True
                }
                
                scheduled_time = self.calculate_optimal_time(account)
                
                content_item = ContentItem(
                    id=content_id,
                    account_id=account.id,
                    content_type="trend_short",
                    file_path=video_path,
                    metadata=metadata,
                    platforms=account.platforms,
                    scheduled_time=scheduled_time
                )
                
                content_items.append(content_item)
        
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
        
        return content_items
    
    async def create_movie_clips(self, account: AccountConfig) -> List[ContentItem]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–ø–æ–≤ –∏–∑ —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤"""
        content_items = []
        
        try:
            settings = account.content_settings
            clip_duration = settings.get("clip_duration", 45)
            target_emotions = settings.get("target_emotions", ["drama"])
            
            # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã –¥–ª—è –Ω–∞—Ä–µ–∑–∫–∏
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –∏ –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞—Ä–µ–∑–∫–∏
            
            movies = [
                "–ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä", "–î–∂–æ–∫–µ—Ä", "–ú—Å—Ç–∏—Ç–µ–ª–∏", "–ì–ª–∞–¥–∏–∞—Ç–æ—Ä", "–ú–∞—Ç—Ä–∏—Ü–∞",
                "–ò–≥—Ä–∞ –ü—Ä–µ—Å—Ç–æ–ª–æ–≤", "–í–æ –≤—Å–µ —Ç—è–∂–∫–∏–µ", "–®–µ—Ä–ª–æ–∫", "–°—Ç—Ä–∞–Ω–Ω—ã–µ –¥–µ–ª–∞"
            ]
            
            movie = random.choice(movies)
            emotion = random.choice(target_emotions)
            
            content_id = f"movie_{account.id}_{int(datetime.now().timestamp())}"
            video_path = f"ready_videos/movie_clip_{content_id}.mp4"
            
            metadata = {
                "title": f"üé¨ {movie.upper()}: –≠—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –∑–∞—Å—Ç–∞–≤–∏–ª –≤—Å–µ—Ö –ø–ª–∞–∫–∞—Ç—å!",
                "description": f"–°–∞–º–∞—è {emotion} —Å—Ü–µ–Ω–∞ –∏–∑ {movie}! #—Ñ–∏–ª—å–º—ã #{movie.lower().replace(' ', '')} #{emotion}",
                "hashtags": [f"#{movie.lower().replace(' ', '')}", "#—Ñ–∏–ª—å–º—ã", f"#{emotion}", "#–∫–∏–Ω–æ", "#shorts"],
                "movie": movie,
                "emotion": emotion,
                "duration": clip_duration,
                "has_dramatic_effects": settings.get("add_dramatic_effects", True)
            }
            
            scheduled_time = self.calculate_optimal_time(account)
            
            content_item = ContentItem(
                id=content_id,
                account_id=account.id,
                content_type="movie_clip",
                file_path=video_path,
                metadata=metadata,
                platforms=account.platforms,
                scheduled_time=scheduled_time
            )
            
            content_items.append(content_item)
        
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–ø–æ–≤: {e}")
        
        return content_items
    
    def calculate_optimal_time(self, account: AccountConfig) -> datetime:
        """–†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        try:
            optimal_times = account.schedule.get("optimal_times", ["12:00"])
            timezone = account.schedule.get("timezone", "Europe/Moscow")
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
            time_str = random.choice(optimal_times)
            hour, minute = map(int, time_str.split(':'))
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∏–ª–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
            now = datetime.now()
            scheduled = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
            
            if scheduled <= now:
                scheduled += timedelta(days=1)
            
            return scheduled
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            return datetime.now() + timedelta(hours=1)
    
    async def run_publishing_scheduler(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
        self.logger.info("‚è∞ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
        
        while True:
            try:
                now = datetime.now()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≥–æ—Ç–æ–≤—ã–π –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                ready_content = [
                    item for item in self.content_queue 
                    if item.status == "pending" and item.scheduled_time <= now
                ]
                
                for content_item in ready_content:
                    await self.publish_content(content_item)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                await asyncio.sleep(60)
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
                await asyncio.sleep(300)
    
    async def publish_content(self, content_item: ContentItem):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        try:
            self.logger.info(f"üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ {content_item.id} –Ω–∞ {content_item.platforms}")
            
            content_item.status = "processing"
            account = self.accounts[content_item.account_id]
            
            for platform in content_item.platforms:
                success = await self.publish_to_platform(content_item, platform, account)
                if success:
                    self.logger.info(f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –Ω–∞ {platform}: {content_item.id}")
                else:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ {platform}: {content_item.id}")
            
            content_item.status = "published"
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            if content_item in self.content_queue:
                self.content_queue.remove(content_item)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ {content_item.id}: {e}")
            content_item.status = "failed"
    
    async def publish_to_platform(self, content_item: ContentItem, platform: str, account: AccountConfig) -> bool:
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É"""
        try:
            credentials = account.credentials.get(platform, {})
            
            if platform == "youtube":
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å YouTube API
                self.logger.info(f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ YouTube: {content_item.metadata['title']}")
                return True
                
            elif platform == "instagram":
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Instagram API
                self.logger.info(f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Instagram: {content_item.metadata['title']}")
                return True
                
            elif platform == "tiktok":
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å TikTok API
                self.logger.info(f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ TikTok: {content_item.metadata['title']}")
                return True
            
            return False
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ {platform}: {e}")
            return False
    
    async def optimize_posting_times(self):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        self.logger.info("üìä –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
        
        while True:
            try:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
                for account in self.accounts.values():
                    await self.analyze_account_performance(account)
                
                await asyncio.sleep(86400)  # 24 —á–∞—Å–∞
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
                await asyncio.sleep(3600)
    
    async def analyze_account_performance(self, account: AccountConfig):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º, –ª–∞–π–∫–∞–º, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º
            # –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            
            self.logger.info(f"üìà –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ {account.name}")
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑
            performance_data = {
                "avg_views": random.randint(10000, 100000),
                "engagement_rate": round(random.uniform(3.5, 8.5), 2),
                "best_times": ["12:00", "18:00", "21:00"],
                "worst_times": ["03:00", "05:00", "07:00"]
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞
            account.stats.update(performance_data)
            
            self.logger.info(f"–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã {account.name}: {performance_data['avg_views']}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {account.name}: {e}")
    
    def get_accounts_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        return {
            "total_accounts": len(self.accounts),
            "accounts": {
                acc_id: {
                    "name": acc.name,
                    "type": acc.type,
                    "platforms": acc.platforms,
                    "theme": acc.theme,
                    "stats": acc.stats
                }
                for acc_id, acc in self.accounts.items()
            },
            "queue_length": len(self.content_queue),
            "pending_content": len([c for c in self.content_queue if c.status == "pending"])
        }


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –º–Ω–æ–≥–æ–∞–∫–∫–∞—É–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    print("üè≠ –ú–ù–û–ì–û–ê–ö–ö–ê–£–ù–¢–ù–ê–Ø –§–ê–ë–†–ò–ö–ê –í–ò–†–£–°–ù–û–ì–û –ö–û–ù–¢–ï–ù–¢–ê")
    print("=" * 60)
    print("ü§ñ –ê–∫–∫–∞—É–Ω—Ç 1: AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ª–∏–ø–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ")
    print("üìà –ê–∫–∫–∞—É–Ω—Ç—ã 2-3: –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ YouTube/Instagram")  
    print("üé¨ –ê–∫–∫–∞—É–Ω—Ç 4: –ù–∞—Ä–µ–∑–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤/—Å–µ—Ä–∏–∞–ª–æ–≤")
    print("‚è∞ –£–º–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    manager = MultiAccountManager()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    status = manager.get_accounts_status()
    print(f"\nüìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {status['total_accounts']}")
    
    for acc_id, acc_info in status['accounts'].items():
        print(f"   üîπ {acc_info['name']} ({acc_info['type']}) - {acc_info['theme']}")
    
    print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ñ–∞–±—Ä–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        await manager.start_content_factory()
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∞–±—Ä–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    asyncio.run(main())