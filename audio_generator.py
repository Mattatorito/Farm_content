# üéµ –ì–ï–ù–ï–†–ê–¢–û–† –ó–í–£–ö–û–í–´–• –≠–§–§–ï–ö–¢–û–í –î–õ–Ø –í–ò–†–£–°–ù–´–• –í–ò–î–ï–û

import numpy as np
import wave
from pathlib import Path
import logging

logger = logging.getLogger(__name__)

def generate_audio_effects():
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –≤–∏–¥–µ–æ
    """
    audio_dir = Path("viral_assets/audio")
    audio_dir.mkdir(parents=True, exist_ok=True)
    
    sample_rate = 44100
    
    # –≠—Ñ—Ñ–µ–∫—Ç 1: –î—Ä–∞–º–∞—Ç–∏—á–Ω—ã–π —É–¥–∞—Ä/–±—É–º
    def create_impact_sound():
        duration = 1.5  # 1.5 —Å–µ–∫—É–Ω–¥—ã
        t = np.linspace(0, duration, int(sample_rate * duration))
        
        # –ù–∏–∑–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–π —É–¥–∞—Ä —Å –∑–∞—Ç—É—Ö–∞–Ω–∏–µ–º
        frequency = 60  # –ù–∏–∑–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ –¥–ª—è –¥—Ä–∞–º–∞—Ç–∏–∑–º–∞
        impact = np.sin(2 * np.pi * frequency * t) * np.exp(-t * 3)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —à—É–º –¥–ª—è —Ä–µ–∞–ª–∏–∑–º–∞
        noise = np.random.normal(0, 0.1, len(t)) * np.exp(-t * 5)
        
        audio = impact + noise
        audio = np.clip(audio, -1, 1)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∞–º–ø–ª–∏—Ç—É–¥—É
        
        return (audio * 32767).astype(np.int16)
    
    # –≠—Ñ—Ñ–µ–∫—Ç 2: –°–≤—É—à (–ø–µ—Ä–µ—Ö–æ–¥)
    def create_swoosh_sound():
        duration = 0.8
        t = np.linspace(0, duration, int(sample_rate * duration))
        
        # –ß–∞—Å—Ç–æ—Ç–∞ –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
        frequency = 200 + 800 * t / duration
        swoosh = np.sin(2 * np.pi * frequency * t) * np.exp(-t * 2)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–π —à—É–º
        noise = np.random.normal(0, 0.05, len(t)) * (1 - t / duration)
        
        audio = swoosh + noise
        audio = np.clip(audio, -1, 1)
        
        return (audio * 32767).astype(np.int16)
    
    # –≠—Ñ—Ñ–µ–∫—Ç 3: –¶–∏—Ñ—Ä–æ–≤–æ–π –≥–ª–∏—Ç—á
    def create_glitch_sound():
        duration = 0.3
        t = np.linspace(0, duration, int(sample_rate * duration))
        
        # –°–ª—É—á–∞–π–Ω—ã–µ —á–∞—Å—Ç–æ—Ç—ã —Å —Ä–µ–∑–∫–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        glitch = np.zeros_like(t)
        for i in range(len(t)):
            if i % 100 == 0:  # –ò–∑–º–µ–Ω—è–µ–º —á–∞—Å—Ç–æ—Ç—É –∫–∞–∂–¥—ã–µ 100 —Å—ç–º–ø–ª–æ–≤
                freq = np.random.randint(200, 2000)
            glitch[i] = np.sin(2 * np.pi * freq * t[i])
        
        # –°–ª—É—á–∞–π–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
        mask = np.random.random(len(t)) > 0.3
        glitch = glitch * mask
        
        audio = np.clip(glitch, -1, 1)
        return (audio * 32767 * 0.7).astype(np.int16)
    
    # –°–æ–∑–¥–∞–µ–º –∑–≤—É–∫–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    effects = {
        "impact.wav": create_impact_sound(),
        "swoosh.wav": create_swoosh_sound(), 
        "glitch.wav": create_glitch_sound()
    }
    
    created_files = []
    
    for filename, audio_data in effects.items():
        file_path = audio_dir / filename
        
        with wave.open(str(file_path), 'wb') as wav_file:
            wav_file.setnchannels(1)  # –ú–æ–Ω–æ
            wav_file.setsampwidth(2)  # 16-–±–∏—Ç
            wav_file.setframerate(sample_rate)
            wav_file.writeframes(audio_data.tobytes())
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –∑–≤—É–∫–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç: {filename}")
        created_files.append(str(file_path))
    
    return created_files

def create_background_music():
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é —Ñ–æ–Ω–æ–≤—É—é –º—É–∑—ã–∫—É
    """
    audio_dir = Path("viral_assets/audio")
    audio_dir.mkdir(parents=True, exist_ok=True)
    
    sample_rate = 44100
    duration = 30  # 30 —Å–µ–∫—É–Ω–¥
    t = np.linspace(0, duration, int(sample_rate * duration))
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –º–µ–ª–æ–¥–∏—é
    def create_electronic_beat():
        # –û—Å–Ω–æ–≤–Ω–æ–π –±–∞—Å –Ω–∞ 120 BPM
        beat_freq = 2  # 2 —É–¥–∞—Ä–∞ –≤ —Å–µ–∫—É–Ω–¥—É (120 BPM)
        bass = np.sin(2 * np.pi * 80 * t) * (np.sin(2 * np.pi * beat_freq * t) > 0)
        
        # –ú–µ–ª–æ–¥–∏—è —Å –∏–∑–º–µ–Ω—è—é—â–∏–º–∏—Å—è –Ω–æ—Ç–∞–º–∏
        melody_notes = [440, 523, 659, 784, 659, 523]  # A, C, E, G, E, C
        melody = np.zeros_like(t)
        
        note_duration = duration / len(melody_notes)
        for i, note in enumerate(melody_notes):
            start_idx = int(i * note_duration * sample_rate)
            end_idx = int((i + 1) * note_duration * sample_rate)
            if end_idx > len(melody):
                end_idx = len(melody)
            
            t_note = t[start_idx:end_idx] - t[start_idx]
            note_sound = np.sin(2 * np.pi * note * t_note) * 0.3
            melody[start_idx:end_idx] = note_sound
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –±–∞—Å –∏ –º–µ–ª–æ–¥–∏—é
        music = bass * 0.6 + melody * 0.4
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∑–∞—Ç—É—Ö–∞–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ
        fade_samples = int(2 * sample_rate)  # 2 —Å–µ–∫—É–Ω–¥—ã –∑–∞—Ç—É—Ö–∞–Ω–∏—è
        fade = np.ones_like(music)
        fade[-fade_samples:] = np.linspace(1, 0, fade_samples)
        music = music * fade
        
        return np.clip(music, -1, 1)
    
    # –°–æ–∑–¥–∞–µ–º –º—É–∑—ã–∫—É
    music = create_electronic_beat()
    audio_data = (music * 32767 * 0.7).astype(np.int16)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    file_path = audio_dir / "background_electronic.wav"
    
    with wave.open(str(file_path), 'wb') as wav_file:
        wav_file.setnchannels(1)
        wav_file.setsampwidth(2)
        wav_file.setframerate(sample_rate)
        wav_file.writeframes(audio_data.tobytes())
    
    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞: background_electronic.wav")
    return str(file_path)

if __name__ == "__main__":
    print("üéµ –°–æ–∑–¥–∞–Ω–∏–µ –∑–≤—É–∫–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
    effects = generate_audio_effects()
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã —ç—Ñ—Ñ–µ–∫—Ç—ã: {len(effects)}")
    
    # –°–æ–∑–¥–∞–µ–º –º—É–∑—ã–∫—É
    music = create_background_music()
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –º—É–∑—ã–∫–∞: {music}")
    
    print("üéâ –í—Å–µ –∑–≤—É–∫–æ–≤—ã–µ —Ñ–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã!")