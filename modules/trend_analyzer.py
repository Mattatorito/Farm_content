#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üî• –ú–û–î–£–õ–¨ –¢–†–ï–ù–î–û–í–û–ì–û –ê–ù–ê–õ–ò–ó–ê - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
===============================================

–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–ø–æ–≤—ã—Ö –≤–∏–¥–µ–æ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–µ–π:
- –ü–æ–∏—Å–∫ –≤–∏—Ä—É—Å–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –Ω–∞—Ä–µ–∑–∫–∞ –ª—É—á—à–∏—Ö –º–æ–º–µ–Ω—Ç–æ–≤
- –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Å—É–±—Ç–∏—Ç—Ä—ã, –º—É–∑—ã–∫–∞, —ç—Ñ—Ñ–µ–∫—Ç—ã)
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ YouTube Shorts

–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- AI-–∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–ª–æ–∂–µ–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
- –ó–∞–º–µ–Ω–∞ –∞—É–¥–∏–æ –Ω–∞ —Ç—Ä–µ–Ω–¥–æ–≤—É—é –º—É–∑—ã–∫—É
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
"""

import asyncio
import json
import logging
import os
import random
import sys
import tempfile
from datetime import datetime, timedelta
from pathlib import Path
from typing import Callable, Dict, List, Optional, Tuple

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ
import yt_dlp
from moviepy.audio.io.AudioFileClip import AudioFileClip
from moviepy.video.compositing.CompositeVideoClip import CompositeVideoClip
from moviepy.video.fx import Crop, FadeIn, FadeOut, Resize
from moviepy.video.io.VideoFileClip import VideoFileClip
from moviepy.video.tools.subtitles import SubtitlesClip

# AI –∏ –∞–Ω–∞–ª–∏–∑
try:
    import whisper

    WHISPER_AVAILABLE = True
except ImportError:
    WHISPER_AVAILABLE = False

try:
    from gtts import gTTS

    GTTS_AVAILABLE = True
except ImportError:
    GTTS_AVAILABLE = False

import requests

# –ù–∞—à–∏ –º–æ–¥—É–ª–∏
sys.path.insert(0, str(Path(__file__).parent.parent))
from trending_clip_extractor import TrendingClipExtractor
from youtube_auto_uploader import YouTubeAutoUploader

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class TrendAnalyzer:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç—Ä–µ–Ω–¥–æ–≤ —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""

    def __init__(self, progress_callback: Optional[Callable] = None):
        self.project_root = Path(__file__).parent.parent
        self.temp_dir = self.project_root / "temp_trends"
        self.temp_dir.mkdir(exist_ok=True)

        # –ü–∞–ø–∫–∏ –¥–ª—è —Ä–µ—Å—É—Ä—Å–æ–≤
        self.audio_library = self.project_root / "viral_assets" / "audio"
        self.effects_library = self.project_root / "viral_assets" / "effects"
        self.fonts_dir = self.project_root / "viral_assets" / "fonts"

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        for folder in [self.audio_library, self.effects_library, self.fonts_dir]:
            folder.mkdir(parents=True, exist_ok=True)

        # Callbacks
        self.progress_callback = progress_callback or self._default_progress

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.extractor = TrendingClipExtractor()
        self.uploader = YouTubeAutoUploader()

        # Whisper –º–æ–¥–µ–ª—å –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        self.whisper_model = None
        if WHISPER_AVAILABLE:
            try:
                self.whisper_model = whisper.load_model("base")
                logger.info("‚úÖ Whisper –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Whisper: {e}")

        logger.info("üîß TrendAnalyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _default_progress(self, progress: int, message: str):
        """–ë–∞–∑–æ–≤—ã–π callback –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        print(f"[{progress}%] {message}")

    async def analyze_and_process_trends(self, settings: Dict) -> Dict:
        """
        –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞

        Args:
            settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
                - category: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
                - videos_count: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                - add_subtitles: –¥–æ–±–∞–≤–ª—è—Ç—å –ª–∏ —Å—É–±—Ç–∏—Ç—Ä—ã
                - change_music: –º–µ–Ω—è—Ç—å –ª–∏ –º—É–∑—ã–∫—É
                - add_effects: –¥–æ–±–∞–≤–ª—è—Ç—å –ª–∏ —ç—Ñ—Ñ–µ–∫—Ç—ã
                - auto_upload: –∑–∞–≥—Ä—É–∂–∞—Ç—å –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        """
        try:
            self.progress_callback(5, "üîç –ü–æ–∏—Å–∫ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –≤–∏–¥–µ–æ...")

            # –ù–∞–π—Ç–∏ —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ –≤–∏–¥–µ–æ
            trending_videos = await self._find_trending_videos(
                settings.get("category", "gaming"), settings.get("videos_count", 3)
            )

            if not trending_videos:
                raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –≤–∏–¥–µ–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

            self.progress_callback(
                20, f"üìä –ù–∞–π–¥–µ–Ω–æ {len(trending_videos)} —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –≤–∏–¥–µ–æ"
            )

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –≤–∏–¥–µ–æ
            processed_results = []
            for i, video_info in enumerate(trending_videos):
                progress_base = 20 + (50 * i // len(trending_videos))
                self.progress_callback(
                    progress_base,
                    f"üé¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ {i+1}/{len(trending_videos)}: {video_info['title'][:40]}...",
                )

                video_result = await self._process_single_trend_video(
                    video_info, settings, progress_base
                )

                if video_result:
                    processed_results.append(video_result)

            # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            total_clips = sum(
                len(result.get("clips", [])) for result in processed_results
            )

            result = {
                "success": True,
                "trending_videos_found": len(trending_videos),
                "videos_processed": len(processed_results),
                "clips_created": total_clips,
                "processed_videos": processed_results,
                "uploaded_videos": [],
            }

            # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ YouTube (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
            if settings.get("auto_upload", True) and total_clips > 0:
                self.progress_callback(75, "üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ YouTube...")
                uploaded = await self._upload_trend_clips(processed_results)
                result["uploaded_videos"] = uploaded
                result["clips_uploaded"] = len(uploaded)

            self.progress_callback(100, "‚úÖ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            return result

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
            return {
                "success": False,
                "error": str(e),
                "trending_videos_found": 0,
                "clips_created": 0,
                "clips_uploaded": 0,
            }

    async def _find_trending_videos(self, category: str, count: int) -> List[Dict]:
        """–ü–æ–∏—Å–∫ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –≤–∏–¥–µ–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π extractor –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤
            trending_videos = self.extractor.find_trending_videos(
                categories=[category],
                max_videos=count * 2,  # –ë–æ–ª—å—à–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª—É—á—à–∏—Ö
            )

            # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–∏—Ä—É—Å–Ω–æ—Å—Ç–∏
            filtered_videos = []
            for video in trending_videos:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≤–∏—Ä—É—Å–Ω–æ—Å—Ç–∏
                if self._is_viral_worthy(video):
                    video["viral_score"] = self._calculate_viral_score(video)
                    filtered_videos.append(video)

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–∏—Ä—É—Å–Ω–æ–º—É –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—É
            filtered_videos.sort(key=lambda x: x["viral_score"], reverse=True)

            return filtered_videos[:count]

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
            return []

    def _is_viral_worthy(self, video: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –≤–∏–¥–µ–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
        min_views = 10000
        min_duration = 120  # 2 –º–∏–Ω—É—Ç—ã
        max_duration = 1800  # 30 –º–∏–Ω—É—Ç

        views = video.get("view_count", 0)
        duration = video.get("duration", 0)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
        if views < min_views:
            return False

        if not (min_duration <= duration <= max_duration):
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–æ—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
        title_lower = video.get("title", "").lower()
        restricted_words = ["18+", "adult", "nsfw", "porn", "sex"]
        if any(word in title_lower for word in restricted_words):
            return False

        return True

    def _calculate_viral_score(self, video: Dict) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –≤–∏—Ä—É—Å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ"""
        score = 0.0

        # –ü—Ä–æ—Å–º–æ—Ç—Ä—ã (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ)
        views = video.get("view_count", 0)
        score += min(views / 1000000, 10)  # –î–æ 10 –±–∞–ª–ª–æ–≤ –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã

        # –õ–∞–π–∫–∏ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
        likes = video.get("like_count", 0)
        if views > 0:
            like_ratio = likes / views
            score += like_ratio * 100  # –î–æ 10 –±–∞–ª–ª–æ–≤ –∑–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ

        # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–æ–ø—Ç–∏–º—É–º 5-15 –º–∏–Ω—É—Ç)
        duration = video.get("duration", 0)
        if 300 <= duration <= 900:  # 5-15 –º–∏–Ω—É—Ç
            score += 5
        elif 120 <= duration <= 1800:  # 2-30 –º–∏–Ω—É—Ç
            score += 2

        # –°–≤–µ–∂–µ—Å—Ç—å (–Ω–µ–¥–∞–≤–Ω–∏–µ –≤–∏–¥–µ–æ –ª—É—á—à–µ)
        upload_date = video.get("upload_date")
        if upload_date:
            try:
                upload_dt = datetime.strptime(upload_date, "%Y%m%d")
                days_old = (datetime.now() - upload_dt).days
                if days_old <= 7:
                    score += 3
                elif days_old <= 30:
                    score += 1
            except:
                pass

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ (—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞)
        title = video.get("title", "").lower()
        viral_keywords = [
            "amazing",
            "incredible",
            "shocking",
            "unbelievable",
            "crazy",
            "epic",
            "—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π",
            "–Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–π",
            "—à–æ–∫–∏—Ä—É—é—â–∏–π",
            "–±–µ–∑—É–º–Ω—ã–π",
            "—ç–ø–∏—á–Ω—ã–π",
        ]

        keyword_count = sum(1 for keyword in viral_keywords if keyword in title)
        score += keyword_count * 0.5

        return score

    async def _process_single_trend_video(
        self, video_info: Dict, settings: Dict, progress_base: int
    ) -> Optional[Dict]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ"""

        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
            self.progress_callback(progress_base + 5, "üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ...")
            video_path = await self._download_trend_video(video_info)

            if not video_path:
                return None

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –∫–ª–∏–ø—ã
            self.progress_callback(
                progress_base + 15, "üîç –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤..."
            )
            clips = await self._extract_emotional_moments(video_path, video_info)

            if not clips:
                return None

            # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–ª–∏–ø—ã
            self.progress_callback(progress_base + 25, "‚ú® –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
            modified_clips = []

            for i, clip_path in enumerate(clips):
                modified_path = await self._modify_clip(
                    clip_path, video_info, settings, i
                )
                if modified_path:
                    modified_clips.append(
                        {
                            "original_clip": clip_path,
                            "modified_clip": modified_path,
                            "clip_index": i,
                        }
                    )

            return {
                "video_info": video_info,
                "original_clips": clips,
                "clips": modified_clips,
                "viral_score": video_info.get("viral_score", 0),
            }

        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ {video_info.get('title', 'Unknown')}: {e}"
            )
            return None

    async def _download_trend_video(self, video_info: Dict) -> Optional[str]:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ"""
        try:
            video_id = video_info["id"]
            output_path = self.temp_dir / f"trend_{video_id}.%(ext)s"

            ydl_opts = {
                "format": "best[height<=720][ext=mp4]/best[ext=mp4]",
                "outtmpl": str(output_path),
                "quiet": True,
                "no_warnings": True,
            }

            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                await asyncio.get_event_loop().run_in_executor(
                    None, ydl.download, [video_info["url"]]
                )

            # –ù–∞—Ö–æ–¥–∏–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
            for file_path in self.temp_dir.glob(f"trend_{video_id}.*"):
                if file_path.suffix in [".mp4", ".mkv", ".webm"]:
                    return str(file_path)

            return None

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
            return None

    async def _extract_emotional_moments(
        self, video_path: str, video_info: Dict
    ) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã"""
        clips = []

        try:
            with VideoFileClip(video_path) as video:
                duration = video.duration

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–ø–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                clips_count = min(max(int(duration / 300), 1), 5)  # 1-5 –∫–ª–∏–ø–æ–≤

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –∏–∑ TrendingClipExtractor
                extracted_clips = self.extractor.extract_epic_clips_from_video(
                    video_info, clips_count
                )

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                if extracted_clips and self.whisper_model:
                    enhanced_clips = await self._enhance_clips_with_emotion_analysis(
                        extracted_clips, video_path
                    )
                    clips.extend(enhanced_clips)
                else:
                    clips.extend(extracted_clips or [])

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–æ–º–µ–Ω—Ç–æ–≤: {e}")

        return clips[:3]  # –ú–∞–∫—Å–∏–º—É–º 3 –∫–ª–∏–ø–∞ –Ω–∞ –≤–∏–¥–µ–æ

    async def _enhance_clips_with_emotion_analysis(
        self, clips: List[str], video_path: str
    ) -> List[str]:
        """–£–ª—É—á—à–∞–µ—Ç –≤—ã–±–æ—Ä –∫–ª–∏–ø–æ–≤ —Å –ø–æ–º–æ—â—å—é –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π –≤ –∞—É–¥–∏–æ"""
        enhanced_clips = []

        for clip_path in clips:
            try:
                # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ
                result = self.whisper_model.transcribe(clip_path)
                text = result.get("text", "")

                # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
                emotion_score = self._analyze_emotion_in_text(text)

                if emotion_score > 0.3:  # –ü–æ—Ä–æ–≥ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
                    enhanced_clips.append(clip_path)

            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π –≤ –∫–ª–∏–ø–µ: {e}")
                enhanced_clips.append(clip_path)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ

        return enhanced_clips

    def _analyze_emotion_in_text(self, text: str) -> float:
        """–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞"""
        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã
        emotional_words = {
            "positive": [
                "amazing",
                "incredible",
                "awesome",
                "fantastic",
                "perfect",
                "brilliant",
                "—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ",
                "–Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ",
                "–ø–æ—Ç—Ä—è—Å–∞—é—â–µ",
                "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∏",
                "–∏–¥–µ–∞–ª—å–Ω–æ",
            ],
            "negative": [
                "terrible",
                "horrible",
                "awful",
                "disaster",
                "nightmare",
                "shocking",
                "—É–∂–∞—Å–Ω–æ",
                "–∫–æ—à–º–∞—Ä",
                "–∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞",
                "—à–æ–∫–∏—Ä—É—é—â–µ",
                "—Å—Ç—Ä–∞—à–Ω–æ",
            ],
            "excitement": [
                "wow",
                "omg",
                "unbelievable",
                "insane",
                "crazy",
                "epic",
                "–≤–∞—É",
                "–±–æ–∂–µ",
                "–±–µ–∑—É–º–∏–µ",
                "—ç–ø–∏—á–Ω–æ",
                "–∫—Ä—É—Ç–æ",
            ],
        }

        text_lower = text.lower()
        emotion_score = 0.0

        for category, words in emotional_words.items():
            for word in words:
                if word in text_lower:
                    emotion_score += 0.1

        # –£—á–∏—Ç—ã–≤–∞–µ–º –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏
        emotion_score += text.count("!") * 0.05

        # –£—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏
        emotion_score += text.count("?") * 0.03

        return min(emotion_score, 1.0)

    async def _modify_clip(
        self, clip_path: str, video_info: Dict, settings: Dict, clip_index: int
    ) -> Optional[str]:
        """–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –∫–ª–∏–ø —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"""

        try:
            modified_path = (
                self.temp_dir / f"modified_{Path(clip_path).stem}_{clip_index}.mp4"
            )

            with VideoFileClip(clip_path) as clip:
                # –ë–∞–∑–æ–≤—ã–π –∫–ª–∏–ø
                final_clip = clip

                # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è Shorts
                final_clip = self._optimize_for_shorts(final_clip)

                # –î–æ–±–∞–≤–ª—è–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã
                if settings.get("add_subtitles", False):
                    final_clip = await self._add_subtitles_to_clip(
                        final_clip, clip_path
                    )

                # –ú–µ–Ω—è–µ–º –º—É–∑—ã–∫—É
                if settings.get("change_music", False):
                    final_clip = await self._replace_audio_with_trending_music(
                        final_clip
                    )

                # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
                if settings.get("add_effects", False):
                    final_clip = await self._add_visual_effects(final_clip, clip_index)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–ø
                await asyncio.get_event_loop().run_in_executor(
                    None,
                    lambda: final_clip.write_videofile(
                        str(modified_path),
                        codec="libx264",
                        audio_codec="aac",
                        verbose=False,
                        logger=None,
                    ),
                )

            return str(modified_path)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–ª–∏–ø–∞: {e}")
            return None

    def _optimize_for_shorts(self, clip: VideoFileClip) -> VideoFileClip:
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∏–ø –¥–ª—è YouTube Shorts"""
        # –¶–µ–ª–µ–≤–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è Shorts
        target_width, target_height = 1080, 1920

        w, h = clip.size

        # –ï—Å–ª–∏ —É–∂–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        if h > w:
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–æ –Ω—É–∂–Ω–æ–π –≤—ã—Å–æ—Ç—ã
            if h != target_height:
                scale_factor = target_height / h
                clip = clip.resize((int(w * scale_factor), target_height))
        else:
            # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ - —Å–æ–∑–¥–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ –≤—ã—Å–æ—Ç–µ
            scale_factor = target_height / h
            new_w = int(w * scale_factor)
            clip = clip.resize((new_w, target_height))

            # –û–±—Ä–µ–∑–∞–µ–º –ø–æ —à–∏—Ä–∏–Ω–µ (–±–µ—Ä–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å)
            if new_w > target_width:
                x_center = new_w / 2
                x_start = int(x_center - target_width / 2)
                clip = clip.crop(x1=x_start, x2=x_start + target_width)

        return clip

    async def _add_subtitles_to_clip(
        self, clip: VideoFileClip, clip_path: str
    ) -> VideoFileClip:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—É–±—Ç–∏—Ç—Ä—ã –∫ –∫–ª–∏–ø—É"""
        if not self.whisper_model:
            return clip

        try:
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ
            result = self.whisper_model.transcribe(clip_path)

            if not result.get("segments"):
                return clip

            # –°–æ–∑–¥–∞–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã
            subtitle_clips = []

            for segment in result["segments"]:
                start_time = segment["start"]
                end_time = segment["end"]
                text = segment["text"].strip()

                if text and end_time <= clip.duration:
                    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–ª–∏–ø
                    txt_clip = (
                        TextClip(
                            text,
                            fontsize=60,
                            color="white",
                            stroke_color="black",
                            stroke_width=3,
                            font="Arial-Bold",
                        )
                        .set_position(("center", "bottom"))
                        .set_start(start_time)
                        .set_duration(end_time - start_time)
                    )

                    subtitle_clips.append(txt_clip)

            # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∫–ª–∏–ø–æ–º
            if subtitle_clips:
                final_clip = CompositeVideoClip([clip] + subtitle_clips)
                return final_clip

        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {e}")

        return clip

    async def _replace_audio_with_trending_music(
        self, clip: VideoFileClip
    ) -> VideoFileClip:
        """–ó–∞–º–µ–Ω—è–µ—Ç –∞—É–¥–∏–æ –Ω–∞ —Ç—Ä–µ–Ω–¥–æ–≤—É—é –º—É–∑—ã–∫—É"""
        try:
            # –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é —Ç—Ä–µ–Ω–¥–æ–≤—É—é –º—É–∑—ã–∫—É
            music_files = list(self.audio_library.glob("*.mp3")) + list(
                self.audio_library.glob("*.wav")
            )

            if not music_files:
                # –ï—Å–ª–∏ –Ω–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–π –º—É–∑—ã–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∞—É–¥–∏–æ —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
                return clip

            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç—Ä–µ–∫
            music_file = random.choice(music_files)

            with AudioFileClip(str(music_file)) as music:
                # –ü–æ–¥–≥–æ–Ω—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É–∑—ã–∫–∏ –ø–æ–¥ –∫–ª–∏–ø
                if music.duration > clip.duration:
                    music = music.subclip(0, clip.duration)
                else:
                    # –ó–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º –º—É–∑—ã–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –∫–æ—Ä–æ—á–µ
                    loops_needed = int(clip.duration / music.duration) + 1
                    music_loops = [music] * loops_needed
                    music = concatenate_audioclips(music_loops).subclip(
                        0, clip.duration
                    )

                # –ü–æ–Ω–∏–∂–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –º—É–∑—ã–∫–∏
                music = music.volumex(0.3)

                # –°–º–µ—à–∏–≤–∞–µ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∞—É–¥–∏–æ (—Ç–∏—Ö–æ)
                original_audio = clip.audio.volumex(0.2) if clip.audio else None

                if original_audio:
                    final_audio = CompositeAudioClip([music, original_audio])
                else:
                    final_audio = music

                return clip.set_audio(final_audio)

        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–º–µ–Ω—ã –∞—É–¥–∏–æ: {e}")

        return clip

    async def _add_visual_effects(
        self, clip: VideoFileClip, clip_index: int
    ) -> VideoFileClip:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ
            clip = clip.fadein(0.5).fadeout(0.5)

            # –°–ª—É—á–∞–π–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
            effects = ["zoom", "shake", "glow"]
            selected_effect = effects[clip_index % len(effects)]

            if selected_effect == "zoom":
                # –≠—Ñ—Ñ–µ–∫—Ç –∑—É–º–∞
                clip = clip.resize(lambda t: 1 + 0.02 * t)
            elif selected_effect == "shake":
                # –õ–µ–≥–∫–æ–µ –¥—Ä–æ–∂–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
                pass  # –°–ª–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
            elif selected_effect == "glow":
                # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏
                clip = clip.fx(colorx, 1.2)

            return clip

        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤: {e}")

        return clip

    async def _upload_trend_clips(self, processed_results: List[Dict]) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–ª–∏–ø—ã –Ω–∞ YouTube"""
        uploaded_videos = []

        for video_result in processed_results:
            video_info = video_result["video_info"]
            clips = video_result.get("clips", [])

            for clip_data in clips:
                try:
                    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ü–µ–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                    concept = self._create_trend_upload_concept(
                        clip_data, video_info, video_result.get("viral_score", 0)
                    )

                    # –ó–∞–≥—Ä—É–∂–∞–µ–º
                    upload_result = self.uploader.upload_video(
                        clip_data["modified_clip"], concept
                    )

                    if upload_result:
                        uploaded_videos.append(
                            {
                                "original_video": video_info["title"],
                                "clip_index": clip_data["clip_index"],
                                "youtube_url": upload_result.get("video_url"),
                                "video_id": upload_result.get("video_id"),
                                "viral_score": video_result.get("viral_score", 0),
                            }
                        )

                        logger.info(
                            f"‚úÖ –¢—Ä–µ–Ω–¥–æ–≤—ã–π –∫–ª–∏–ø –∑–∞–≥—Ä—É–∂–µ–Ω: {upload_result.get('video_id')}"
                        )

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–Ω–¥–æ–≤–æ–≥–æ –∫–ª–∏–ø–∞: {e}")
                    continue

        return uploaded_videos

    def _create_trend_upload_concept(
        self, clip_data: Dict, video_info: Dict, viral_score: float
    ) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ü–µ–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–Ω–¥–æ–≤–æ–≥–æ –∫–ª–∏–ø–∞"""
        clip_index = clip_data.get("clip_index", 0)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–µ–ø–ª—è—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        viral_titles = [
            f"üî• –≠–¢–û –í–ò–î–ï–û –ù–ê–ë–†–ê–õ–û {video_info.get('view_count', 0):,} –ü–†–û–°–ú–û–¢–†–û–í!",
            f"üí• –õ–£–ß–®–ò–ô –ú–û–ú–ï–ù–¢ –ò–ó –í–ò–†–£–°–ù–û–ì–û –í–ò–î–ï–û",
            f"üöÄ –¢–†–ï–ù–î –ö–û–¢–û–†–´–ô –í–ó–û–†–í–ê–õ –ò–ù–¢–ï–†–ù–ï–¢",
            f"‚ö° –ú–û–ú–ï–ù–¢ –ó–ê –ö–û–¢–û–†–´–ô –í–°–ï –ì–û–í–û–†–Ø–¢",
            f"üéØ –í–ò–†–£–°–ù–´–ô –•–ê–ô–ü –í –û–î–ù–û–ú –ö–õ–ò–ü–ï",
        ]

        title = viral_titles[clip_index % len(viral_titles)]

        return {
            "theme": "viral_trend_remix",
            "concept": f"–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–æ–ø–æ–≤—ã–π –º–æ–º–µ–Ω—Ç –∏–∑ –≤–∏—Ä—É—Å–Ω–æ–≥–æ –≤–∏–¥–µ–æ",
            "script": {
                "hook": "–≠—Ç–æ –≤–∏–¥–µ–æ –≤–∑–æ—Ä–≤–∞–ª–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç!",
                "development": f"–°–º–æ—Ç—Ä–∏ –ª—É—á—à–∏–π –º–æ–º–µ–Ω—Ç –≤ –Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ",
                "climax": "–í–æ—Ç –ø–æ—á–µ–º—É –≤—Å–µ –æ–± —ç—Ç–æ–º –≥–æ–≤–æ—Ä—è—Ç!",
                "ending": "–ü–æ–¥–ø–∏—à–∏—Å—å —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–µ–Ω–¥—ã!",
            },
            "metadata": {
                "title": title,
                "original_video": video_info["title"],
                "viral_score": viral_score,
                "category": "Entertainment",
                "tags": self._generate_trend_tags(video_info, viral_score),
            },
        }

    def _generate_trend_tags(self, video_info: Dict, viral_score: float) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–≥–∏ –¥–ª—è —Ç—Ä–µ–Ω–¥–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        base_tags = [
            "—Ç—Ä–µ–Ω–¥—ã",
            "–≤–∏—Ä—É—Å–Ω–æ–µ",
            "—Ç–æ–ø",
            "—Ö–∞–π–ø",
            "shorts",
            "viral",
            "trending",
            "–ø–æ–ø—É–ª—è—Ä–Ω–æ–µ",
            "–ª—É—á—à–µ–µ",
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∏—Ä—É—Å–Ω–æ–≥–æ —Å—á–µ—Ç–∞
        if viral_score > 15:
            base_tags.extend(["–º–µ–≥–∞ –≤–∏—Ä—É—Å", "–≤–∑—Ä—ã–≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞", "—Ñ–µ–Ω–æ–º–µ–Ω"])
        elif viral_score > 10:
            base_tags.extend(["—Ö–∏—Ç", "–ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç—Ä–µ–Ω–¥", "–≤—Å–µ –æ–±—Å—É–∂–¥–∞—é—Ç"])

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ
        title_words = video_info.get("title", "").lower().split()
        relevant_words = [
            word for word in title_words if len(word) > 3 and word.isalpha()
        ][:3]

        return base_tags + relevant_words


# –ò–º–ø–æ—Ä—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
try:
    from moviepy.audio.fx import volumex
    from moviepy.editor import CompositeAudioClip, colorx, concatenate_audioclips
    from moviepy.video.tools.drawing import TextClip
except ImportError as e:
    logger.warning(f"–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ MoviePy –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏


def create_trending_music_library():
    """–°–æ–∑–¥–∞–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É —Ç—Ä–µ–Ω–¥–æ–≤–æ–π –º—É–∑—ã–∫–∏"""
    music_dir = Path(__file__).parent.parent / "viral_assets" / "audio"
    music_dir.mkdir(parents=True, exist_ok=True)

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –º—É–∑—ã–∫–∏
    # –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫ royalty-free –º—É–∑—ã–∫–∏

    return music_dir


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
    async def test_trend_analysis():
        def progress(prog, msg):
            print(f"[{prog}%] {msg}")

        test_settings = {
            "category": "gaming",
            "videos_count": 2,
            "add_subtitles": True,
            "change_music": False,  # –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞
            "add_effects": True,
            "auto_upload": False,  # –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞
        }

        analyzer = TrendAnalyzer(progress)
        result = await analyzer.analyze_and_process_trends(test_settings)

        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤:")
        print(json.dumps(result, indent=2, ensure_ascii=False))

    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
    asyncio.run(test_trend_analysis())
