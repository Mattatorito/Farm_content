#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üì∫ –ú–û–î–£–õ–¨ URL-–ü–†–û–¶–ï–°–°–ò–ù–ì–ê - GUI –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø
==========================================

–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ YouTube URL —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Ä–µ–∑–∫–æ–π
–∏ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–∞ YouTube Shorts —á–µ—Ä–µ–∑ GUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.

–§—É–Ω–∫—Ü–∏–∏:
- –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ –ø–æ URL
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Ä–µ–∑–∫–∞ –Ω–∞ Shorts (15-60 —Å–µ–∫)
- –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª—É—á—à–∏—Ö –º–æ–º–µ–Ω—Ç–æ–≤
- –ó–∞–≥—Ä—É–∑–∫–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
"""

import asyncio
import json
import logging
import os
import sys
import tempfile
from datetime import datetime, timedelta
from pathlib import Path
from typing import Callable, Dict, List, Optional, Tuple

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –≤–∏–¥–µ–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
try:
    import yt_dlp
except ImportError:
    print("‚ö†Ô∏è yt-dlp –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - —Ñ—É–Ω–∫—Ü–∏–∏ YouTube –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å")
    yt_dlp = None

try:
    from moviepy.audio.io.AudioFileClip import AudioFileClip
    from moviepy.video.fx import Crop, Resize
    from moviepy.video.io.VideoFileClip import VideoFileClip
except ImportError:
    print("‚ö†Ô∏è MoviePy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∏–¥–µ–æ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å")
    VideoFileClip = None

# –ù–∞—à–∏ –º–æ–¥—É–ª–∏
from trending_clip_extractor import TrendingClipExtractor
from youtube_auto_uploader import YouTubeAutoUploader

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class URLProcessor:
    """–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ YouTube URL"""

    def __init__(self, progress_callback: Optional[Callable] = None):
        self.project_root = Path(__file__).parent
        self.temp_dir = self.project_root / "temp_processing"
        self.temp_dir.mkdir(exist_ok=True)

        # Callbacks
        self.progress_callback = progress_callback or self._default_progress

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.extractor = TrendingClipExtractor()
        self.uploader = YouTubeAutoUploader()

        logger.info("üîß URLProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _default_progress(self, progress: int, message: str):
        """–ë–∞–∑–æ–≤—ã–π callback –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        print(f"[{progress}%] {message}")

    async def process_url(self, url: str, settings: Dict) -> Dict:
        """
        –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL

        Args:
            url: YouTube URL
            settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                - clips_count: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–ø–æ–≤ (1-10)
                - clip_duration: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–ª–∏–ø–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (15-180)
                - auto_upload: –∑–∞–≥—Ä—É–∂–∞—Ç—å –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (True/False)
                - quality: –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ ('720p', '480p', '360p')
                - analysis_mode: —Ä–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞ ('smart', 'uniform', 'random')

        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            self.progress_callback(5, "üîç –ê–Ω–∞–ª–∏–∑ YouTube URL...")

            # –í–∞–ª–∏–¥–∞—Ü–∏—è URL
            if not self._validate_url(url):
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π YouTube URL")

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ
            video_info = await self._get_video_info(url)
            self.progress_callback(
                15, f"üìã –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {video_info['title'][:50]}..."
            )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ
            if video_info["duration"] < 60:
                raise ValueError(
                    "–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –¥–ª—è –Ω–∞—Ä–µ–∑–∫–∏ (–º–∏–Ω–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥)"
                )

            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
            self.progress_callback(25, "üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ...")
            local_video_path = await self._download_video(
                video_info, settings.get("quality", "720p")
            )

            # –ê–Ω–∞–ª–∏–∑ –∏ –Ω–∞—Ä–µ–∑–∫–∞
            self.progress_callback(45, "‚úÇÔ∏è –ê–Ω–∞–ª–∏–∑ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–ø–æ–≤...")
            clips = await self._create_smart_clips(
                local_video_path,
                video_info,
                settings.get("clips_count", 5),
                settings.get("clip_duration", 60),
                settings.get("analysis_mode", "smart"),
            )

            result = {
                "success": True,
                "video_info": video_info,
                "clips_created": len(clips),
                "clips": clips,
                "uploaded_videos": [],
            }

            # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ YouTube (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
            if settings.get("auto_upload", True):
                self.progress_callback(70, "üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ YouTube...")
                uploaded = await self._upload_clips_to_youtube(clips, video_info)
                result["uploaded_videos"] = uploaded
                result["clips_uploaded"] = len(uploaded)

            self.progress_callback(100, "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            await self._cleanup_temp_files([local_video_path])

            return result

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL: {e}")
            return {
                "success": False,
                "error": str(e),
                "clips_created": 0,
                "clips_uploaded": 0,
            }

    def _validate_url(self, url: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è YouTube URL"""
        youtube_patterns = [
            "youtube.com/watch",
            "youtu.be/",
            "youtube.com/embed/",
            "youtube.com/v/",
        ]
        return any(pattern in url for pattern in youtube_patterns)

    async def _get_video_info(self, url: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ"""
        ydl_opts = {"quiet": True, "no_warnings": True}

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            try:
                info = ydl.extract_info(url, download=False)
                return {
                    "id": info.get("id"),
                    "title": info.get("title", "Unknown Title"),
                    "description": info.get("description", ""),
                    "duration": info.get("duration", 0),
                    "view_count": info.get("view_count", 0),
                    "like_count": info.get("like_count", 0),
                    "uploader": info.get("uploader", "Unknown"),
                    "upload_date": info.get("upload_date"),
                    "url": url,
                    "thumbnail": info.get("thumbnail"),
                }
            except Exception as e:
                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ: {e}")

    async def _download_video(self, video_info: Dict, quality: str) -> str:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ"""
        if not yt_dlp:
            raise Exception("yt-dlp –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        video_id = video_info["id"]
        output_path = self.temp_dir / f"{video_id}_original.%(ext)s"

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_formats = {
            "720p": "best[height<=720][ext=mp4]/best[ext=mp4]",
            "480p": "best[height<=480][ext=mp4]/best[ext=mp4]",
            "360p": "best[height<=360][ext=mp4]/best[ext=mp4]",
        }

        ydl_opts = {
            "format": quality_formats.get(quality, quality_formats["720p"]),
            "outtmpl": str(output_path),
            "quiet": True,
            "no_warnings": True,
        }

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            await asyncio.get_event_loop().run_in_executor(
                None, ydl.download, [video_info["url"]]
            )

        # –ù–∞—Ö–æ–¥–∏–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        for file_path in self.temp_dir.glob(f"{video_id}_original.*"):
            if file_path.suffix in [".mp4", ".mkv", ".webm"]:
                return str(file_path)

        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ")

    async def _create_smart_clips(
        self,
        video_path: str,
        video_info: Dict,
        clips_count: int,
        clip_duration: int,
        analysis_mode: str,
    ) -> List[Dict]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–ø–æ–≤ —Å —É–º–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º"""

        clips = []

        try:
            with VideoFileClip(video_path) as video:
                total_duration = video.duration

                if analysis_mode == "smart":
                    # –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ - –Ω–∞—Ö–æ–¥–∏–º –¥–∏–Ω–∞–º–∏—á–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
                    segments = await self._find_dynamic_segments(
                        video, clips_count, clip_duration
                    )
                elif analysis_mode == "uniform":
                    # –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
                    segments = self._create_uniform_segments(
                        total_duration, clips_count, clip_duration
                    )
                else:  # random
                    # –°–ª—É—á–∞–π–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
                    segments = self._create_random_segments(
                        total_duration, clips_count, clip_duration
                    )

                for i, (start, end) in enumerate(segments):
                    self.progress_callback(
                        45 + (20 * i // len(segments)),
                        f"‚úÇÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–ø–∞ {i+1}/{len(segments)}...",
                    )

                    clip_info = await self._create_single_clip(
                        video, start, end, i, video_info
                    )

                    if clip_info:
                        clips.append(clip_info)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–ø–æ–≤: {e}")
            raise

        return clips

    async def _find_dynamic_segments(
        self, video, clips_count: int, clip_duration: int
    ) -> List[Tuple[float, float]]:
        """–ù–∞—Ö–æ–¥–∏—Ç –¥–∏–Ω–∞–º–∏—á–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã –≤–∏–¥–µ–æ –¥–ª—è –Ω–∞—Ä–µ–∑–∫–∏"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ
        total_duration = video.duration
        segment_size = total_duration / (clips_count * 2)  # –ë–æ–ª—å—à–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤

        candidates = []
        for i in range(clips_count * 2):
            start = i * segment_size
            end = min(start + clip_duration, total_duration)
            if end - start >= 15:  # –ú–∏–Ω–∏–º—É–º 15 —Å–µ–∫—É–Ω–¥
                candidates.append((start, end))

        # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã (–ø–æ–∫–∞ —Å–ª—É—á–∞–π–Ω–æ, –Ω–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
        import random

        selected = random.sample(candidates, min(clips_count, len(candidates)))
        return sorted(selected)

    def _create_uniform_segments(
        self, total_duration: float, clips_count: int, clip_duration: int
    ) -> List[Tuple[float, float]]:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã"""
        segments = []
        step = max(total_duration / clips_count, clip_duration * 1.5)

        for i in range(clips_count):
            start = i * step
            end = min(start + clip_duration, total_duration)
            if end - start >= 15:
                segments.append((start, end))

        return segments

    def _create_random_segments(
        self, total_duration: float, clips_count: int, clip_duration: int
    ) -> List[Tuple[float, float]]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã"""
        import random

        segments = []

        for _ in range(clips_count * 3):  # –ë–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫
            start = random.uniform(0, total_duration - clip_duration)
            end = min(start + clip_duration, total_duration)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
            overlaps = any(
                not (end <= seg_start or start >= seg_end)
                for seg_start, seg_end in segments
            )

            if not overlaps and end - start >= 15:
                segments.append((start, end))
                if len(segments) >= clips_count:
                    break

        return sorted(segments[:clips_count])

    async def _create_single_clip(
        self,
        video: VideoFileClip,
        start: float,
        end: float,
        clip_index: int,
        video_info: Dict,
    ) -> Optional[Dict]:
        """–°–æ–∑–¥–∞–µ—Ç –æ–¥–∏–Ω –∫–ª–∏–ø"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç
            clip = video.subclip(start, end)

            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –¥–ª—è YouTube Shorts (9:16)
            clip = self._optimize_for_shorts(clip)

            # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            clip_filename = f"{video_info['id']}_clip_{clip_index+1}_{int(start)}s.mp4"
            clip_path = self.temp_dir / clip_filename

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            await asyncio.get_event_loop().run_in_executor(
                None,
                lambda: clip.write_videofile(
                    str(clip_path),
                    codec="libx264",
                    audio_codec="aac",
                    verbose=False,
                    logger=None,
                ),
            )

            clip.close()

            return {
                "clip_path": str(clip_path),
                "start_time": start,
                "end_time": end,
                "duration": end - start,
                "clip_index": clip_index,
                "original_title": video_info["title"],
                "generated_title": self._generate_clip_title(
                    video_info, clip_index, start
                ),
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–ø–∞ {clip_index}: {e}")
            return None

    def _optimize_for_shorts(self, clip: VideoFileClip) -> VideoFileClip:
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∏–ø –¥–ª—è YouTube Shorts (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç 9:16)"""
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
        w, h = clip.size

        # –ï—Å–ª–∏ —É–∂–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if h > w:
            return clip

        # –ï—Å–ª–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π - —Å–æ–∑–¥–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        target_height = 1920
        target_width = 1080

        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ –≤—ã—Å–æ—Ç–µ
        if h != target_height:
            scale_factor = target_height / h
            clip = clip.resize((int(w * scale_factor), target_height))

        # –û–±—Ä–µ–∑–∞–µ–º –ø–æ —à–∏—Ä–∏–Ω–µ (—Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º)
        if clip.w > target_width:
            x_center = clip.w / 2
            x_start = int(x_center - target_width / 2)
            clip = clip.crop(x1=x_start, x2=x_start + target_width)

        return clip

    def _generate_clip_title(
        self, video_info: Dict, clip_index: int, start_time: float
    ) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∫–ª–∏–ø–∞"""
        original_title = video_info["title"]

        # –£–ø—Ä–æ—â–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if len(original_title) > 40:
            original_title = original_title[:40] + "..."

        time_marker = f"{int(start_time//60)}:{int(start_time%60):02d}"

        templates = [
            f"üî• {original_title} - –õ—É—á—à–∏–π –º–æ–º–µ–Ω—Ç!",
            f"üí• –¢–æ–ø –º–æ–º–µ–Ω—Ç –∏–∑ {original_title}",
            f"‚ö° {original_title} [{time_marker}]",
            f"üéØ –≠–ø–∏–∫ –∏–∑ {original_title}",
            f"üöÄ {original_title} - –í–∑—Ä—ã–≤ –º–æ–∑–≥–∞!",
        ]

        return templates[clip_index % len(templates)]

    async def _upload_clips_to_youtube(
        self, clips: List[Dict], video_info: Dict
    ) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–ª–∏–ø—ã –Ω–∞ YouTube"""
        uploaded_videos = []

        for i, clip_data in enumerate(clips):
            try:
                self.progress_callback(
                    70 + (25 * i // len(clips)),
                    f"üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∏–ø–∞ {i+1}/{len(clips)} –Ω–∞ YouTube...",
                )

                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ü–µ–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                concept = self._create_upload_concept(clip_data, video_info)

                # –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π uploader
                upload_result = self.uploader.upload_video(
                    clip_data["clip_path"], concept
                )

                if upload_result:
                    uploaded_videos.append(
                        {
                            "clip_index": clip_data["clip_index"],
                            "clip_path": clip_data["clip_path"],
                            "youtube_url": upload_result.get("video_url"),
                            "video_id": upload_result.get("video_id"),
                            "title": clip_data["generated_title"],
                            "upload_time": datetime.now().isoformat(),
                        }
                    )

                    logger.info(
                        f"‚úÖ –ö–ª–∏–ø {i+1} –∑–∞–≥—Ä—É–∂–µ–Ω: {upload_result.get('video_id')}"
                    )
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª–∏–ø {i+1}")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–ø–∞ {i+1}: {e}")
                continue

        return uploaded_videos

    def _create_upload_concept(self, clip_data: Dict, video_info: Dict) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ü–µ–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ YouTube"""
        return {
            "theme": "viral_clip",
            "concept": f"–õ—É—á—à–∏–π –º–æ–º–µ–Ω—Ç –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –≤–∏–¥–µ–æ",
            "script": {
                "hook": f"–°–º–æ—Ç—Ä–∏ —ç—Ç–æ—Ç —ç–ø–∏—á–Ω—ã–π –º–æ–º–µ–Ω—Ç!",
                "development": f"–ò–∑ –≤–∏–¥–µ–æ: {video_info['title'][:50]}",
                "climax": f"–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ WOW –Ω–∞ {clip_data['start_time']:.0f} —Å–µ–∫—É–Ω–¥–µ!",
                "ending": "–ü–æ–¥–ø–∏—à–∏—Å—å –∑–∞ –µ—â–µ!",
            },
            "metadata": {
                "title": clip_data["generated_title"],
                "original_video": video_info["title"],
                "original_uploader": video_info.get("uploader"),
                "clip_duration": clip_data["duration"],
                "tags": self._generate_clip_tags(video_info, clip_data),
            },
        }

    def _generate_clip_tags(self, video_info: Dict, clip_data: Dict) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–≥–∏ –¥–ª—è –∫–ª–∏–ø–∞"""
        base_tags = [
            "shorts",
            "viral",
            "—Ç–æ–ø",
            "–ª—É—á—à–∏–π –º–æ–º–µ–Ω—Ç",
            "—ç–ø–∏–∫",
            "youtube shorts",
            "–≤–∏—Ä—É—Å–Ω–æ–µ –≤–∏–¥–µ–æ",
            "—Ç—Ä–µ–Ω–¥—ã",
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ
        title_words = video_info["title"].lower().split()
        relevant_words = [word for word in title_words if len(word) > 3][:5]

        return base_tags + relevant_words

    async def _cleanup_temp_files(self, file_paths: List[str]):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        for file_path in file_paths:
            try:
                if os.path.exists(file_path):
                    os.remove(file_path)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file_path}: {e}")


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è GUI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏


def validate_processing_settings(settings: Dict) -> Tuple[bool, str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if "clips_count" not in settings:
        return False, "–ù–µ —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–ø–æ–≤"

    if "clip_duration" not in settings:
        return False, "–ù–µ —É–∫–∞–∑–∞–Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–ª–∏–ø–∞"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
    if not 1 <= settings["clips_count"] <= 10:
        return False, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–ø–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10"

    if not 15 <= settings["clip_duration"] <= 180:
        return False, "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–ª–∏–ø–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 15 –¥–æ 180 —Å–µ–∫—É–Ω–¥"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    quality = settings.get("quality", "720p")
    if quality not in ["360p", "480p", "720p"]:
        return False, "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ"

    analysis_mode = settings.get("analysis_mode", "smart")
    if analysis_mode not in ["smart", "uniform", "random"]:
        return False, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞"

    return True, "OK"


async def process_url_with_gui_callback(
    url: str, settings: Dict, progress_callback: Callable
) -> Dict:
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL —Å GUI callback"""
    processor = URLProcessor(progress_callback)
    return await processor.process_url(url, settings)


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
    async def test_url_processing():
        def progress(prog, msg):
            print(f"[{prog}%] {msg}")

        test_url = (
            "https://www.youtube.com/watch?v=dQw4w9WgXcQ"  # Rick Roll –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        )
        test_settings = {
            "clips_count": 2,
            "clip_duration": 30,
            "auto_upload": False,  # –û—Ç–∫–ª—é—á–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è —Ç–µ—Å—Ç–∞
            "quality": "480p",
            "analysis_mode": "uniform",
        }

        processor = URLProcessor(progress)
        result = await processor.process_url(test_url, test_settings)

        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        print(json.dumps(result, indent=2, ensure_ascii=False))

    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
    asyncio.run(test_url_processing())
