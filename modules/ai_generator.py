#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
ü§ñ –ú–û–î–£–õ–¨ AI –ì–ï–ù–ï–†–ê–¶–ò–ò –í–ò–î–ï–û - –ù–û–í–û–ï –ü–û–ö–û–õ–ï–ù–ò–ï
==============================================

–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ä—É—Å–Ω–æ–≥–æ –≤–∏–¥–µ–æ–∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ AI:
- –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Ç–µ–º –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ RunwayML, Pika Labs, Leonardo AI
- –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è YouTube Shorts
- –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å —É–º–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –∏ SEO

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ AI —Å–µ—Ä–≤–∏—Å—ã:
- OpenAI GPT-4 –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
- RunwayML Gen-2 –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
- Pika Labs –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –≤–∏–¥–µ–æ
- Leonardo AI –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∫–∞–¥—Ä–æ–≤
- ElevenLabs –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞
"""

import asyncio
import base64
import json
import logging
import os
import sys
import tempfile
from datetime import datetime, timedelta
from pathlib import Path
from typing import Any, Callable, Dict, List, Optional, Tuple

import aiohttp

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –≤–∏–¥–µ–æ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
import requests

try:
    from PIL import Image, ImageDraw, ImageFont
except ImportError:
    print("‚ö†Ô∏è Pillow –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    Image = None

try:
    from moviepy.audio.io.AudioFileClip import AudioFileClip
    from moviepy.video.compositing.CompositeVideoClip import CompositeVideoClip
    from moviepy.video.fx import FadeIn, FadeOut, Resize
    from moviepy.video.io.VideoFileClip import VideoFileClip
except ImportError:
    print("‚ö†Ô∏è MoviePy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    VideoFileClip = None

# AI –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
try:
    import openai

    OPENAI_AVAILABLE = True
except ImportError:
    OPENAI_AVAILABLE = False

try:
    from gtts import gTTS

    GTTS_AVAILABLE = True
except ImportError:
    GTTS_AVAILABLE = False

# –ù–∞—à–∏ –º–æ–¥—É–ª–∏
sys.path.insert(0, str(Path(__file__).parent.parent))
from youtube_auto_uploader import YouTubeAutoUploader

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class AIVideoGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä AI –≤–∏–¥–µ–æ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è"""

    def __init__(self, progress_callback: Optional[Callable] = None):
        self.project_root = Path(__file__).parent.parent
        self.temp_dir = self.project_root / "temp_ai_generation"
        self.temp_dir.mkdir(exist_ok=True)

        # –ü–∞–ø–∫–∏ –¥–ª—è —Ä–µ—Å—É—Ä—Å–æ–≤
        self.assets_dir = self.project_root / "viral_assets"
        self.templates_dir = self.assets_dir / "templates"
        self.fonts_dir = self.assets_dir / "fonts"
        self.audio_dir = self.assets_dir / "audio"

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
        for folder in [
            self.assets_dir,
            self.templates_dir,
            self.fonts_dir,
            self.audio_dir,
        ]:
            folder.mkdir(parents=True, exist_ok=True)

        # Callbacks
        self.progress_callback = progress_callback or self._default_progress

        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.uploader = YouTubeAutoUploader()

        # API –∫–ª—é—á–∏ (–∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
        self.api_keys = self._load_api_keys()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–µ—Ä–≤–∏—Å–æ–≤
        self._init_ai_services()

        logger.info("ü§ñ AI Video Generator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _default_progress(self, progress: int, message: str):
        """–ë–∞–∑–æ–≤—ã–π callback –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        print(f"[{progress}%] {message}")

    def _load_api_keys(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç API –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config_path = self.project_root / "config" / "api_keys.json"

        try:
            if config_path.exists():
                with open(config_path, "r", encoding="utf-8") as f:
                    return json.load(f)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å API –∫–ª—é—á–∏: {e}")

        return {}

    def _init_ai_services(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç AI —Å–µ—Ä–≤–∏—Å—ã"""
        # OpenAI
        if OPENAI_AVAILABLE and self.api_keys.get("openai", {}).get("api_key"):
            openai.api_key = self.api_keys["openai"]["api_key"]
            logger.info("‚úÖ OpenAI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            logger.warning("‚ö†Ô∏è OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á")

        # –î—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é

    async def generate_ai_videos(self, settings: Dict) -> Dict:
        """
        –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI –≤–∏–¥–µ–æ

        Args:
            settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                - theme: —Ç–µ–º–∞—Ç–∏–∫–∞ –≤–∏–¥–µ–æ
                - videos_count: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
                - use_runway: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RunwayML
                - use_leonardo: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Leonardo AI
                - use_openai: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OpenAI
                - auto_upload: –∑–∞–≥—Ä—É–∂–∞—Ç—å –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        """
        try:
            self.progress_callback(5, "üß† –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –¥–ª—è AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–∏
            trending_analysis = await self._analyze_trending_themes(
                settings.get("theme", "mind_blowing_facts")
            )

            self.progress_callback(15, "üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ü–µ–ø—Ü–∏–π –≤–∏–¥–µ–æ...")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –¥–ª—è –≤–∏–¥–µ–æ
            video_concepts = await self._generate_video_concepts(
                settings.get("theme"),
                settings.get("videos_count", 1),
                trending_analysis,
            )

            if not video_concepts:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –≤–∏–¥–µ–æ")

            self.progress_callback(25, f"üé¨ –°–æ–∑–¥–∞–Ω–∏–µ {len(video_concepts)} AI –≤–∏–¥–µ–æ...")

            # –°–æ–∑–¥–∞–µ–º –∫–∞–∂–¥–æ–µ –≤–∏–¥–µ–æ
            generated_videos = []
            for i, concept in enumerate(video_concepts):
                progress_base = 25 + (50 * i // len(video_concepts))
                self.progress_callback(
                    progress_base,
                    f"ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ {i+1}/{len(video_concepts)}: {concept['title'][:30]}...",
                )

                video_result = await self._create_single_ai_video(
                    concept, settings, progress_base
                )

                if video_result:
                    generated_videos.append(video_result)

            result = {
                "success": True,
                "ai_videos_generated": len(generated_videos),
                "generated_videos": generated_videos,
                "uploaded_videos": [],
            }

            # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ YouTube
            if settings.get("auto_upload", True) and generated_videos:
                self.progress_callback(80, "üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ AI –≤–∏–¥–µ–æ –Ω–∞ YouTube...")
                uploaded = await self._upload_ai_videos(generated_videos)
                result["uploaded_videos"] = uploaded
                result["videos_uploaded"] = len(uploaded)

            self.progress_callback(100, "‚úÖ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            return result

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            return {
                "success": False,
                "error": str(e),
                "ai_videos_generated": 0,
                "videos_uploaded": 0,
            }

    async def _analyze_trending_themes(self, theme: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–∏"""
        try:
            if not OPENAI_AVAILABLE:
                return self._get_default_theme_analysis(theme)

            prompt = f"""
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—É—â–∏–µ —Ç—Ä–µ–Ω–¥—ã –¥–ª—è —Ç–µ–º–∞—Ç–∏–∫–∏ "{theme}" –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ä—É—Å–Ω–æ–≥–æ YouTube Shorts –∫–æ–Ω—Ç–µ–Ω—Ç–∞.

            –í–µ—Ä–Ω–∏ –∞–Ω–∞–ª–∏–∑ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
            {{
                "trending_keywords": ["–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ 1", "–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ 2", ...],
                "popular_formats": ["—Ñ–æ—Ä–º–∞—Ç 1", "—Ñ–æ—Ä–º–∞—Ç 2", ...],
                "emotional_hooks": ["—Ö—É–∫ 1", "—Ö—É–∫ 2", ...],
                "current_topics": ["—Ç–æ–ø–∏–∫ 1", "—Ç–æ–ø–∏–∫ 2", ...],
                "viral_potential_score": —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10
            }}

            –§–æ–∫—É—Å –Ω–∞ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é, –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã 2024-2025.
            """

            response = await self._call_openai(prompt)
            return json.loads(response)

        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
            return self._get_default_theme_analysis(theme)

    def _get_default_theme_analysis(self, theme: str) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–º–∞—Ç–∏–∫–∏"""
        theme_data = {
            "mind_blowing_facts": {
                "trending_keywords": [
                    "—Ñ–∞–∫—Ç—ã",
                    "–Ω–∞—É–∫–∞",
                    "—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ",
                    "–Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ",
                    "—à–æ–∫–∏—Ä—É—é—â–µ",
                ],
                "popular_formats": [
                    "—Ç–æ–ø —Ñ–∞–∫—Ç–æ–≤",
                    "—ç—Ç–æ –∏–∑–º–µ–Ω–∏—Ç —Ç–≤–æ—é –∂–∏–∑–Ω—å",
                    "—Ç—ã –Ω–µ –∑–Ω–∞–ª —á—Ç–æ",
                ],
                "emotional_hooks": [
                    "–¢—ã –Ω–µ –ø–æ–≤–µ—Ä–∏—à—å!",
                    "–≠—Ç–æ –≤–∑–æ—Ä–≤–µ—Ç —Ç–≤–æ–π –º–æ–∑–≥!",
                    "–£—á—ë–Ω—ã–µ –≤ —à–æ–∫–µ!",
                ],
                "current_topics": ["–∫–æ—Å–º–æ—Å", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–∏—Å—Ç–æ—Ä–∏—è", "–ø—Ä–∏—Ä–æ–¥–∞"],
                "viral_potential_score": 8,
            },
            "mystery_stories": {
                "trending_keywords": [
                    "—Ç–∞–π–Ω–∞",
                    "–∑–∞–≥–∞–¥–∫–∞",
                    "–º–∏—Å—Ç–∏–∫–∞",
                    "—Å–µ–∫—Ä–µ—Ç",
                    "–Ω–µ—Ä–∞–∑–≥–∞–¥–∞–Ω–Ω–æ–µ",
                ],
                "popular_formats": [
                    "–Ω–µ—Ä–∞—Å–∫—Ä—ã—Ç—ã–µ –¥–µ–ª–∞",
                    "–≥–æ—Ä–æ–¥—Å–∫–∏–µ –ª–µ–≥–µ–Ω–¥—ã",
                    "–º–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å—Ç–æ—Ä–∏–∏",
                ],
                "emotional_hooks": [
                    "–≠—Ç—É —Ç–∞–π–Ω—É —Å–∫—Ä—ã–≤–∞–ª–∏ 100 –ª–µ—Ç!",
                    "–ó–∞–≥–∞–¥–∫–∞ –∫–æ—Ç–æ—Ä–∞—è –ø—É–≥–∞–µ—Ç —É—á—ë–Ω—ã—Ö",
                ],
                "current_topics": ["–∞–Ω–æ–º–∞–ª–∏–∏", "–ø—Ä–æ–ø–∞–≤—à–∏–µ –ª—é–¥–∏", "–¥—Ä–µ–≤–Ω–∏–µ —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–∏"],
                "viral_potential_score": 9,
            },
            "life_hacks": {
                "trending_keywords": ["–ª–∞–π—Ñ—Ö–∞–∫", "—Å–µ–∫—Ä–µ—Ç", "—Ç—Ä—é–∫", "—Å–ø–æ—Å–æ–±", "–º–µ—Ç–æ–¥"],
                "popular_formats": [
                    "–≥–µ–Ω–∏–∞–ª—å–Ω—ã–µ –ª–∞–π—Ñ—Ö–∞–∫–∏",
                    "—Å–µ–∫—Ä–µ—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –∏–∑–º–µ–Ω—è—Ç –∂–∏–∑–Ω—å",
                ],
                "emotional_hooks": [
                    "–≠—Ç–æ—Ç —Ç—Ä—é–∫ –∏–∑–º–µ–Ω–∏—Ç –≤—Å—ë!",
                    "–ü–æ—á–µ–º—É –Ω–∏–∫—Ç–æ –Ω–µ –∑–Ω–∞–ª —ç—Ç–æ–≥–æ?",
                ],
                "current_topics": [
                    "—ç–∫–æ–Ω–æ–º–∏—è –¥–µ–Ω–µ–≥",
                    "—É–ø—Ä–æ—â–µ–Ω–∏–µ –∂–∏–∑–Ω–∏",
                    "–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è",
                ],
                "viral_potential_score": 7,
            },
        }

        return theme_data.get(theme, theme_data["mind_blowing_facts"])

    async def _generate_video_concepts(
        self, theme: str, count: int, trending_analysis: Dict
    ) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –¥–ª—è –≤–∏–¥–µ–æ"""

        concepts = []

        for i in range(count):
            try:
                if OPENAI_AVAILABLE:
                    concept = await self._generate_ai_concept(
                        theme, trending_analysis, i
                    )
                else:
                    concept = self._generate_template_concept(
                        theme, trending_analysis, i
                    )

                if concept:
                    concepts.append(concept)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ {i}: {e}")
                continue

        return concepts

    async def _generate_ai_concept(
        self, theme: str, analysis: Dict, index: int
    ) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ü–µ–ø—Ü–∏—é —á–µ—Ä–µ–∑ AI"""

        prompt = f"""
        –°–æ–∑–¥–∞–π –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –¥–ª—è –≤–∏—Ä—É—Å–Ω–æ–≥–æ YouTube Shorts –≤–∏–¥–µ–æ –Ω–∞ —Ç–µ–º—É "{theme}".

        –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:
        - –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(analysis.get('trending_keywords', []))}
        - –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(analysis.get('popular_formats', []))}
        - –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ö—É–∫–∏: {', '.join(analysis.get('emotional_hooks', []))}

        –í–µ—Ä–Ω–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
        {{
            "title": "–¶–µ–ø–ª—è—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–µ–æ",
            "concept": "–û—Å–Ω–æ–≤–Ω–∞—è –∏–¥–µ—è –≤–∏–¥–µ–æ",
            "script": {{
                "hook": "–ü–µ—Ä–≤—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã - –∑–∞—Ü–µ–ø–∫–∞",
                "development": "–†–∞–∑–≤–∏—Ç–∏–µ —Ç–µ–º—ã 30 —Å–µ–∫",
                "climax": "–ö—É–ª—å–º–∏–Ω–∞—Ü–∏—è - —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ",
                "ending": "–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é"
            }},
            "visual_style": "–û–ø–∏—Å–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∏–ª—è",
            "target_emotion": "–¶–µ–ª–µ–≤–∞—è —ç–º–æ—Ü–∏—è –∑—Ä–∏—Ç–µ–ª—è",
            "estimated_virality": —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10
        }}

        –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ: 45-60 —Å–µ–∫—É–Ω–¥. –§–æ–∫—É—Å –Ω–∞ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é.
        """

        response = await self._call_openai(prompt)
        return json.loads(response)

    def _generate_template_concept(
        self, theme: str, analysis: Dict, index: int
    ) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –ø–æ —à–∞–±–ª–æ–Ω—É"""

        templates = {
            "mind_blowing_facts": [
                {
                    "title": "–§–∞–∫—Ç –∫–æ—Ç–æ—Ä—ã–π –í–ó–û–†–í–ï–¢ —Ç–≤–æ–π –º–æ–∑–≥!",
                    "concept": "–£–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π –Ω–∞—É—á–Ω—ã–π —Ñ–∞–∫—Ç —Å –¥—Ä–∞–º–∞—Ç–∏—á–Ω–æ–π –ø–æ–¥–∞—á–µ–π",
                    "hook": "–ê —Ç—ã –∑–Ω–∞–ª —á—Ç–æ...",
                    "development": "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∞ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏",
                    "climax": "–°–∞–º–∞—è —à–æ–∫–∏—Ä—É—é—â–∞—è —á–∞—Å—Ç—å —Ñ–∞–∫—Ç–∞",
                    "ending": "–°—Ç–∞–≤—å –ª–∞–π–∫ –µ—Å–ª–∏ —É–¥–∏–≤–∏–ª—Å—è!",
                },
                {
                    "title": "99% –ª—é–¥–µ–π –ù–ï –ó–ù–ê–Æ–¢ —ç—Ç–æ–≥–æ!",
                    "concept": "–°–∫—Ä—ã—Ç–æ–µ –∑–Ω–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –∏–∑–º–µ–Ω–∏—Ç –º–∏—Ä–æ–≤–æ–∑–∑—Ä–µ–Ω–∏–µ",
                    "hook": "–≠—Ç–æ—Ç —Å–µ–∫—Ä–µ—Ç —Å–∫—Ä—ã–≤–∞—é—Ç —É–∂–µ 100 –ª–µ—Ç...",
                    "development": "–†–∞—Å–∫—Ä—ã—Ç–∏–µ —Å–µ–∫—Ä–µ—Ç–∞ –ø–æ —á–∞—Å—Ç—è–º",
                    "climax": "–ü–æ–ª–Ω–∞—è –ø—Ä–∞–≤–¥–∞ –∫–æ—Ç–æ—Ä–∞—è –≤—Å–µ—Ö —à–æ–∫–∏—Ä—É–µ—Ç",
                    "ending": "–ü–æ–¥–ø–∏—à–∏—Å—å —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ!",
                },
            ],
            "mystery_stories": [
                {
                    "title": "–¢–∞–π–Ω–∞ –∫–æ—Ç–æ—Ä–∞—è –ü–£–ì–ê–ï–¢ —É—á—ë–Ω—ã—Ö!",
                    "concept": "–ó–∞–≥–∞–¥–æ—á–Ω–æ–µ —è–≤–ª–µ–Ω–∏–µ –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è",
                    "hook": "–≠—Ç—É —Ç–∞–π–Ω—É –¥–æ —Å–∏—Ö –ø–æ—Ä –Ω–µ –º–æ–≥—É—Ç –æ–±—ä—è—Å–Ω–∏—Ç—å...",
                    "development": "–§–∞–∫—Ç—ã –∏ —Ç–µ–æ—Ä–∏–∏ –≤–æ–∫—Ä—É–≥ —Ç–∞–π–Ω—ã",
                    "climax": "–°–∞–º–∞—è –∂—É—Ç–∫–∞—è —á–∞—Å—Ç—å –∏—Å—Ç–æ—Ä–∏–∏",
                    "ending": "–ê —Ç—ã –∫–∞–∫ –¥—É–º–∞–µ—à—å, —á—Ç–æ —ç—Ç–æ –±—ã–ª–æ?",
                }
            ],
        }

        theme_templates = templates.get(theme, templates["mind_blowing_facts"])
        template = theme_templates[index % len(theme_templates)]

        return {
            "title": template["title"],
            "concept": template["concept"],
            "script": {
                "hook": template["hook"],
                "development": template["development"],
                "climax": template["climax"],
                "ending": template["ending"],
            },
            "visual_style": "–î–∏–Ω–∞–º–∏—á–Ω—ã–µ –∫–∞–¥—Ä—ã —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏",
            "target_emotion": "—É–¥–∏–≤–ª–µ–Ω–∏–µ –∏ –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ",
            "estimated_virality": 7,
        }

    async def _create_single_ai_video(
        self, concept: Dict, settings: Dict, progress_base: int
    ) -> Optional[Dict]:
        """–°–æ–∑–¥–∞–µ—Ç –æ–¥–Ω–æ AI –≤–∏–¥–µ–æ –ø–æ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏"""

        try:
            video_id = f"ai_video_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{hash(concept['title']) % 10000}"

            # –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
            self.progress_callback(
                progress_base + 5, "üìù –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è..."
            )
            detailed_script = await self._create_detailed_script(concept)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            self.progress_callback(
                progress_base + 15, "üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤..."
            )
            visual_elements = await self._generate_visual_elements(
                concept, detailed_script, settings
            )

            # –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É
            self.progress_callback(progress_base + 25, "üéµ –°–æ–∑–¥–∞–Ω–∏–µ –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∏...")
            audio_path = await self._create_audio_track(detailed_script, video_id)

            # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ
            self.progress_callback(progress_base + 35, "üé¨ –°–±–æ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ...")
            final_video_path = await self._assemble_final_video(
                visual_elements, audio_path, concept, video_id
            )

            if final_video_path:
                return {
                    "concept": concept,
                    "video_path": final_video_path,
                    "video_id": video_id,
                    "script": detailed_script,
                    "duration": await self._get_video_duration(final_video_path),
                }

            return None

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è AI –≤–∏–¥–µ–æ: {e}")
            return None

    async def _create_detailed_script(self, concept: Dict) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å —Ç–∞–π–º–∏–Ω–≥–æ–º"""

        script = concept["script"]

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∞–π–º–∏–Ω–≥–∏ (–æ–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 50 —Å–µ–∫—É–Ω–¥)
        detailed_script = {
            "segments": [
                {
                    "text": script["hook"],
                    "start_time": 0,
                    "duration": 8,
                    "type": "hook",
                    "emotion": "excitement",
                },
                {
                    "text": script["development"],
                    "start_time": 8,
                    "duration": 25,
                    "type": "development",
                    "emotion": "curiosity",
                },
                {
                    "text": script["climax"],
                    "start_time": 33,
                    "duration": 12,
                    "type": "climax",
                    "emotion": "surprise",
                },
                {
                    "text": script["ending"],
                    "start_time": 45,
                    "duration": 5,
                    "type": "ending",
                    "emotion": "call_to_action",
                },
            ],
            "total_duration": 50,
        }

        return detailed_script

    async def _generate_visual_elements(
        self, concept: Dict, script: Dict, settings: Dict
    ) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –≤–∏–¥–µ–æ"""

        visual_elements = []

        for segment in script["segments"]:
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
            element = await self._create_visual_for_segment(segment, concept, settings)
            if element:
                visual_elements.append(element)

        return visual_elements

    async def _create_visual_for_segment(
        self, segment: Dict, concept: Dict, settings: Dict
    ) -> Optional[Dict]:
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞"""

        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–∏–∑—É–∞–ª–∞
            visual_type = self._get_visual_type_for_segment(segment)

            if visual_type == "ai_generated_video":
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ AI (RunwayML, Pika Labs)
                visual_path = await self._generate_ai_video_segment(segment, settings)
            elif visual_type == "dynamic_image":
                # –°–æ–∑–¥–∞–µ–º –¥–∏–Ω–∞–º–∏—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
                visual_path = await self._create_dynamic_image_video(segment)
            else:
                # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –≤–∏–∑—É–∞–ª
                visual_path = await self._create_basic_visual(segment)

            return {
                "path": visual_path,
                "start_time": segment["start_time"],
                "duration": segment["duration"],
                "type": visual_type,
                "text_overlay": segment["text"],
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª–∞ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞: {e}")
            return None

    def _get_visual_type_for_segment(self, segment: Dict) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –≤–∏–∑—É–∞–ª–∞ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞"""
        segment_type = segment["type"]

        if segment_type == "hook":
            return "dynamic_image"  # –Ø—Ä–∫–æ–µ –ø—Ä–∏–≤–ª–µ–∫–∞—é—â–µ–µ –≤–Ω–∏–º–∞–Ω–∏–µ
        elif segment_type == "climax":
            return "ai_generated_video"  # –°–∞–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç–Ω—ã–π –º–æ–º–µ–Ω—Ç
        else:
            return "dynamic_image"  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–∏–∑—É–∞–ª

    async def _generate_ai_video_segment(
        self, segment: Dict, settings: Dict
    ) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ —Å–µ–≥–º–µ–Ω—Ç —á–µ—Ä–µ–∑ AI —Å–µ—Ä–≤–∏—Å—ã"""

        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥—É—Ç –≤—ã–∑–æ–≤—ã –∫ RunwayML/Pika Labs
        return await self._create_dynamic_image_video(segment)

    async def _create_dynamic_image_video(self, segment: Dict) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–Ω–æ–µ –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º"""

        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img_width, img_height = 1080, 1920  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Shorts

        image = Image.new(
            "RGB", (img_width, img_height), color=(20, 30, 60)
        )  # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω
        draw = ImageDraw.Draw(image)

        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        for y in range(img_height):
            color_val = int(
                20 + (y / img_height) * 40
            )  # –ì—Ä–∞–¥–∏–µ–Ω—Ç –æ—Ç —Ç–µ–º–Ω–æ–≥–æ –∫ —Å–≤–µ—Ç–ª–æ–º—É
            draw.line(
                [(0, y), (img_width, y)],
                fill=(color_val, color_val + 10, color_val + 40),
            )

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        try:
            font_size = 80
            font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", font_size)
        except:
            font = ImageFont.load_default()

        text = segment["text"]

        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        words = text.split()
        lines = []
        current_line = ""

        for word in words:
            test_line = current_line + " " + word if current_line else word
            bbox = draw.textbbox((0, 0), test_line, font=font)
            if bbox[2] - bbox[0] < img_width - 100:  # –û—Ç—Å—Ç—É–ø 50px —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
                current_line = test_line
            else:
                if current_line:
                    lines.append(current_line)
                current_line = word

        if current_line:
            lines.append(current_line)

        # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ —Ü–µ–Ω—Ç—Ä—É
        total_text_height = len(lines) * font_size * 1.2
        start_y = (img_height - total_text_height) // 2

        for i, line in enumerate(lines):
            bbox = draw.textbbox((0, 0), line, font=font)
            text_width = bbox[2] - bbox[0]
            x = (img_width - text_width) // 2
            y = start_y + i * font_size * 1.2

            # –¢–µ–Ω—å
            draw.text((x + 3, y + 3), line, font=font, fill=(0, 0, 0, 128))
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
            draw.text((x, y), line, font=font, fill=(255, 255, 255))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img_path = self.temp_dir / f"segment_img_{hash(text) % 10000}.png"
        image.save(img_path)

        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        video_path = self.temp_dir / f"segment_video_{hash(text) % 10000}.mp4"

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º MoviePy –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ
        from moviepy.editor import ImageClip

        clip = ImageClip(str(img_path), duration=segment["duration"])
        clip = clip.resize((1080, 1920))

        # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–∫–∏–π –∑—É–º —ç—Ñ—Ñ–µ–∫—Ç
        clip = clip.resize(lambda t: 1 + 0.02 * t)

        clip.write_videofile(
            str(video_path), fps=30, codec="libx264", verbose=False, logger=None
        )

        clip.close()

        return str(video_path)

    async def _create_basic_visual(self, segment: Dict) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–π –≤–∏–∑—É–∞–ª –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞"""
        return await self._create_dynamic_image_video(segment)

    async def _create_audio_track(self, script: Dict, video_id: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É –¥–ª—è –≤–∏–¥–µ–æ"""

        audio_segments = []

        for segment in script["segments"]:
            # –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
            segment_audio_path = await self._create_audio_for_text(
                segment["text"], f"{video_id}_segment_{segment['start_time']}"
            )

            if segment_audio_path:
                audio_segments.append(
                    {
                        "path": segment_audio_path,
                        "start_time": segment["start_time"],
                        "duration": segment["duration"],
                    }
                )

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∞—É–¥–∏–æ —Å–µ–≥–º–µ–Ω—Ç—ã
        final_audio_path = await self._combine_audio_segments(audio_segments, video_id)

        return final_audio_path

    async def _create_audio_for_text(self, text: str, audio_id: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∞—É–¥–∏–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""

        audio_path = self.temp_dir / f"audio_{audio_id}.mp3"

        try:
            if GTTS_AVAILABLE:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º gTTS –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏
                tts = gTTS(text=text, lang="ru", slow=False)
                tts.save(str(audio_path))
            else:
                # –°–æ–∑–¥–∞–µ–º —Ç–∏—Ö–∏–π –∞—É–¥–∏–æ —Ñ–∞–π–ª –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É
                from moviepy.editor import AudioClip

                silent_audio = AudioClip(lambda t: [0, 0], duration=5)
                silent_audio.write_audiofile(
                    str(audio_path), verbose=False, logger=None
                )
                silent_audio.close()

            return str(audio_path)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–¥–∏–æ: {e}")
            return None

    async def _combine_audio_segments(
        self, audio_segments: List[Dict], video_id: str
    ) -> str:
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –∞—É–¥–∏–æ —Å–µ–≥–º–µ–Ω—Ç—ã –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª"""

        try:
            from moviepy.editor import (
                AudioFileClip,
                CompositeAudioClip,
                concatenate_audioclips,
            )

            final_audio_path = self.temp_dir / f"final_audio_{video_id}.mp3"

            if not audio_segments:
                # –°–æ–∑–¥–∞–µ–º —Ç–∏—Ö–∏–π –∞—É–¥–∏–æ
                from moviepy.editor import AudioClip

                silent = AudioClip(lambda t: [0, 0], duration=50)
                silent.write_audiofile(
                    str(final_audio_path), verbose=False, logger=None
                )
                silent.close()
                return str(final_audio_path)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∞—É–¥–∏–æ –∫–ª–∏–ø—ã
            clips = []
            for segment in audio_segments:
                audio_clip = AudioFileClip(segment["path"])
                clips.append(audio_clip)

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
            final_audio = concatenate_audioclips(clips)
            final_audio.write_audiofile(
                str(final_audio_path), verbose=False, logger=None
            )

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–ø—ã
            for clip in clips:
                clip.close()
            final_audio.close()

            return str(final_audio_path)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}")
            return None

    async def _assemble_final_video(
        self, visual_elements: List[Dict], audio_path: str, concept: Dict, video_id: str
    ) -> str:
        """–°–æ–±–∏—Ä–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ"""

        try:
            final_video_path = self.temp_dir / f"final_video_{video_id}.mp4"

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∫–ª–∏–ø—ã
            video_clips = []

            for element in visual_elements:
                clip = VideoFileClip(element["path"])
                clip = clip.set_start(element["start_time"]).set_duration(
                    element["duration"]
                )
                video_clips.append(clip)

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–∏–¥–µ–æ –∫–ª–∏–ø—ã
            if video_clips:
                from moviepy.editor import concatenate_videoclips

                final_video = concatenate_videoclips(video_clips, method="compose")
            else:
                # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –≤–∏–¥–µ–æ –µ—Å–ª–∏ –Ω–µ—Ç –∫–ª–∏–ø–æ–≤
                final_video = self._create_fallback_video(concept, 50)

            # –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
            if audio_path and os.path.exists(audio_path):
                audio = AudioFileClip(audio_path)
                final_video = final_video.set_audio(audio)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ
            final_video.write_videofile(
                str(final_video_path),
                fps=30,
                codec="libx264",
                audio_codec="aac",
                verbose=False,
                logger=None,
            )

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–ø—ã
            for clip in video_clips:
                clip.close()
            final_video.close()

            return str(final_video_path)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ: {e}")
            return None

    def _create_fallback_video(self, concept: Dict, duration: int) -> VideoFileClip:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∞—Å–Ω–æ–µ –≤–∏–¥–µ–æ –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å"""
        from moviepy.editor import ColorClip, CompositeVideoClip, TextClip

        # –¶–≤–µ—Ç–Ω–æ–π —Ñ–æ–Ω
        bg = ColorClip(size=(1080, 1920), color=(30, 40, 80), duration=duration)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_clip = (
            TextClip(concept["title"], fontsize=60, color="white", font="Arial-Bold")
            .set_position("center")
            .set_duration(duration)
        )

        return CompositeVideoClip([bg, title_clip])

    async def _get_video_duration(self, video_path: str) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ"""
        try:
            with VideoFileClip(video_path) as clip:
                return clip.duration
        except:
            return 50.0  # –ë–∞–∑–æ–≤–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å

    async def _upload_ai_videos(self, generated_videos: List[Dict]) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç AI –≤–∏–¥–µ–æ –Ω–∞ YouTube"""

        uploaded_videos = []

        for video_data in generated_videos:
            try:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ü–µ–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ —Ñ–æ—Ä–º–∞—Ç uploader)
                upload_concept = {
                    "theme": "ai_generated_content",
                    "concept": video_data["concept"]["concept"],
                    "script": video_data["script"],
                    "metadata": {
                        "title": video_data["concept"]["title"],
                        "tags": self._generate_ai_video_tags(video_data["concept"]),
                    },
                }

                # –ó–∞–≥—Ä—É–∂–∞–µ–º
                upload_result = self.uploader.upload_video(
                    video_data["video_path"], upload_concept
                )

                if upload_result:
                    uploaded_videos.append(
                        {
                            "video_id": video_data["video_id"],
                            "concept_title": video_data["concept"]["title"],
                            "youtube_url": upload_result.get("video_url"),
                            "youtube_video_id": upload_result.get("video_id"),
                            "duration": video_data["duration"],
                        }
                    )

                    logger.info(
                        f"‚úÖ AI –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {upload_result.get('video_id')}"
                    )

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ AI –≤–∏–¥–µ–æ: {e}")
                continue

        return uploaded_videos

    def _generate_ai_video_tags(self, concept: Dict) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–≥–∏ –¥–ª—è AI –≤–∏–¥–µ–æ"""
        base_tags = [
            "ai",
            "–Ω–µ–π—Ä–æ—Å–µ—Ç–∏",
            "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
            "shorts",
            "–≤–∏—Ä—É—Å–Ω–æ–µ",
            "—Ç—Ä–µ–Ω–¥—ã",
            "–∫–æ–Ω—Ç–µ–Ω—Ç",
            "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ",
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
        title_words = concept["title"].lower().split()
        relevant_words = [word for word in title_words if len(word) > 3][:5]

        return base_tags + relevant_words

    async def _call_openai(self, prompt: str) -> str:
        """–í—ã–∑—ã–≤–∞–µ—Ç OpenAI API"""
        try:
            if not OPENAI_AVAILABLE:
                raise Exception("OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {
                        "role": "system",
                        "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è YouTube Shorts. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º JSON —Ñ–æ—Ä–º–∞—Ç–µ.",
                    },
                    {"role": "user", "content": prompt},
                ],
                max_tokens=1000,
                temperature=0.7,
            )

            return response.choices[0].message.content.strip()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ OpenAI: {e}")
            raise


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
    async def test_ai_generation():
        def progress(prog, msg):
            print(f"[{prog}%] {msg}")

        test_settings = {
            "theme": "mind_blowing_facts",
            "videos_count": 1,
            "use_runway": False,  # –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞
            "use_leonardo": False,
            "use_openai": True,
            "auto_upload": False,  # –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞
        }

        generator = AIVideoGenerator(progress)
        result = await generator.generate_ai_videos(test_settings)

        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
        print(json.dumps(result, indent=2, ensure_ascii=False))

    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
    asyncio.run(test_ai_generation())
