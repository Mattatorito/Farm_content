#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É.
"""

import shutil
import sys
from pathlib import Path

from src.farm_content.core import get_logger

logger = get_logger(__name__)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏."""
    logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞...")

    project_root = Path(__file__).parent

    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
    backup_dir = project_root / "legacy_backup"
    if not backup_dir.exists():
        backup_dir.mkdir()
        logger.info(f"üì¶ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –±—ç–∫–∞–ø–∞: {backup_dir}")

    # –§–∞–π–ª—ã –¥–ª—è –±—ç–∫–∞–ø–∞
    legacy_files = [
        "main_launcher.py",
        "cli_app.py",
        "gui_app.py",
        "simple_gui.py",
        "web_gui.py",
        "test_system.py",
        "trending_clip_extractor.py",
        "youtube_auto_uploader.py",
        "modules/",
    ]

    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø—ã
    for file_path in legacy_files:
        source = project_root / file_path
        if source.exists():
            if source.is_dir():
                target = backup_dir / file_path
                if not target.exists():
                    shutil.copytree(source, target)
                    logger.info(f"üìÅ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –ø–∞–ø–∫–∞: {file_path}")
            else:
                target = backup_dir / file_path
                target.parent.mkdir(parents=True, exist_ok=True)
                shutil.copy2(source, target)
                logger.info(f"üìÑ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª: {file_path}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    required_dirs = [
        "src/farm_content",
        "tests",
        "docs",
    ]

    missing_dirs = []
    for dir_path in required_dirs:
        if not (project_root / dir_path).exists():
            missing_dirs.append(dir_path)

    if missing_dirs:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏: {missing_dirs}")
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã
    required_files = [
        "pyproject.toml",
        "Makefile",
        "src/farm_content/__init__.py",
        "src/farm_content/cli.py",
    ]

    missing_files = []
    for file_path in required_files:
        if not (project_root / file_path).exists():
            missing_files.append(file_path)

    if missing_files:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã: {missing_files}")
        return False

    logger.info("‚úÖ –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –≥–æ—Ç–æ–≤–∞!")
    logger.info("üìö –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    logger.info("  1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: make install-dev")
    logger.info("  2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã: make test")
    logger.info("  3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–æ–≤—ã–π CLI: farm-content --help")
    logger.info("  4. –°—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ legacy_backup/")

    return True


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
