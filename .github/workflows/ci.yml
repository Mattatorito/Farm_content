name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg libmagic1

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install ffmpeg libmagic

    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install ffmpeg

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Lint with flake8
      run: |
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Check code formatting with black
      run: |
        black --check src/ tests/

    - name: Check import sorting with isort
      run: |
        isort --check-only src/ tests/

    - name: Type check with mypy
      run: |
        mypy src/
      continue-on-error: true  # Пока разрешаем ошибки типизации

    - name: Run unit tests
      run: |
        pytest tests/ -m "not integration and not slow" --cov=src/farm_content --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-tests:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg libmagic1

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run integration tests
      run: |
        pytest tests/ -m integration --timeout=300
      env:
        # Добавьте необходимые переменные окружения для интеграционных тестов
        FARM_CONTENT_TEST_MODE: "true"

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit Security Scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
      continue-on-error: true

    - name: Run Safety Check
      run: |
        safety check --json --output safety-report.json || true
      continue-on-error: true

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-files
        path: dist/

  # release:
  #   runs-on: ubuntu-latest
  #   needs: [test, build]
  #   if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
  #
  #   steps:
  #   - uses: actions/checkout@v4
  #
  #   - name: Download build artifacts
  #     uses: actions/download-artifact@v3
  #     with:
  #       name: dist-files
  #       path: dist/
  #
  #   - name: Publish to TestPyPI
  #     uses: pypa/gh-action-pypi-publish@release/v1
  #     with:
  #       password: ${{ secrets.TEST_PYPI_API_TOKEN }}
  #       repository-url: https://test.pypi.org/legacy/
  #     continue-on-error: true
  #
  #   - name: Publish to PyPI
  #     uses: pypa/gh-action-pypi-publish@release/v1
  #     with:
  #       password: ${{ secrets.PYPI_API_TOKEN }}
  #     continue-on-error: true
  #
  #   - name: Create GitHub Release
  #     uses: actions/create-release@v1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       tag_name: ${{ github.ref }}
  #       release_name: Release ${{ github.ref }}
  #       draft: false
  #       prerelease: false
